{This file generated automatically from libxml2-api.xml}
{For libxml2 version: 2.6.26}
Unit libxml2;

interface

{$ALIGN 8}
{$MINENUMSIZE 4}



const
{$IFDEF WIN32}
  LIBXML2_SO = 'libxml2.dll';
{$ENDIF}
{$IFDEF WIN64}
  LIBXML2_SO = 'libxml2-2.dll';
{$ENDIF}
{$IFDEF LINUX}
  LIBXML2_SO = 'libxml2.so';
{$ENDIF}

  XML_DETECT_IDS = 2;
  XML_COMPLETE_ATTRS = 4;
  XML_SKIP_IDS = 8;
  
type


      PFILE = Pointer;
      iconv_t = Cardinal;
      size_t = Cardinal;
      va_list = Pointer;
      xmlCharPtr = PAnsiChar;
      pxmlChar = PAnsiChar; // For backwards compatibility
      xmlCharPtrPtr = ^xmlCharPtr;
      xmlNodePtrPtr = ^xmlNodePtr;
      xmlDocPtrPtr = ^xmlDocPtr;
      xmlNSPtrPtr = ^xmlNSPtr;
      xmlSchemaValPtrPtr = ^xmlSchemaValPtr;
      xmlEnumerationPtrPtr = ^xmlEnumerationPtr;
      xmlElementContentPtrPtr = ^xmlElementContentPtr;
      xlinkHRefPtr = ^xlinkHRef;
      xlinkRolePtr = ^xlinkRole;
      xlinkShowPtr = ^xlinkShow;
      xlinkActuatePtr = ^xlinkActuate;
      xlinkTitlePtr = ^xlinkTitle;
      xmlXPathObjectPtrPtr = ^xmlXPathObjectPtr;
      xmlParserInputPtrPtr = ^xmlParserInputPtr;
      xmlBufferAllocationSchemePtr = ^xmlBufferAllocationScheme;
      xmlSAXHandlerPtrPtr = ^xmlSAXHandlerPtr;
      xmlExpNodePtrPtr = ^xmlExpNodePtr;
      xmlSchemaAttributeLinkPtrPtr = ^xmlSchemaAttributeLinkPtr;

      htmlParserOption = (
          HTML_PARSE_RECOVER = 1,
          HTML_PARSE_NOERROR = 32,
          HTML_PARSE_NOWARNING = 64,
          HTML_PARSE_PEDANTIC = 128,
          HTML_PARSE_NOBLANKS = 256,
          HTML_PARSE_NONET = 2048,
          HTML_PARSE_COMPACT = 65536);

      htmlStatus = (
          HTML_NA = 0,
          HTML_INVALID = 1,
          HTML_DEPRECATED = 2,
          HTML_VALID = 4,
          HTML_REQUIRED = 12);

      xlinkActuate = (
          XLINK_ACTUATE_NONE = 0,
          XLINK_ACTUATE_AUTO = 1,
          XLINK_ACTUATE_ONREQUEST = 2);

      xlinkShow = (
          XLINK_SHOW_NONE = 0,
          XLINK_SHOW_NEW = 1,
          XLINK_SHOW_EMBED = 2,
          XLINK_SHOW_REPLACE = 3);

      xlinkType = (
          XLINK_TYPE_NONE = 0,
          XLINK_TYPE_SIMPLE = 1,
          XLINK_TYPE_EXTENDED = 2,
          XLINK_TYPE_EXTENDED_SET = 3);

      xmlAttributeDefault = (
          XML_ATTRIBUTE_NONE = 1,
          XML_ATTRIBUTE_REQUIRED = 2,
          XML_ATTRIBUTE_IMPLIED = 3,
          XML_ATTRIBUTE_FIXED = 4);

      xmlAttributeType = (
          XML_ATTRIBUTE_CDATA = 1,
          XML_ATTRIBUTE_ID = 2,
          XML_ATTRIBUTE_IDREF = 3,
          XML_ATTRIBUTE_IDREFS = 4,
          XML_ATTRIBUTE_ENTITY = 5,
          XML_ATTRIBUTE_ENTITIES = 6,
          XML_ATTRIBUTE_NMTOKEN = 7,
          XML_ATTRIBUTE_NMTOKENS = 8,
          XML_ATTRIBUTE_ENUMERATION = 9,
          XML_ATTRIBUTE_NOTATION = 10);

      xmlBufferAllocationScheme = (
          XML_BUFFER_ALLOC_DOUBLEIT = 1,
          XML_BUFFER_ALLOC_EXACT = 2,
          XML_BUFFER_ALLOC_IMMUTABLE = 3);

      xmlCatalogAllow = (
          XML_CATA_ALLOW_NONE = 0,
          XML_CATA_ALLOW_GLOBAL = 1,
          XML_CATA_ALLOW_DOCUMENT = 2,
          XML_CATA_ALLOW_ALL = 3);

      xmlCatalogPrefer = (
          XML_CATA_PREFER_NONE = 0,
          XML_CATA_PREFER_PUBLIC = 1,
          XML_CATA_PREFER_SYSTEM = 2);

      xmlCharEncoding = (
          XML_CHAR_ENCODING_ERROR = -1,
          XML_CHAR_ENCODING_NONE = 0,
          XML_CHAR_ENCODING_UTF8 = 1,
          XML_CHAR_ENCODING_UTF16LE = 2,
          XML_CHAR_ENCODING_UTF16BE = 3,
          XML_CHAR_ENCODING_UCS4LE = 4,
          XML_CHAR_ENCODING_UCS4BE = 5,
          XML_CHAR_ENCODING_EBCDIC = 6,
          XML_CHAR_ENCODING_UCS4_2143 = 7,
          XML_CHAR_ENCODING_UCS4_3412 = 8,
          XML_CHAR_ENCODING_UCS2 = 9,
          XML_CHAR_ENCODING_8859_1 = 10,
          XML_CHAR_ENCODING_8859_2 = 11,
          XML_CHAR_ENCODING_8859_3 = 12,
          XML_CHAR_ENCODING_8859_4 = 13,
          XML_CHAR_ENCODING_8859_5 = 14,
          XML_CHAR_ENCODING_8859_6 = 15,
          XML_CHAR_ENCODING_8859_7 = 16,
          XML_CHAR_ENCODING_8859_8 = 17,
          XML_CHAR_ENCODING_8859_9 = 18,
          XML_CHAR_ENCODING_2022_JP = 19,
          XML_CHAR_ENCODING_SHIFT_JIS = 20,
          XML_CHAR_ENCODING_EUC_JP = 21,
          XML_CHAR_ENCODING_ASCII = 22);

      xmlElementContentOccur = (
          XML_ELEMENT_CONTENT_ONCE = 1,
          XML_ELEMENT_CONTENT_OPT = 2,
          XML_ELEMENT_CONTENT_MULT = 3,
          XML_ELEMENT_CONTENT_PLUS = 4);

      xmlElementContentType = (
          XML_ELEMENT_CONTENT_PCDATA = 1,
          XML_ELEMENT_CONTENT_ELEMENT = 2,
          XML_ELEMENT_CONTENT_SEQ = 3,
          XML_ELEMENT_CONTENT_OR = 4);

      xmlElementType = (
          XML_ELEMENT_NODE = 1,
          XML_ATTRIBUTE_NODE = 2,
          XML_TEXT_NODE = 3,
          XML_CDATA_SECTION_NODE = 4,
          XML_ENTITY_REF_NODE = 5,
          XML_ENTITY_NODE = 6,
          XML_PI_NODE = 7,
          XML_COMMENT_NODE = 8,
          XML_DOCUMENT_NODE = 9,
          XML_DOCUMENT_TYPE_NODE = 10,
          XML_DOCUMENT_FRAG_NODE = 11,
          XML_NOTATION_NODE = 12,
          XML_HTML_DOCUMENT_NODE = 13,
          XML_DTD_NODE = 14,
          XML_ELEMENT_DECL = 15,
          XML_ATTRIBUTE_DECL = 16,
          XML_ENTITY_DECL = 17,
          XML_NAMESPACE_DECL = 18,
          XML_XINCLUDE_START = 19,
          XML_XINCLUDE_END = 20,
          XML_DOCB_DOCUMENT_NODE = 21);

      xmlElementTypeVal = (
          XML_ELEMENT_TYPE_UNDEFINED = 0,
          XML_ELEMENT_TYPE_EMPTY = 1,
          XML_ELEMENT_TYPE_ANY = 2,
          XML_ELEMENT_TYPE_MIXED = 3,
          XML_ELEMENT_TYPE_ELEMENT = 4);

      xmlEntityType = (
          XML_INTERNAL_GENERAL_ENTITY = 1,
          XML_EXTERNAL_GENERAL_PARSED_ENTITY = 2,
          XML_EXTERNAL_GENERAL_UNPARSED_ENTITY = 3,
          XML_INTERNAL_PARAMETER_ENTITY = 4,
          XML_EXTERNAL_PARAMETER_ENTITY = 5,
          XML_INTERNAL_PREDEFINED_ENTITY = 6);

      xmlErrorDomain = (
          XML_FROM_NONE = 0,
          XML_FROM_PARSER = 1,
          XML_FROM_TREE = 2,
          XML_FROM_NAMESPACE = 3,
          XML_FROM_DTD = 4,
          XML_FROM_HTML = 5,
          XML_FROM_MEMORY = 6,
          XML_FROM_OUTPUT = 7,
          XML_FROM_IO = 8,
          XML_FROM_FTP = 9,
          XML_FROM_HTTP = 10,
          XML_FROM_XINCLUDE = 11,
          XML_FROM_XPATH = 12,
          XML_FROM_XPOINTER = 13,
          XML_FROM_REGEXP = 14,
          XML_FROM_DATATYPE = 15,
          XML_FROM_SCHEMASP = 16,
          XML_FROM_SCHEMASV = 17,
          XML_FROM_RELAXNGP = 18,
          XML_FROM_RELAXNGV = 19,
          XML_FROM_CATALOG = 20,
          XML_FROM_C14N = 21,
          XML_FROM_XSLT = 22,
          XML_FROM_VALID = 23,
          XML_FROM_CHECK = 24,
          XML_FROM_WRITER = 25,
          XML_FROM_MODULE = 26,
          XML_FROM_I18N = 27);

      xmlErrorLevel = (
          XML_ERR_NONE = 0,
          XML_ERR_WARNING = 1,
          XML_ERR_ERROR = 2,
          XML_ERR_FATAL = 3);

      xmlExpNodeType = (
          XML_EXP_EMPTY = 0,
          XML_EXP_FORBID = 1,
          XML_EXP_ATOM = 2,
          XML_EXP_SEQ = 3,
          XML_EXP_OR = 4,
          XML_EXP_COUNT = 5);

      xmlFeature = (
          XML_WITH_THREAD = 1,
          XML_WITH_TREE = 2,
          XML_WITH_OUTPUT = 3,
          XML_WITH_PUSH = 4,
          XML_WITH_READER = 5,
          XML_WITH_PATTERN = 6,
          XML_WITH_WRITER = 7,
          XML_WITH_SAX1 = 8,
          XML_WITH_FTP = 9,
          XML_WITH_HTTP = 10,
          XML_WITH_VALID = 11,
          XML_WITH_HTML = 12,
          XML_WITH_LEGACY = 13,
          XML_WITH_C14N = 14,
          XML_WITH_CATALOG = 15,
          XML_WITH_XPATH = 16,
          XML_WITH_XPTR = 17,
          XML_WITH_XINCLUDE = 18,
          XML_WITH_ICONV = 19,
          XML_WITH_ISO8859X = 20,
          XML_WITH_UNICODE = 21,
          XML_WITH_REGEXP = 22,
          XML_WITH_AUTOMATA = 23,
          XML_WITH_EXPR = 24,
          XML_WITH_SCHEMAS = 25,
          XML_WITH_SCHEMATRON = 26,
          XML_WITH_MODULES = 27,
          XML_WITH_DEBUG = 28,
          XML_WITH_DEBUG_MEM = 29,
          XML_WITH_DEBUG_RUN = 30,
          XML_WITH_NONE = 99999);

      xmlModuleOption = (
          XML_MODULE_LAZY = 1,
          XML_MODULE_LOCAL = 2);

      xmlParserErrors = (
          XML_ERR_OK = 0,
          XML_ERR_INTERNAL_ERROR = 1,
          XML_ERR_NO_MEMORY = 2,
          XML_ERR_DOCUMENT_START = 3,
          XML_ERR_DOCUMENT_EMPTY = 4,
          XML_ERR_DOCUMENT_END = 5,
          XML_ERR_INVALID_HEX_CHARREF = 6,
          XML_ERR_INVALID_DEC_CHARREF = 7,
          XML_ERR_INVALID_CHARREF = 8,
          XML_ERR_INVALID_CHAR = 9,
          XML_ERR_CHARREF_AT_EOF = 10,
          XML_ERR_CHARREF_IN_PROLOG = 11,
          XML_ERR_CHARREF_IN_EPILOG = 12,
          XML_ERR_CHARREF_IN_DTD = 13,
          XML_ERR_ENTITYREF_AT_EOF = 14,
          XML_ERR_ENTITYREF_IN_PROLOG = 15,
          XML_ERR_ENTITYREF_IN_EPILOG = 16,
          XML_ERR_ENTITYREF_IN_DTD = 17,
          XML_ERR_PEREF_AT_EOF = 18,
          XML_ERR_PEREF_IN_PROLOG = 19,
          XML_ERR_PEREF_IN_EPILOG = 20,
          XML_ERR_PEREF_IN_INT_SUBSET = 21,
          XML_ERR_ENTITYREF_NO_NAME = 22,
          XML_ERR_ENTITYREF_SEMICOL_MISSING = 23,
          XML_ERR_PEREF_NO_NAME = 24,
          XML_ERR_PEREF_SEMICOL_MISSING = 25,
          XML_ERR_UNDECLARED_ENTITY = 26,
          XML_WAR_UNDECLARED_ENTITY = 27,
          XML_ERR_UNPARSED_ENTITY = 28,
          XML_ERR_ENTITY_IS_EXTERNAL = 29,
          XML_ERR_ENTITY_IS_PARAMETER = 30,
          XML_ERR_UNKNOWN_ENCODING = 31,
          XML_ERR_UNSUPPORTED_ENCODING = 32,
          XML_ERR_STRING_NOT_STARTED = 33,
          XML_ERR_STRING_NOT_CLOSED = 34,
          XML_ERR_NS_DECL_ERROR = 35,
          XML_ERR_ENTITY_NOT_STARTED = 36,
          XML_ERR_ENTITY_NOT_FINISHED = 37,
          XML_ERR_LT_IN_ATTRIBUTE = 38,
          XML_ERR_ATTRIBUTE_NOT_STARTED = 39,
          XML_ERR_ATTRIBUTE_NOT_FINISHED = 40,
          XML_ERR_ATTRIBUTE_WITHOUT_VALUE = 41,
          XML_ERR_ATTRIBUTE_REDEFINED = 42,
          XML_ERR_LITERAL_NOT_STARTED = 43,
          XML_ERR_LITERAL_NOT_FINISHED = 44,
          XML_ERR_COMMENT_NOT_FINISHED = 45,
          XML_ERR_PI_NOT_STARTED = 46,
          XML_ERR_PI_NOT_FINISHED = 47,
          XML_ERR_NOTATION_NOT_STARTED = 48,
          XML_ERR_NOTATION_NOT_FINISHED = 49,
          XML_ERR_ATTLIST_NOT_STARTED = 50,
          XML_ERR_ATTLIST_NOT_FINISHED = 51,
          XML_ERR_MIXED_NOT_STARTED = 52,
          XML_ERR_MIXED_NOT_FINISHED = 53,
          XML_ERR_ELEMCONTENT_NOT_STARTED = 54,
          XML_ERR_ELEMCONTENT_NOT_FINISHED = 55,
          XML_ERR_XMLDECL_NOT_STARTED = 56,
          XML_ERR_XMLDECL_NOT_FINISHED = 57,
          XML_ERR_CONDSEC_NOT_STARTED = 58,
          XML_ERR_CONDSEC_NOT_FINISHED = 59,
          XML_ERR_EXT_SUBSET_NOT_FINISHED = 60,
          XML_ERR_DOCTYPE_NOT_FINISHED = 61,
          XML_ERR_MISPLACED_CDATA_END = 62,
          XML_ERR_CDATA_NOT_FINISHED = 63,
          XML_ERR_RESERVED_XML_NAME = 64,
          XML_ERR_SPACE_REQUIRED = 65,
          XML_ERR_SEPARATOR_REQUIRED = 66,
          XML_ERR_NMTOKEN_REQUIRED = 67,
          XML_ERR_NAME_REQUIRED = 68,
          XML_ERR_PCDATA_REQUIRED = 69,
          XML_ERR_URI_REQUIRED = 70,
          XML_ERR_PUBID_REQUIRED = 71,
          XML_ERR_LT_REQUIRED = 72,
          XML_ERR_GT_REQUIRED = 73,
          XML_ERR_LTSLASH_REQUIRED = 74,
          XML_ERR_EQUAL_REQUIRED = 75,
          XML_ERR_TAG_NAME_MISMATCH = 76,
          XML_ERR_TAG_NOT_FINISHED = 77,
          XML_ERR_STANDALONE_VALUE = 78,
          XML_ERR_ENCODING_NAME = 79,
          XML_ERR_HYPHEN_IN_COMMENT = 80,
          XML_ERR_INVALID_ENCODING = 81,
          XML_ERR_EXT_ENTITY_STANDALONE = 82,
          XML_ERR_CONDSEC_INVALID = 83,
          XML_ERR_VALUE_REQUIRED = 84,
          XML_ERR_NOT_WELL_BALANCED = 85,
          XML_ERR_EXTRA_CONTENT = 86,
          XML_ERR_ENTITY_CHAR_ERROR = 87,
          XML_ERR_ENTITY_PE_INTERNAL = 88,
          XML_ERR_ENTITY_LOOP = 89,
          XML_ERR_ENTITY_BOUNDARY = 90,
          XML_ERR_INVALID_URI = 91,
          XML_ERR_URI_FRAGMENT = 92,
          XML_WAR_CATALOG_PI = 93,
          XML_ERR_NO_DTD = 94,
          XML_ERR_CONDSEC_INVALID_KEYWORD = 95,
          XML_ERR_VERSION_MISSING = 96,
          XML_WAR_UNKNOWN_VERSION = 97,
          XML_WAR_LANG_VALUE = 98,
          XML_WAR_NS_URI = 99,
          XML_WAR_NS_URI_RELATIVE = 100,
          XML_ERR_MISSING_ENCODING = 101,
          XML_WAR_SPACE_VALUE = 102,
          XML_ERR_NOT_STANDALONE = 103,
          XML_ERR_ENTITY_PROCESSING = 104,
          XML_ERR_NOTATION_PROCESSING = 105,
          XML_WAR_NS_COLUMN = 106,
          XML_WAR_ENTITY_REDEFINED = 107,
          XML_NS_ERR_XML_NAMESPACE = 200,
          XML_NS_ERR_UNDEFINED_NAMESPACE = 201,
          XML_NS_ERR_QNAME = 202,
          XML_NS_ERR_ATTRIBUTE_REDEFINED = 203,
          XML_NS_ERR_EMPTY = 204,
          XML_DTD_ATTRIBUTE_DEFAULT = 500,
          XML_DTD_ATTRIBUTE_REDEFINED = 501,
          XML_DTD_ATTRIBUTE_VALUE = 502,
          XML_DTD_CONTENT_ERROR = 503,
          XML_DTD_CONTENT_MODEL = 504,
          XML_DTD_CONTENT_NOT_DETERMINIST = 505,
          XML_DTD_DIFFERENT_PREFIX = 506,
          XML_DTD_ELEM_DEFAULT_NAMESPACE = 507,
          XML_DTD_ELEM_NAMESPACE = 508,
          XML_DTD_ELEM_REDEFINED = 509,
          XML_DTD_EMPTY_NOTATION = 510,
          XML_DTD_ENTITY_TYPE = 511,
          XML_DTD_ID_FIXED = 512,
          XML_DTD_ID_REDEFINED = 513,
          XML_DTD_ID_SUBSET = 514,
          XML_DTD_INVALID_CHILD = 515,
          XML_DTD_INVALID_DEFAULT = 516,
          XML_DTD_LOAD_ERROR = 517,
          XML_DTD_MISSING_ATTRIBUTE = 518,
          XML_DTD_MIXED_CORRUPT = 519,
          XML_DTD_MULTIPLE_ID = 520,
          XML_DTD_NO_DOC = 521,
          XML_DTD_NO_DTD = 522,
          XML_DTD_NO_ELEM_NAME = 523,
          XML_DTD_NO_PREFIX = 524,
          XML_DTD_NO_ROOT = 525,
          XML_DTD_NOTATION_REDEFINED = 526,
          XML_DTD_NOTATION_VALUE = 527,
          XML_DTD_NOT_EMPTY = 528,
          XML_DTD_NOT_PCDATA = 529,
          XML_DTD_NOT_STANDALONE = 530,
          XML_DTD_ROOT_NAME = 531,
          XML_DTD_STANDALONE_WHITE_SPACE = 532,
          XML_DTD_UNKNOWN_ATTRIBUTE = 533,
          XML_DTD_UNKNOWN_ELEM = 534,
          XML_DTD_UNKNOWN_ENTITY = 535,
          XML_DTD_UNKNOWN_ID = 536,
          XML_DTD_UNKNOWN_NOTATION = 537,
          XML_DTD_STANDALONE_DEFAULTED = 538,
          XML_DTD_XMLID_VALUE = 539,
          XML_DTD_XMLID_TYPE = 540,
          XML_HTML_STRUCURE_ERROR = 800,
          XML_HTML_UNKNOWN_TAG = 801,
          XML_RNGP_ANYNAME_ATTR_ANCESTOR = 1000,
          XML_RNGP_ATTR_CONFLICT = 1001,
          XML_RNGP_ATTRIBUTE_CHILDREN = 1002,
          XML_RNGP_ATTRIBUTE_CONTENT = 1003,
          XML_RNGP_ATTRIBUTE_EMPTY = 1004,
          XML_RNGP_ATTRIBUTE_NOOP = 1005,
          XML_RNGP_CHOICE_CONTENT = 1006,
          XML_RNGP_CHOICE_EMPTY = 1007,
          XML_RNGP_CREATE_FAILURE = 1008,
          XML_RNGP_DATA_CONTENT = 1009,
          XML_RNGP_DEF_CHOICE_AND_INTERLEAVE = 1010,
          XML_RNGP_DEFINE_CREATE_FAILED = 1011,
          XML_RNGP_DEFINE_EMPTY = 1012,
          XML_RNGP_DEFINE_MISSING = 1013,
          XML_RNGP_DEFINE_NAME_MISSING = 1014,
          XML_RNGP_ELEM_CONTENT_EMPTY = 1015,
          XML_RNGP_ELEM_CONTENT_ERROR = 1016,
          XML_RNGP_ELEMENT_EMPTY = 1017,
          XML_RNGP_ELEMENT_CONTENT = 1018,
          XML_RNGP_ELEMENT_NAME = 1019,
          XML_RNGP_ELEMENT_NO_CONTENT = 1020,
          XML_RNGP_ELEM_TEXT_CONFLICT = 1021,
          XML_RNGP_EMPTY = 1022,
          XML_RNGP_EMPTY_CONSTRUCT = 1023,
          XML_RNGP_EMPTY_CONTENT = 1024,
          XML_RNGP_EMPTY_NOT_EMPTY = 1025,
          XML_RNGP_ERROR_TYPE_LIB = 1026,
          XML_RNGP_EXCEPT_EMPTY = 1027,
          XML_RNGP_EXCEPT_MISSING = 1028,
          XML_RNGP_EXCEPT_MULTIPLE = 1029,
          XML_RNGP_EXCEPT_NO_CONTENT = 1030,
          XML_RNGP_EXTERNALREF_EMTPY = 1031,
          XML_RNGP_EXTERNAL_REF_FAILURE = 1032,
          XML_RNGP_EXTERNALREF_RECURSE = 1033,
          XML_RNGP_FORBIDDEN_ATTRIBUTE = 1034,
          XML_RNGP_FOREIGN_ELEMENT = 1035,
          XML_RNGP_GRAMMAR_CONTENT = 1036,
          XML_RNGP_GRAMMAR_EMPTY = 1037,
          XML_RNGP_GRAMMAR_MISSING = 1038,
          XML_RNGP_GRAMMAR_NO_START = 1039,
          XML_RNGP_GROUP_ATTR_CONFLICT = 1040,
          XML_RNGP_HREF_ERROR = 1041,
          XML_RNGP_INCLUDE_EMPTY = 1042,
          XML_RNGP_INCLUDE_FAILURE = 1043,
          XML_RNGP_INCLUDE_RECURSE = 1044,
          XML_RNGP_INTERLEAVE_ADD = 1045,
          XML_RNGP_INTERLEAVE_CREATE_FAILED = 1046,
          XML_RNGP_INTERLEAVE_EMPTY = 1047,
          XML_RNGP_INTERLEAVE_NO_CONTENT = 1048,
          XML_RNGP_INVALID_DEFINE_NAME = 1049,
          XML_RNGP_INVALID_URI = 1050,
          XML_RNGP_INVALID_VALUE = 1051,
          XML_RNGP_MISSING_HREF = 1052,
          XML_RNGP_NAME_MISSING = 1053,
          XML_RNGP_NEED_COMBINE = 1054,
          XML_RNGP_NOTALLOWED_NOT_EMPTY = 1055,
          XML_RNGP_NSNAME_ATTR_ANCESTOR = 1056,
          XML_RNGP_NSNAME_NO_NS = 1057,
          XML_RNGP_PARAM_FORBIDDEN = 1058,
          XML_RNGP_PARAM_NAME_MISSING = 1059,
          XML_RNGP_PARENTREF_CREATE_FAILED = 1060,
          XML_RNGP_PARENTREF_NAME_INVALID = 1061,
          XML_RNGP_PARENTREF_NO_NAME = 1062,
          XML_RNGP_PARENTREF_NO_PARENT = 1063,
          XML_RNGP_PARENTREF_NOT_EMPTY = 1064,
          XML_RNGP_PARSE_ERROR = 1065,
          XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME = 1066,
          XML_RNGP_PAT_ATTR_ATTR = 1067,
          XML_RNGP_PAT_ATTR_ELEM = 1068,
          XML_RNGP_PAT_DATA_EXCEPT_ATTR = 1069,
          XML_RNGP_PAT_DATA_EXCEPT_ELEM = 1070,
          XML_RNGP_PAT_DATA_EXCEPT_EMPTY = 1071,
          XML_RNGP_PAT_DATA_EXCEPT_GROUP = 1072,
          XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE = 1073,
          XML_RNGP_PAT_DATA_EXCEPT_LIST = 1074,
          XML_RNGP_PAT_DATA_EXCEPT_ONEMORE = 1075,
          XML_RNGP_PAT_DATA_EXCEPT_REF = 1076,
          XML_RNGP_PAT_DATA_EXCEPT_TEXT = 1077,
          XML_RNGP_PAT_LIST_ATTR = 1078,
          XML_RNGP_PAT_LIST_ELEM = 1079,
          XML_RNGP_PAT_LIST_INTERLEAVE = 1080,
          XML_RNGP_PAT_LIST_LIST = 1081,
          XML_RNGP_PAT_LIST_REF = 1082,
          XML_RNGP_PAT_LIST_TEXT = 1083,
          XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME = 1084,
          XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME = 1085,
          XML_RNGP_PAT_ONEMORE_GROUP_ATTR = 1086,
          XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR = 1087,
          XML_RNGP_PAT_START_ATTR = 1088,
          XML_RNGP_PAT_START_DATA = 1089,
          XML_RNGP_PAT_START_EMPTY = 1090,
          XML_RNGP_PAT_START_GROUP = 1091,
          XML_RNGP_PAT_START_INTERLEAVE = 1092,
          XML_RNGP_PAT_START_LIST = 1093,
          XML_RNGP_PAT_START_ONEMORE = 1094,
          XML_RNGP_PAT_START_TEXT = 1095,
          XML_RNGP_PAT_START_VALUE = 1096,
          XML_RNGP_PREFIX_UNDEFINED = 1097,
          XML_RNGP_REF_CREATE_FAILED = 1098,
          XML_RNGP_REF_CYCLE = 1099,
          XML_RNGP_REF_NAME_INVALID = 1100,
          XML_RNGP_REF_NO_DEF = 1101,
          XML_RNGP_REF_NO_NAME = 1102,
          XML_RNGP_REF_NOT_EMPTY = 1103,
          XML_RNGP_START_CHOICE_AND_INTERLEAVE = 1104,
          XML_RNGP_START_CONTENT = 1105,
          XML_RNGP_START_EMPTY = 1106,
          XML_RNGP_START_MISSING = 1107,
          XML_RNGP_TEXT_EXPECTED = 1108,
          XML_RNGP_TEXT_HAS_CHILD = 1109,
          XML_RNGP_TYPE_MISSING = 1110,
          XML_RNGP_TYPE_NOT_FOUND = 1111,
          XML_RNGP_TYPE_VALUE = 1112,
          XML_RNGP_UNKNOWN_ATTRIBUTE = 1113,
          XML_RNGP_UNKNOWN_COMBINE = 1114,
          XML_RNGP_UNKNOWN_CONSTRUCT = 1115,
          XML_RNGP_UNKNOWN_TYPE_LIB = 1116,
          XML_RNGP_URI_FRAGMENT = 1117,
          XML_RNGP_URI_NOT_ABSOLUTE = 1118,
          XML_RNGP_VALUE_EMPTY = 1119,
          XML_RNGP_VALUE_NO_CONTENT = 1120,
          XML_RNGP_XMLNS_NAME = 1121,
          XML_RNGP_XML_NS = 1122,
          XML_XPATH_EXPRESSION_OK = 1200,
          XML_XPATH_NUMBER_ERROR = 1201,
          XML_XPATH_UNFINISHED_LITERAL_ERROR = 1202,
          XML_XPATH_START_LITERAL_ERROR = 1203,
          XML_XPATH_VARIABLE_REF_ERROR = 1204,
          XML_XPATH_UNDEF_VARIABLE_ERROR = 1205,
          XML_XPATH_INVALID_PREDICATE_ERROR = 1206,
          XML_XPATH_EXPR_ERROR = 1207,
          XML_XPATH_UNCLOSED_ERROR = 1208,
          XML_XPATH_UNKNOWN_FUNC_ERROR = 1209,
          XML_XPATH_INVALID_OPERAND = 1210,
          XML_XPATH_INVALID_TYPE = 1211,
          XML_XPATH_INVALID_ARITY = 1212,
          XML_XPATH_INVALID_CTXT_SIZE = 1213,
          XML_XPATH_INVALID_CTXT_POSITION = 1214,
          XML_XPATH_MEMORY_ERROR = 1215,
          XML_XPTR_SYNTAX_ERROR = 1216,
          XML_XPTR_RESOURCE_ERROR = 1217,
          XML_XPTR_SUB_RESOURCE_ERROR = 1218,
          XML_XPATH_UNDEF_PREFIX_ERROR = 1219,
          XML_XPATH_ENCODING_ERROR = 1220,
          XML_XPATH_INVALID_CHAR_ERROR = 1221,
          XML_TREE_INVALID_HEX = 1300,
          XML_TREE_INVALID_DEC = 1301,
          XML_TREE_UNTERMINATED_ENTITY = 1302,
          XML_SAVE_NOT_UTF8 = 1400,
          XML_SAVE_CHAR_INVALID = 1401,
          XML_SAVE_NO_DOCTYPE = 1402,
          XML_SAVE_UNKNOWN_ENCODING = 1403,
          XML_REGEXP_COMPILE_ERROR = 1450,
          XML_IO_UNKNOWN = 1500,
          XML_IO_EACCES = 1501,
          XML_IO_EAGAIN = 1502,
          XML_IO_EBADF = 1503,
          XML_IO_EBADMSG = 1504,
          XML_IO_EBUSY = 1505,
          XML_IO_ECANCELED = 1506,
          XML_IO_ECHILD = 1507,
          XML_IO_EDEADLK = 1508,
          XML_IO_EDOM = 1509,
          XML_IO_EEXIST = 1510,
          XML_IO_EFAULT = 1511,
          XML_IO_EFBIG = 1512,
          XML_IO_EINPROGRESS = 1513,
          XML_IO_EINTR = 1514,
          XML_IO_EINVAL = 1515,
          XML_IO_EIO = 1516,
          XML_IO_EISDIR = 1517,
          XML_IO_EMFILE = 1518,
          XML_IO_EMLINK = 1519,
          XML_IO_EMSGSIZE = 1520,
          XML_IO_ENAMETOOLONG = 1521,
          XML_IO_ENFILE = 1522,
          XML_IO_ENODEV = 1523,
          XML_IO_ENOENT = 1524,
          XML_IO_ENOEXEC = 1525,
          XML_IO_ENOLCK = 1526,
          XML_IO_ENOMEM = 1527,
          XML_IO_ENOSPC = 1528,
          XML_IO_ENOSYS = 1529,
          XML_IO_ENOTDIR = 1530,
          XML_IO_ENOTEMPTY = 1531,
          XML_IO_ENOTSUP = 1532,
          XML_IO_ENOTTY = 1533,
          XML_IO_ENXIO = 1534,
          XML_IO_EPERM = 1535,
          XML_IO_EPIPE = 1536,
          XML_IO_ERANGE = 1537,
          XML_IO_EROFS = 1538,
          XML_IO_ESPIPE = 1539,
          XML_IO_ESRCH = 1540,
          XML_IO_ETIMEDOUT = 1541,
          XML_IO_EXDEV = 1542,
          XML_IO_NETWORK_ATTEMPT = 1543,
          XML_IO_ENCODER = 1544,
          XML_IO_FLUSH = 1545,
          XML_IO_WRITE = 1546,
          XML_IO_NO_INPUT = 1547,
          XML_IO_BUFFER_FULL = 1548,
          XML_IO_LOAD_ERROR = 1549,
          XML_IO_ENOTSOCK = 1550,
          XML_IO_EISCONN = 1551,
          XML_IO_ECONNREFUSED = 1552,
          XML_IO_ENETUNREACH = 1553,
          XML_IO_EADDRINUSE = 1554,
          XML_IO_EALREADY = 1555,
          XML_IO_EAFNOSUPPORT = 1556,
          XML_XINCLUDE_RECURSION = 1600,
          XML_XINCLUDE_PARSE_VALUE = 1601,
          XML_XINCLUDE_ENTITY_DEF_MISMATCH = 1602,
          XML_XINCLUDE_NO_HREF = 1603,
          XML_XINCLUDE_NO_FALLBACK = 1604,
          XML_XINCLUDE_HREF_URI = 1605,
          XML_XINCLUDE_TEXT_FRAGMENT = 1606,
          XML_XINCLUDE_TEXT_DOCUMENT = 1607,
          XML_XINCLUDE_INVALID_CHAR = 1608,
          XML_XINCLUDE_BUILD_FAILED = 1609,
          XML_XINCLUDE_UNKNOWN_ENCODING = 1610,
          XML_XINCLUDE_MULTIPLE_ROOT = 1611,
          XML_XINCLUDE_XPTR_FAILED = 1612,
          XML_XINCLUDE_XPTR_RESULT = 1613,
          XML_XINCLUDE_INCLUDE_IN_INCLUDE = 1614,
          XML_XINCLUDE_FALLBACKS_IN_INCLUDE = 1615,
          XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE = 1616,
          XML_XINCLUDE_DEPRECATED_NS = 1617,
          XML_XINCLUDE_FRAGMENT_ID = 1618,
          XML_CATALOG_MISSING_ATTR = 1650,
          XML_CATALOG_ENTRY_BROKEN = 1651,
          XML_CATALOG_PREFER_VALUE = 1652,
          XML_CATALOG_NOT_CATALOG = 1653,
          XML_CATALOG_RECURSION = 1654,
          XML_SCHEMAP_PREFIX_UNDEFINED = 1700,
          XML_SCHEMAP_ATTRFORMDEFAULT_VALUE = 1701,
          XML_SCHEMAP_ATTRGRP_NONAME_NOREF = 1702,
          XML_SCHEMAP_ATTR_NONAME_NOREF = 1703,
          XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF = 1704,
          XML_SCHEMAP_ELEMFORMDEFAULT_VALUE = 1705,
          XML_SCHEMAP_ELEM_NONAME_NOREF = 1706,
          XML_SCHEMAP_EXTENSION_NO_BASE = 1707,
          XML_SCHEMAP_FACET_NO_VALUE = 1708,
          XML_SCHEMAP_FAILED_BUILD_IMPORT = 1709,
          XML_SCHEMAP_GROUP_NONAME_NOREF = 1710,
          XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI = 1711,
          XML_SCHEMAP_IMPORT_REDEFINE_NSNAME = 1712,
          XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI = 1713,
          XML_SCHEMAP_INVALID_BOOLEAN = 1714,
          XML_SCHEMAP_INVALID_ENUM = 1715,
          XML_SCHEMAP_INVALID_FACET = 1716,
          XML_SCHEMAP_INVALID_FACET_VALUE = 1717,
          XML_SCHEMAP_INVALID_MAXOCCURS = 1718,
          XML_SCHEMAP_INVALID_MINOCCURS = 1719,
          XML_SCHEMAP_INVALID_REF_AND_SUBTYPE = 1720,
          XML_SCHEMAP_INVALID_WHITE_SPACE = 1721,
          XML_SCHEMAP_NOATTR_NOREF = 1722,
          XML_SCHEMAP_NOTATION_NO_NAME = 1723,
          XML_SCHEMAP_NOTYPE_NOREF = 1724,
          XML_SCHEMAP_REF_AND_SUBTYPE = 1725,
          XML_SCHEMAP_RESTRICTION_NONAME_NOREF = 1726,
          XML_SCHEMAP_SIMPLETYPE_NONAME = 1727,
          XML_SCHEMAP_TYPE_AND_SUBTYPE = 1728,
          XML_SCHEMAP_UNKNOWN_ALL_CHILD = 1729,
          XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD = 1730,
          XML_SCHEMAP_UNKNOWN_ATTR_CHILD = 1731,
          XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD = 1732,
          XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP = 1733,
          XML_SCHEMAP_UNKNOWN_BASE_TYPE = 1734,
          XML_SCHEMAP_UNKNOWN_CHOICE_CHILD = 1735,
          XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD = 1736,
          XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD = 1737,
          XML_SCHEMAP_UNKNOWN_ELEM_CHILD = 1738,
          XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD = 1739,
          XML_SCHEMAP_UNKNOWN_FACET_CHILD = 1740,
          XML_SCHEMAP_UNKNOWN_FACET_TYPE = 1741,
          XML_SCHEMAP_UNKNOWN_GROUP_CHILD = 1742,
          XML_SCHEMAP_UNKNOWN_IMPORT_CHILD = 1743,
          XML_SCHEMAP_UNKNOWN_LIST_CHILD = 1744,
          XML_SCHEMAP_UNKNOWN_NOTATION_CHILD = 1745,
          XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD = 1746,
          XML_SCHEMAP_UNKNOWN_REF = 1747,
          XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD = 1748,
          XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD = 1749,
          XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD = 1750,
          XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD = 1751,
          XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD = 1752,
          XML_SCHEMAP_UNKNOWN_TYPE = 1753,
          XML_SCHEMAP_UNKNOWN_UNION_CHILD = 1754,
          XML_SCHEMAP_ELEM_DEFAULT_FIXED = 1755,
          XML_SCHEMAP_REGEXP_INVALID = 1756,
          XML_SCHEMAP_FAILED_LOAD = 1757,
          XML_SCHEMAP_NOTHING_TO_PARSE = 1758,
          XML_SCHEMAP_NOROOT = 1759,
          XML_SCHEMAP_REDEFINED_GROUP = 1760,
          XML_SCHEMAP_REDEFINED_TYPE = 1761,
          XML_SCHEMAP_REDEFINED_ELEMENT = 1762,
          XML_SCHEMAP_REDEFINED_ATTRGROUP = 1763,
          XML_SCHEMAP_REDEFINED_ATTR = 1764,
          XML_SCHEMAP_REDEFINED_NOTATION = 1765,
          XML_SCHEMAP_FAILED_PARSE = 1766,
          XML_SCHEMAP_UNKNOWN_PREFIX = 1767,
          XML_SCHEMAP_DEF_AND_PREFIX = 1768,
          XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD = 1769,
          XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI = 1770,
          XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI = 1771,
          XML_SCHEMAP_NOT_SCHEMA = 1772,
          XML_SCHEMAP_UNKNOWN_MEMBER_TYPE = 1773,
          XML_SCHEMAP_INVALID_ATTR_USE = 1774,
          XML_SCHEMAP_RECURSIVE = 1775,
          XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE = 1776,
          XML_SCHEMAP_INVALID_ATTR_COMBINATION = 1777,
          XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION = 1778,
          XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD = 1779,
          XML_SCHEMAP_INVALID_ATTR_NAME = 1780,
          XML_SCHEMAP_REF_AND_CONTENT = 1781,
          XML_SCHEMAP_CT_PROPS_CORRECT_1 = 1782,
          XML_SCHEMAP_CT_PROPS_CORRECT_2 = 1783,
          XML_SCHEMAP_CT_PROPS_CORRECT_3 = 1784,
          XML_SCHEMAP_CT_PROPS_CORRECT_4 = 1785,
          XML_SCHEMAP_CT_PROPS_CORRECT_5 = 1786,
          XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1 = 1787,
          XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1 = 1788,
          XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2 = 1789,
          XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2 = 1790,
          XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3 = 1791,
          XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER = 1792,
          XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE = 1793,
          XML_SCHEMAP_UNION_NOT_EXPRESSIBLE = 1794,
          XML_SCHEMAP_SRC_IMPORT_3_1 = 1795,
          XML_SCHEMAP_SRC_IMPORT_3_2 = 1796,
          XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1 = 1797,
          XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2 = 1798,
          XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3 = 1799,
          XML_SCHEMAP_COS_CT_EXTENDS_1_3 = 1800,
          XML_SCHEMAV_NOROOT = 1801,
          XML_SCHEMAV_UNDECLAREDELEM = 1802,
          XML_SCHEMAV_NOTTOPLEVEL = 1803,
          XML_SCHEMAV_MISSING = 1804,
          XML_SCHEMAV_WRONGELEM = 1805,
          XML_SCHEMAV_NOTYPE = 1806,
          XML_SCHEMAV_NOROLLBACK = 1807,
          XML_SCHEMAV_ISABSTRACT = 1808,
          XML_SCHEMAV_NOTEMPTY = 1809,
          XML_SCHEMAV_ELEMCONT = 1810,
          XML_SCHEMAV_HAVEDEFAULT = 1811,
          XML_SCHEMAV_NOTNILLABLE = 1812,
          XML_SCHEMAV_EXTRACONTENT = 1813,
          XML_SCHEMAV_INVALIDATTR = 1814,
          XML_SCHEMAV_INVALIDELEM = 1815,
          XML_SCHEMAV_NOTDETERMINIST = 1816,
          XML_SCHEMAV_CONSTRUCT = 1817,
          XML_SCHEMAV_INTERNAL = 1818,
          XML_SCHEMAV_NOTSIMPLE = 1819,
          XML_SCHEMAV_ATTRUNKNOWN = 1820,
          XML_SCHEMAV_ATTRINVALID = 1821,
          XML_SCHEMAV_VALUE = 1822,
          XML_SCHEMAV_FACET = 1823,
          XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1 = 1824,
          XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2 = 1825,
          XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3 = 1826,
          XML_SCHEMAV_CVC_TYPE_3_1_1 = 1827,
          XML_SCHEMAV_CVC_TYPE_3_1_2 = 1828,
          XML_SCHEMAV_CVC_FACET_VALID = 1829,
          XML_SCHEMAV_CVC_LENGTH_VALID = 1830,
          XML_SCHEMAV_CVC_MINLENGTH_VALID = 1831,
          XML_SCHEMAV_CVC_MAXLENGTH_VALID = 1832,
          XML_SCHEMAV_CVC_MININCLUSIVE_VALID = 1833,
          XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID = 1834,
          XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID = 1835,
          XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID = 1836,
          XML_SCHEMAV_CVC_TOTALDIGITS_VALID = 1837,
          XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID = 1838,
          XML_SCHEMAV_CVC_PATTERN_VALID = 1839,
          XML_SCHEMAV_CVC_ENUMERATION_VALID = 1840,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1 = 1841,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2 = 1842,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3 = 1843,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4 = 1844,
          XML_SCHEMAV_CVC_ELT_1 = 1845,
          XML_SCHEMAV_CVC_ELT_2 = 1846,
          XML_SCHEMAV_CVC_ELT_3_1 = 1847,
          XML_SCHEMAV_CVC_ELT_3_2_1 = 1848,
          XML_SCHEMAV_CVC_ELT_3_2_2 = 1849,
          XML_SCHEMAV_CVC_ELT_4_1 = 1850,
          XML_SCHEMAV_CVC_ELT_4_2 = 1851,
          XML_SCHEMAV_CVC_ELT_4_3 = 1852,
          XML_SCHEMAV_CVC_ELT_5_1_1 = 1853,
          XML_SCHEMAV_CVC_ELT_5_1_2 = 1854,
          XML_SCHEMAV_CVC_ELT_5_2_1 = 1855,
          XML_SCHEMAV_CVC_ELT_5_2_2_1 = 1856,
          XML_SCHEMAV_CVC_ELT_5_2_2_2_1 = 1857,
          XML_SCHEMAV_CVC_ELT_5_2_2_2_2 = 1858,
          XML_SCHEMAV_CVC_ELT_6 = 1859,
          XML_SCHEMAV_CVC_ELT_7 = 1860,
          XML_SCHEMAV_CVC_ATTRIBUTE_1 = 1861,
          XML_SCHEMAV_CVC_ATTRIBUTE_2 = 1862,
          XML_SCHEMAV_CVC_ATTRIBUTE_3 = 1863,
          XML_SCHEMAV_CVC_ATTRIBUTE_4 = 1864,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1 = 1865,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1 = 1866,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2 = 1867,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_4 = 1868,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1 = 1869,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2 = 1870,
          XML_SCHEMAV_ELEMENT_CONTENT = 1871,
          XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING = 1872,
          XML_SCHEMAV_CVC_COMPLEX_TYPE_1 = 1873,
          XML_SCHEMAV_CVC_AU = 1874,
          XML_SCHEMAV_CVC_TYPE_1 = 1875,
          XML_SCHEMAV_CVC_TYPE_2 = 1876,
          XML_SCHEMAV_CVC_IDC = 1877,
          XML_SCHEMAV_CVC_WILDCARD = 1878,
          XML_SCHEMAV_MISC = 1879,
          XML_XPTR_UNKNOWN_SCHEME = 1900,
          XML_XPTR_CHILDSEQ_START = 1901,
          XML_XPTR_EVAL_FAILED = 1902,
          XML_XPTR_EXTRA_OBJECTS = 1903,
          XML_C14N_CREATE_CTXT = 1950,
          XML_C14N_REQUIRES_UTF8 = 1951,
          XML_C14N_CREATE_STACK = 1952,
          XML_C14N_INVALID_NODE = 1953,
          XML_C14N_UNKNOW_NODE = 1954,
          XML_C14N_RELATIVE_NAMESPACE = 1955,
          XML_FTP_PASV_ANSWER = 2000,
          XML_FTP_EPSV_ANSWER = 2001,
          XML_FTP_ACCNT = 2002,
          XML_FTP_URL_SYNTAX = 2003,
          XML_HTTP_URL_SYNTAX = 2020,
          XML_HTTP_USE_IP = 2021,
          XML_HTTP_UNKNOWN_HOST = 2022,
          XML_SCHEMAP_SRC_SIMPLE_TYPE_1 = 3000,
          XML_SCHEMAP_SRC_SIMPLE_TYPE_2 = 3001,
          XML_SCHEMAP_SRC_SIMPLE_TYPE_3 = 3002,
          XML_SCHEMAP_SRC_SIMPLE_TYPE_4 = 3003,
          XML_SCHEMAP_SRC_RESOLVE = 3004,
          XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE = 3005,
          XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE = 3006,
          XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES = 3007,
          XML_SCHEMAP_ST_PROPS_CORRECT_1 = 3008,
          XML_SCHEMAP_ST_PROPS_CORRECT_2 = 3009,
          XML_SCHEMAP_ST_PROPS_CORRECT_3 = 3010,
          XML_SCHEMAP_COS_ST_RESTRICTS_1_1 = 3011,
          XML_SCHEMAP_COS_ST_RESTRICTS_1_2 = 3012,
          XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1 = 3013,
          XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2 = 3014,
          XML_SCHEMAP_COS_ST_RESTRICTS_2_1 = 3015,
          XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1 = 3016,
          XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2 = 3017,
          XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1 = 3018,
          XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2 = 3019,
          XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3 = 3020,
          XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4 = 3021,
          XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5 = 3022,
          XML_SCHEMAP_COS_ST_RESTRICTS_3_1 = 3023,
          XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1 = 3024,
          XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2 = 3025,
          XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2 = 3026,
          XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1 = 3027,
          XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3 = 3028,
          XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4 = 3029,
          XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5 = 3030,
          XML_SCHEMAP_COS_ST_DERIVED_OK_2_1 = 3031,
          XML_SCHEMAP_COS_ST_DERIVED_OK_2_2 = 3032,
          XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED = 3033,
          XML_SCHEMAP_S4S_ELEM_MISSING = 3034,
          XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED = 3035,
          XML_SCHEMAP_S4S_ATTR_MISSING = 3036,
          XML_SCHEMAP_S4S_ATTR_INVALID_VALUE = 3037,
          XML_SCHEMAP_SRC_ELEMENT_1 = 3038,
          XML_SCHEMAP_SRC_ELEMENT_2_1 = 3039,
          XML_SCHEMAP_SRC_ELEMENT_2_2 = 3040,
          XML_SCHEMAP_SRC_ELEMENT_3 = 3041,
          XML_SCHEMAP_P_PROPS_CORRECT_1 = 3042,
          XML_SCHEMAP_P_PROPS_CORRECT_2_1 = 3043,
          XML_SCHEMAP_P_PROPS_CORRECT_2_2 = 3044,
          XML_SCHEMAP_E_PROPS_CORRECT_2 = 3045,
          XML_SCHEMAP_E_PROPS_CORRECT_3 = 3046,
          XML_SCHEMAP_E_PROPS_CORRECT_4 = 3047,
          XML_SCHEMAP_E_PROPS_CORRECT_5 = 3048,
          XML_SCHEMAP_E_PROPS_CORRECT_6 = 3049,
          XML_SCHEMAP_SRC_INCLUDE = 3050,
          XML_SCHEMAP_SRC_ATTRIBUTE_1 = 3051,
          XML_SCHEMAP_SRC_ATTRIBUTE_2 = 3052,
          XML_SCHEMAP_SRC_ATTRIBUTE_3_1 = 3053,
          XML_SCHEMAP_SRC_ATTRIBUTE_3_2 = 3054,
          XML_SCHEMAP_SRC_ATTRIBUTE_4 = 3055,
          XML_SCHEMAP_NO_XMLNS = 3056,
          XML_SCHEMAP_NO_XSI = 3057,
          XML_SCHEMAP_COS_VALID_DEFAULT_1 = 3058,
          XML_SCHEMAP_COS_VALID_DEFAULT_2_1 = 3059,
          XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1 = 3060,
          XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2 = 3061,
          XML_SCHEMAP_CVC_SIMPLE_TYPE = 3062,
          XML_SCHEMAP_COS_CT_EXTENDS_1_1 = 3063,
          XML_SCHEMAP_SRC_IMPORT_1_1 = 3064,
          XML_SCHEMAP_SRC_IMPORT_1_2 = 3065,
          XML_SCHEMAP_SRC_IMPORT_2 = 3066,
          XML_SCHEMAP_SRC_IMPORT_2_1 = 3067,
          XML_SCHEMAP_SRC_IMPORT_2_2 = 3068,
          XML_SCHEMAP_INTERNAL = 3069,
          XML_SCHEMAP_NOT_DETERMINISTIC = 3070,
          XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1 = 3071,
          XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2 = 3072,
          XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3 = 3073,
          XML_SCHEMAP_MG_PROPS_CORRECT_1 = 3074,
          XML_SCHEMAP_MG_PROPS_CORRECT_2 = 3075,
          XML_SCHEMAP_SRC_CT_1 = 3076,
          XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3 = 3077,
          XML_SCHEMAP_AU_PROPS_CORRECT_2 = 3078,
          XML_SCHEMAP_A_PROPS_CORRECT_2 = 3079,
          XML_SCHEMAP_C_PROPS_CORRECT = 3080,
          XML_SCHEMAP_SRC_REDEFINE = 3081,
          XML_SCHEMAP_SRC_IMPORT = 3082,
          XML_SCHEMAP_WARN_SKIP_SCHEMA = 3083,
          XML_SCHEMAP_WARN_UNLOCATED_SCHEMA = 3084,
          XML_SCHEMAP_WARN_ATTR_REDECL_PROH = 3085,
          XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH = 3086,
          XML_SCHEMAP_AG_PROPS_CORRECT = 3087,
          XML_SCHEMAP_COS_CT_EXTENDS_1_2 = 3088,
          XML_SCHEMAP_AU_PROPS_CORRECT = 3089,
          XML_SCHEMAP_A_PROPS_CORRECT_3 = 3090,
          XML_SCHEMAP_COS_ALL_LIMITED = 3091,
          XML_MODULE_OPEN = 4900,
          XML_MODULE_CLOSE = 4901,
          XML_CHECK_FOUND_ELEMENT = 5000,
          XML_CHECK_FOUND_ATTRIBUTE = 5001,
          XML_CHECK_FOUND_TEXT = 5002,
          XML_CHECK_FOUND_CDATA = 5003,
          XML_CHECK_FOUND_ENTITYREF = 5004,
          XML_CHECK_FOUND_ENTITY = 5005,
          XML_CHECK_FOUND_PI = 5006,
          XML_CHECK_FOUND_COMMENT = 5007,
          XML_CHECK_FOUND_DOCTYPE = 5008,
          XML_CHECK_FOUND_FRAGMENT = 5009,
          XML_CHECK_FOUND_NOTATION = 5010,
          XML_CHECK_UNKNOWN_NODE = 5011,
          XML_CHECK_ENTITY_TYPE = 5012,
          XML_CHECK_NO_PARENT = 5013,
          XML_CHECK_NO_DOC = 5014,
          XML_CHECK_NO_NAME = 5015,
          XML_CHECK_NO_ELEM = 5016,
          XML_CHECK_WRONG_DOC = 5017,
          XML_CHECK_NO_PREV = 5018,
          XML_CHECK_WRONG_PREV = 5019,
          XML_CHECK_NO_NEXT = 5020,
          XML_CHECK_WRONG_NEXT = 5021,
          XML_CHECK_NOT_DTD = 5022,
          XML_CHECK_NOT_ATTR = 5023,
          XML_CHECK_NOT_ATTR_DECL = 5024,
          XML_CHECK_NOT_ELEM_DECL = 5025,
          XML_CHECK_NOT_ENTITY_DECL = 5026,
          XML_CHECK_NOT_NS_DECL = 5027,
          XML_CHECK_NO_HREF = 5028,
          XML_CHECK_WRONG_PARENT = 5029,
          XML_CHECK_NS_SCOPE = 5030,
          XML_CHECK_NS_ANCESTOR = 5031,
          XML_CHECK_NOT_UTF8 = 5032,
          XML_CHECK_NO_DICT = 5033,
          XML_CHECK_NOT_NCNAME = 5034,
          XML_CHECK_OUTSIDE_DICT = 5035,
          XML_CHECK_WRONG_NAME = 5036,
          XML_CHECK_NAME_NOT_NULL = 5037,
          XML_I18N_NO_NAME = 6000,
          XML_I18N_NO_HANDLER = 6001,
          XML_I18N_EXCESS_HANDLER = 6002,
          XML_I18N_CONV_FAILED = 6003,
          XML_I18N_NO_OUTPUT = 6004,
          XML_CHECK_ = 6005,
          XML_CHECK_X = 6006);

      xmlParserInputState = (
          XML_PARSER_EOF = -1,
          XML_PARSER_START = 0,
          XML_PARSER_MISC = 1,
          XML_PARSER_PI = 2,
          XML_PARSER_DTD = 3,
          XML_PARSER_PROLOG = 4,
          XML_PARSER_COMMENT = 5,
          XML_PARSER_START_TAG = 6,
          XML_PARSER_CONTENT = 7,
          XML_PARSER_CDATA_SECTION = 8,
          XML_PARSER_END_TAG = 9,
          XML_PARSER_ENTITY_DECL = 10,
          XML_PARSER_ENTITY_VALUE = 11,
          XML_PARSER_ATTRIBUTE_VALUE = 12,
          XML_PARSER_SYSTEM_LITERAL = 13,
          XML_PARSER_EPILOG = 14,
          XML_PARSER_IGNORE = 15,
          XML_PARSER_PUBLIC_LITERAL = 16);

      xmlParserMode = (
          XML_PARSE_UNKNOWN = 0,
          XML_PARSE_DOM = 1,
          XML_PARSE_SAX = 2,
          XML_PARSE_PUSH_DOM = 3,
          XML_PARSE_PUSH_SAX = 4,
          XML_PARSE_READER = 5);

      xmlParserOption = (
          XML_PARSE_RECOVER = 1,
          XML_PARSE_NOENT = 2,
          XML_PARSE_DTDLOAD = 4,
          XML_PARSE_DTDATTR = 8,
          XML_PARSE_DTDVALID = 16,
          XML_PARSE_NOERROR = 32,
          XML_PARSE_NOWARNING = 64,
          XML_PARSE_PEDANTIC = 128,
          XML_PARSE_NOBLANKS = 256,
          XML_PARSE_SAX1 = 512,
          XML_PARSE_XINCLUDE = 1024,
          XML_PARSE_NONET = 2048,
          XML_PARSE_NODICT = 4096,
          XML_PARSE_NSCLEAN = 8192,
          XML_PARSE_NOCDATA = 16384,
          XML_PARSE_NOXINCNODE = 32768,
          XML_PARSE_COMPACT = 65536);

      xmlParserProperties = (
          XML_PARSER_LOADDTD = 1,
          XML_PARSER_DEFAULTATTRS = 2,
          XML_PARSER_VALIDATE = 3,
          XML_PARSER_SUBST_ENTITIES = 4);

      xmlParserSeverities = (
          XML_PARSER_SEVERITY_VALIDITY_WARNING = 1,
          XML_PARSER_SEVERITY_VALIDITY_ERROR = 2,
          XML_PARSER_SEVERITY_WARNING = 3,
          XML_PARSER_SEVERITY_ERROR = 4);

      xmlPatternFlags = (
          XML_PATTERN_DEFAULT = 0,
          XML_PATTERN_XPATH = 1,
          XML_PATTERN_XSSEL = 2,
          XML_PATTERN_XSFIELD = 4);

      xmlReaderTypes = (
          XML_READER_TYPE_NONE = 0,
          XML_READER_TYPE_ELEMENT = 1,
          XML_READER_TYPE_ATTRIBUTE = 2,
          XML_READER_TYPE_TEXT = 3,
          XML_READER_TYPE_CDATA = 4,
          XML_READER_TYPE_ENTITY_REFERENCE = 5,
          XML_READER_TYPE_ENTITY = 6,
          XML_READER_TYPE_PROCESSING_INSTRUCTION = 7,
          XML_READER_TYPE_COMMENT = 8,
          XML_READER_TYPE_DOCUMENT = 9,
          XML_READER_TYPE_DOCUMENT_TYPE = 10,
          XML_READER_TYPE_DOCUMENT_FRAGMENT = 11,
          XML_READER_TYPE_NOTATION = 12,
          XML_READER_TYPE_WHITESPACE = 13,
          XML_READER_TYPE_SIGNIFICANT_WHITESPACE = 14,
          XML_READER_TYPE_END_ELEMENT = 15,
          XML_READER_TYPE_END_ENTITY = 16,
          XML_READER_TYPE_XML_DECLARATION = 17);

      xmlRelaxNGParserFlag = (
          XML_RELAXNGP_NONE = 0,
          XML_RELAXNGP_FREE_DOC = 1,
          XML_RELAXNGP_CRNG = 2);

      xmlRelaxNGValidErr = (
          XML_RELAXNG_OK = 0,
          XML_RELAXNG_ERR_MEMORY = 1,
          XML_RELAXNG_ERR_TYPE = 2,
          XML_RELAXNG_ERR_TYPEVAL = 3,
          XML_RELAXNG_ERR_DUPID = 4,
          XML_RELAXNG_ERR_TYPECMP = 5,
          XML_RELAXNG_ERR_NOSTATE = 6,
          XML_RELAXNG_ERR_NODEFINE = 7,
          XML_RELAXNG_ERR_LISTEXTRA = 8,
          XML_RELAXNG_ERR_LISTEMPTY = 9,
          XML_RELAXNG_ERR_INTERNODATA = 10,
          XML_RELAXNG_ERR_INTERSEQ = 11,
          XML_RELAXNG_ERR_INTEREXTRA = 12,
          XML_RELAXNG_ERR_ELEMNAME = 13,
          XML_RELAXNG_ERR_ATTRNAME = 14,
          XML_RELAXNG_ERR_ELEMNONS = 15,
          XML_RELAXNG_ERR_ATTRNONS = 16,
          XML_RELAXNG_ERR_ELEMWRONGNS = 17,
          XML_RELAXNG_ERR_ATTRWRONGNS = 18,
          XML_RELAXNG_ERR_ELEMEXTRANS = 19,
          XML_RELAXNG_ERR_ATTREXTRANS = 20,
          XML_RELAXNG_ERR_ELEMNOTEMPTY = 21,
          XML_RELAXNG_ERR_NOELEM = 22,
          XML_RELAXNG_ERR_NOTELEM = 23,
          XML_RELAXNG_ERR_ATTRVALID = 24,
          XML_RELAXNG_ERR_CONTENTVALID = 25,
          XML_RELAXNG_ERR_EXTRACONTENT = 26,
          XML_RELAXNG_ERR_INVALIDATTR = 27,
          XML_RELAXNG_ERR_DATAELEM = 28,
          XML_RELAXNG_ERR_VALELEM = 29,
          XML_RELAXNG_ERR_LISTELEM = 30,
          XML_RELAXNG_ERR_DATATYPE = 31,
          XML_RELAXNG_ERR_VALUE = 32,
          XML_RELAXNG_ERR_LIST = 33,
          XML_RELAXNG_ERR_NOGRAMMAR = 34,
          XML_RELAXNG_ERR_EXTRADATA = 35,
          XML_RELAXNG_ERR_LACKDATA = 36,
          XML_RELAXNG_ERR_INTERNAL = 37,
          XML_RELAXNG_ERR_ELEMWRONG = 38,
          XML_RELAXNG_ERR_TEXTWRONG = 39);

      xmlSaveOption = (
          XML_SAVE_FORMAT = 1,
          XML_SAVE_NO_DECL = 2,
          XML_SAVE_NO_EMPTY = 4,
          XML_SAVE_NO_XHTML = 8);

      xmlSchemaContentType = (
          XML_SCHEMA_CONTENT_UNKNOWN = 0,
          XML_SCHEMA_CONTENT_EMPTY = 1,
          XML_SCHEMA_CONTENT_ELEMENTS = 2,
          XML_SCHEMA_CONTENT_MIXED = 3,
          XML_SCHEMA_CONTENT_SIMPLE = 4,
          XML_SCHEMA_CONTENT_MIXED_OR_ELEMENTS = 5,
          XML_SCHEMA_CONTENT_BASIC = 6,
          XML_SCHEMA_CONTENT_ANY = 7);

      xmlSchemaTypeType = (
          XML_SCHEMA_TYPE_BASIC = 1,
          XML_SCHEMA_TYPE_ANY = 2,
          XML_SCHEMA_TYPE_FACET = 3,
          XML_SCHEMA_TYPE_SIMPLE = 4,
          XML_SCHEMA_TYPE_COMPLEX = 5,
          XML_SCHEMA_TYPE_SEQUENCE = 6,
          XML_SCHEMA_TYPE_CHOICE = 7,
          XML_SCHEMA_TYPE_ALL = 8,
          XML_SCHEMA_TYPE_SIMPLE_CONTENT = 9,
          XML_SCHEMA_TYPE_COMPLEX_CONTENT = 10,
          XML_SCHEMA_TYPE_UR = 11,
          XML_SCHEMA_TYPE_RESTRICTION = 12,
          XML_SCHEMA_TYPE_EXTENSION = 13,
          XML_SCHEMA_TYPE_ELEMENT = 14,
          XML_SCHEMA_TYPE_ATTRIBUTE = 15,
          XML_SCHEMA_TYPE_ATTRIBUTEGROUP = 16,
          XML_SCHEMA_TYPE_GROUP = 17,
          XML_SCHEMA_TYPE_NOTATION = 18,
          XML_SCHEMA_TYPE_LIST = 19,
          XML_SCHEMA_TYPE_UNION = 20,
          XML_SCHEMA_TYPE_ANY_ATTRIBUTE = 21,
          XML_SCHEMA_TYPE_IDC_UNIQUE = 22,
          XML_SCHEMA_TYPE_IDC_KEY = 23,
          XML_SCHEMA_TYPE_IDC_KEYREF = 24,
          XML_SCHEMA_TYPE_PARTICLE = 25,
          XML_SCHEMA_TYPE_ATTRIBUTE_USE = 26,
          XML_SCHEMA_FACET_MININCLUSIVE = 1000,
          XML_SCHEMA_FACET_MINEXCLUSIVE = 1001,
          XML_SCHEMA_FACET_MAXINCLUSIVE = 1002,
          XML_SCHEMA_FACET_MAXEXCLUSIVE = 1003,
          XML_SCHEMA_FACET_TOTALDIGITS = 1004,
          XML_SCHEMA_FACET_FRACTIONDIGITS = 1005,
          XML_SCHEMA_FACET_PATTERN = 1006,
          XML_SCHEMA_FACET_ENUMERATION = 1007,
          XML_SCHEMA_FACET_WHITESPACE = 1008,
          XML_SCHEMA_FACET_LENGTH = 1009,
          XML_SCHEMA_FACET_MAXLENGTH = 1010,
          XML_SCHEMA_FACET_MINLENGTH = 1011,
          XML_SCHEMA_EXTRA_QNAMEREF = 2000,
          XML_SCHEMA_EXTRA_ATTR_USE_PROHIB = 2001);

      xmlSchemaValType = (
          XML_SCHEMAS_UNKNOWN = 0,
          XML_SCHEMAS_STRING = 1,
          XML_SCHEMAS_NORMSTRING = 2,
          XML_SCHEMAS_DECIMAL = 3,
          XML_SCHEMAS_TIME = 4,
          XML_SCHEMAS_GDAY = 5,
          XML_SCHEMAS_GMONTH = 6,
          XML_SCHEMAS_GMONTHDAY = 7,
          XML_SCHEMAS_GYEAR = 8,
          XML_SCHEMAS_GYEARMONTH = 9,
          XML_SCHEMAS_DATE = 10,
          XML_SCHEMAS_DATETIME = 11,
          XML_SCHEMAS_DURATION = 12,
          XML_SCHEMAS_FLOAT = 13,
          XML_SCHEMAS_DOUBLE = 14,
          XML_SCHEMAS_BOOLEAN = 15,
          XML_SCHEMAS_TOKEN = 16,
          XML_SCHEMAS_LANGUAGE = 17,
          XML_SCHEMAS_NMTOKEN = 18,
          XML_SCHEMAS_NMTOKENS = 19,
          XML_SCHEMAS_NAME = 20,
          XML_SCHEMAS_QNAME = 21,
          XML_SCHEMAS_NCNAME = 22,
          XML_SCHEMAS_ID = 23,
          XML_SCHEMAS_IDREF = 24,
          XML_SCHEMAS_IDREFS = 25,
          XML_SCHEMAS_ENTITY = 26,
          XML_SCHEMAS_ENTITIES = 27,
          XML_SCHEMAS_NOTATION = 28,
          XML_SCHEMAS_ANYURI = 29,
          XML_SCHEMAS_INTEGER = 30,
          XML_SCHEMAS_NPINTEGER = 31,
          XML_SCHEMAS_NINTEGER = 32,
          XML_SCHEMAS_NNINTEGER = 33,
          XML_SCHEMAS_PINTEGER = 34,
          XML_SCHEMAS_INT = 35,
          XML_SCHEMAS_UINT = 36,
          XML_SCHEMAS_LONG = 37,
          XML_SCHEMAS_ULONG = 38,
          XML_SCHEMAS_SHORT = 39,
          XML_SCHEMAS_USHORT = 40,
          XML_SCHEMAS_BYTE = 41,
          XML_SCHEMAS_UBYTE = 42,
          XML_SCHEMAS_HEXBINARY = 43,
          XML_SCHEMAS_BASE64BINARY = 44,
          XML_SCHEMAS_ANYTYPE = 45,
          XML_SCHEMAS_ANYSIMPLETYPE = 46);

      xmlSchemaValidError = (
          XML_SCHEMAS_ERR_OK = 0,
          XML_SCHEMAS_ERR_NOROOT = 1,
          XML_SCHEMAS_ERR_UNDECLAREDELEM = 2,
          XML_SCHEMAS_ERR_NOTTOPLEVEL = 3,
          XML_SCHEMAS_ERR_MISSING = 4,
          XML_SCHEMAS_ERR_WRONGELEM = 5,
          XML_SCHEMAS_ERR_NOTYPE = 6,
          XML_SCHEMAS_ERR_NOROLLBACK = 7,
          XML_SCHEMAS_ERR_ISABSTRACT = 8,
          XML_SCHEMAS_ERR_NOTEMPTY = 9,
          XML_SCHEMAS_ERR_ELEMCONT = 10,
          XML_SCHEMAS_ERR_HAVEDEFAULT = 11,
          XML_SCHEMAS_ERR_NOTNILLABLE = 12,
          XML_SCHEMAS_ERR_EXTRACONTENT = 13,
          XML_SCHEMAS_ERR_INVALIDATTR = 14,
          XML_SCHEMAS_ERR_INVALIDELEM = 15,
          XML_SCHEMAS_ERR_NOTDETERMINIST = 16,
          XML_SCHEMAS_ERR_CONSTRUCT = 17,
          XML_SCHEMAS_ERR_INTERNAL = 18,
          XML_SCHEMAS_ERR_NOTSIMPLE = 19,
          XML_SCHEMAS_ERR_ATTRUNKNOWN = 20,
          XML_SCHEMAS_ERR_ATTRINVALID = 21,
          XML_SCHEMAS_ERR_VALUE = 22,
          XML_SCHEMAS_ERR_FACET = 23,
          XML_SCHEMAS_ERR_ = 24,
          XML_SCHEMAS_ERR_XXX = 25);

      xmlSchemaValidOption = (
          XML_SCHEMA_VAL_VC_I_CREATE = 1);

      xmlSchemaWhitespaceValueType = (
          XML_SCHEMA_WHITESPACE_UNKNOWN = 0,
          XML_SCHEMA_WHITESPACE_PRESERVE = 1,
          XML_SCHEMA_WHITESPACE_REPLACE = 2,
          XML_SCHEMA_WHITESPACE_COLLAPSE = 3);

      xmlSchematronValidOptions = (
          XML_SCHEMATRON_OUT_QUIET = 1,
          XML_SCHEMATRON_OUT_TEXT = 2,
          XML_SCHEMATRON_OUT_XML = 4,
          XML_SCHEMATRON_OUT_FILE = 256,
          XML_SCHEMATRON_OUT_BUFFER = 512,
          XML_SCHEMATRON_OUT_IO = 1024);

      xmlTextReaderMode = (
          XML_TEXTREADER_MODE_INITIAL = 0,
          XML_TEXTREADER_MODE_INTERACTIVE = 1,
          XML_TEXTREADER_MODE_ERROR = 2,
          XML_TEXTREADER_MODE_EOF = 3,
          XML_TEXTREADER_MODE_CLOSED = 4,
          XML_TEXTREADER_MODE_READING = 5);

      xmlXPathErrorEnum = (
          XPATH_EXPRESSION_OK = 0,
          XPATH_NUMBER_ERROR = 1,
          XPATH_UNFINISHED_LITERAL_ERROR = 2,
          XPATH_START_LITERAL_ERROR = 3,
          XPATH_VARIABLE_REF_ERROR = 4,
          XPATH_UNDEF_VARIABLE_ERROR = 5,
          XPATH_INVALID_PREDICATE_ERROR = 6,
          XPATH_EXPR_ERROR = 7,
          XPATH_UNCLOSED_ERROR = 8,
          XPATH_UNKNOWN_FUNC_ERROR = 9,
          XPATH_INVALID_OPERAND = 10,
          XPATH_INVALID_TYPE = 11,
          XPATH_INVALID_ARITY = 12,
          XPATH_INVALID_CTXT_SIZE = 13,
          XPATH_INVALID_CTXT_POSITION = 14,
          XPATH_MEMORY_ERROR = 15,
          XPTR_SYNTAX_ERROR = 16,
          XPTR_RESOURCE_ERROR = 17,
          XPTR_SUB_RESOURCE_ERROR = 18,
          XPATH_UNDEF_PREFIX_ERROR = 19,
          XPATH_ENCODING_ERROR = 20,
          XPATH_INVALID_CHAR_ERROR = 21,
          XPATH_INVALID_CTXT = 22);

      xmlXPathObjectType = (
          XPATH_UNDEFINED = 0,
          XPATH_NODESET = 1,
          XPATH_BOOLEAN = 2,
          XPATH_NUMBER = 3,
          XPATH_STRING = 4,
          XPATH_POINT = 5,
          XPATH_RANGE = 6,
          XPATH_LOCATIONSET = 7,
          XPATH_USERS = 8,
          XPATH_XSLT_TREE = 9);

       htmlElemDescPtr = ^htmlElemDesc;
       htmlEntityDescPtr = ^htmlEntityDesc;
       xlinkHRef = ^xmlChar;
       xlinkHandlerPtr = ^xlinkHandler;
       xlinkRole = ^xmlChar;
       xlinkTitle = ^xmlChar;
       xmlAttrPtr = ^xmlAttr;
       xmlAttributePtr = ^xmlAttribute;
       xmlAttributeTablePtr = ^xmlAttributeTable;
       xmlAutomataPtr = ^xmlAutomata;
       xmlAutomataStatePtr = ^xmlAutomataState;
       xmlBufferPtr = ^xmlBuffer;
       xmlCatalogPtr = ^xmlCatalog;
       xmlChLRangePtr = ^xmlChLRange;
       xmlChRangeGroupPtr = ^xmlChRangeGroup;
       xmlChSRangePtr = ^xmlChSRange;
       xmlCharEncodingHandlerPtr = ^xmlCharEncodingHandler;
       xmlDOMWrapCtxtPtr = ^xmlDOMWrapCtxt;
       xmlDictPtr = ^xmlDict;
       xmlDocPtr = ^xmlDoc;
       xmlDtdPtr = ^xmlDtd;
       xmlElementContentPtr = ^xmlElementContent;
       xmlElementPtr = ^xmlElement;
       xmlElementTablePtr = ^xmlElementTable;
       xmlEntitiesTablePtr = ^xmlEntitiesTable;
       xmlEntityPtr = ^xmlEntity;
       xmlEnumerationPtr = ^xmlEnumeration;
       xmlErrorPtr = ^xmlError;
       xmlExpCtxtPtr = ^xmlExpCtxt;
       xmlExpNodePtr = ^xmlExpNode;
       xmlGlobalStatePtr = ^xmlGlobalState;
       xmlHashTablePtr = ^xmlHashTable;
       xmlIDPtr = ^xmlID;
       xmlIDTablePtr = ^xmlIDTable;
       xmlLinkPtr = ^xmlLink;
       xmlListPtr = ^xmlList;
       xmlLocationSetPtr = ^xmlLocationSet;
       xmlModulePtr = ^xmlModule;
       xmlMutexPtr = ^xmlMutex;
       xmlNodePtr = ^xmlNode;
       xmlNodeSetPtr = ^xmlNodeSet;
       xmlNotationPtr = ^xmlNotation;
       xmlNotationTablePtr = ^xmlNotationTable;
       xmlNsPtr = ^xmlNs;
       xmlOutputBufferPtr = ^xmlOutputBuffer;
       xmlParserCtxtPtr = ^xmlParserCtxt;
       xmlParserInputBufferPtr = ^xmlParserInputBuffer;
       xmlParserInputPtr = ^xmlParserInput;
       xmlParserNodeInfoPtr = ^xmlParserNodeInfo;
       xmlParserNodeInfoSeqPtr = ^xmlParserNodeInfoSeq;
       xmlPatternPtr = ^xmlPattern;
       xmlRMutexPtr = ^xmlRMutex;
       xmlRefPtr = ^xmlRef;
       xmlRefTablePtr = ^xmlRefTable;
       xmlRegExecCtxtPtr = ^xmlRegExecCtxt;
       xmlRegexpPtr = ^xmlRegexp;
       xmlRelaxNGParserCtxtPtr = ^xmlRelaxNGParserCtxt;
       xmlRelaxNGPtr = ^xmlRelaxNG;
       xmlRelaxNGValidCtxtPtr = ^xmlRelaxNGValidCtxt;
       xmlSAXHandlerPtr = ^xmlSAXHandler;
       xmlSAXHandlerV1Ptr = ^xmlSAXHandlerV1;
       xmlSAXLocatorPtr = ^xmlSAXLocator;
       xmlSaveCtxtPtr = ^xmlSaveCtxt;
       xmlSchemaAnnotPtr = ^xmlSchemaAnnot;
       xmlSchemaAttributeGroupPtr = ^xmlSchemaAttributeGroup;
       xmlSchemaAttributeLinkPtr = ^xmlSchemaAttributeLink;
       xmlSchemaAttributePtr = ^xmlSchemaAttribute;
       xmlSchemaElementPtr = ^xmlSchemaElement;
       xmlSchemaFacetLinkPtr = ^xmlSchemaFacetLink;
       xmlSchemaFacetPtr = ^xmlSchemaFacet;
       xmlSchemaNotationPtr = ^xmlSchemaNotation;
       xmlSchemaParserCtxtPtr = ^xmlSchemaParserCtxt;
       xmlSchemaPtr = ^xmlSchema;
       xmlSchemaSAXPlugPtr = ^xmlSchemaSAXPlugStruct;
       xmlSchemaTypeLinkPtr = ^xmlSchemaTypeLink;
       xmlSchemaTypePtr = ^xmlSchemaType;
       xmlSchemaValPtr = ^xmlSchemaVal;
       xmlSchemaValidCtxtPtr = ^xmlSchemaValidCtxt;
       xmlSchemaWildcardNsPtr = ^xmlSchemaWildcardNs;
       xmlSchemaWildcardPtr = ^xmlSchemaWildcard;
       xmlSchematronParserCtxtPtr = ^xmlSchematronParserCtxt;
       xmlSchematronPtr = ^xmlSchematron;
       xmlSchematronValidCtxtPtr = ^xmlSchematronValidCtxt;
       xmlShellCtxtPtr = ^xmlShellCtxt;
       xmlStreamCtxtPtr = ^xmlStreamCtxt;
       xmlTextReaderLocatorPtr = Pointer;
       xmlTextReaderPtr = ^xmlTextReader;
       xmlTextWriterPtr = ^xmlTextWriter;
       xmlURIPtr = ^xmlURI;
       xmlValidCtxtPtr = ^xmlValidCtxt;
       xmlValidStatePtr = ^xmlValidState;
       xmlXIncludeCtxtPtr = ^xmlXIncludeCtxt;
       xmlXPathAxisPtr = ^xmlXPathAxis;
       xmlXPathCompExprPtr = ^xmlXPathCompExpr;
       xmlXPathContextPtr = ^xmlXPathContext;
       xmlXPathFuncPtr = ^xmlXPathFunct;
       xmlXPathObjectPtr = ^xmlXPathObject;
       xmlXPathParserContextPtr = ^xmlXPathParserContext;
       xmlXPathTypePtr = ^xmlXPathType;
       xmlXPathVariablePtr = ^xmlXPathVariable;
      attributeDeclSAXFunc = procedure  (ctx: Pointer; const elem: xmlCharPtr; const fullname: xmlCharPtr; type_: Longint; def: Longint; const defaultValue: xmlCharPtr; tree: xmlEnumerationPtr); cdecl;
        attributeDeclSAXFuncPtr = ^attributeDeclSAXFunc;

      attributeSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr; const value: xmlCharPtr); cdecl;
        attributeSAXFuncPtr = ^attributeSAXFunc;

      cdataBlockSAXFunc = procedure  (ctx: Pointer; const value: xmlCharPtr; len: Longint); cdecl;
        cdataBlockSAXFuncPtr = ^cdataBlockSAXFunc;

      charactersSAXFunc = procedure  (ctx: Pointer; const ch: xmlCharPtr; len: Longint); cdecl;
        charactersSAXFuncPtr = ^charactersSAXFunc;

      commentSAXFunc = procedure  (ctx: Pointer; const value: xmlCharPtr); cdecl;
        commentSAXFuncPtr = ^commentSAXFunc;

      elementDeclSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr; type_: Longint; content: xmlElementContentPtr); cdecl;
        elementDeclSAXFuncPtr = ^elementDeclSAXFunc;

      endDocumentSAXFunc = procedure  (ctx: Pointer); cdecl;
        endDocumentSAXFuncPtr = ^endDocumentSAXFunc;

      endElementNsSAX2Func = procedure  (ctx: Pointer; const localname: xmlCharPtr; const prefix: xmlCharPtr; const URI: xmlCharPtr); cdecl;
        endElementNsSAX2FuncPtr = ^endElementNsSAX2Func;

      endElementSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr); cdecl;
        endElementSAXFuncPtr = ^endElementSAXFunc;

      entityDeclSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr; type_: Longint; const publicId: xmlCharPtr; const systemId: xmlCharPtr; content: xmlCharPtr); cdecl;
        entityDeclSAXFuncPtr = ^entityDeclSAXFunc;

      errorSAXFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        errorSAXFuncPtr = ^errorSAXFunc;

      externalSubsetSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr); cdecl;
        externalSubsetSAXFuncPtr = ^externalSubsetSAXFunc;

      fatalErrorSAXFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        fatalErrorSAXFuncPtr = ^fatalErrorSAXFunc;

      ftpDataCallback = procedure  (userData: Pointer; const data: PAnsiChar; len: Longint); cdecl;
        ftpDataCallbackPtr = ^ftpDataCallback;

      ftpListCallback = procedure  (userData: Pointer; const filename: PAnsiChar; const attrib: PAnsiChar; const owner: PAnsiChar; const group: PAnsiChar; size: Cardinal; links: Longint; year: Longint; const month: PAnsiChar; day: Longint; hour: Longint; minute: Longint); cdecl;
        ftpListCallbackPtr = ^ftpListCallback;

      getEntitySAXFunc = function  (ctx: Pointer; const name: xmlCharPtr) : xmlEntityPtr; cdecl;
        getEntitySAXFuncPtr = ^getEntitySAXFunc;

      getParameterEntitySAXFunc = function  (ctx: Pointer; const name: xmlCharPtr) : xmlEntityPtr; cdecl;
        getParameterEntitySAXFuncPtr = ^getParameterEntitySAXFunc;

      hasExternalSubsetSAXFunc = function  (ctx: Pointer) : Longint; cdecl;
        hasExternalSubsetSAXFuncPtr = ^hasExternalSubsetSAXFunc;

      hasInternalSubsetSAXFunc = function  (ctx: Pointer) : Longint; cdecl;
        hasInternalSubsetSAXFuncPtr = ^hasInternalSubsetSAXFunc;

      ignorableWhitespaceSAXFunc = procedure  (ctx: Pointer; const ch: xmlCharPtr; len: Longint); cdecl;
        ignorableWhitespaceSAXFuncPtr = ^ignorableWhitespaceSAXFunc;

      internalSubsetSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr); cdecl;
        internalSubsetSAXFuncPtr = ^internalSubsetSAXFunc;

      isStandaloneSAXFunc = function  (ctx: Pointer) : Longint; cdecl;
        isStandaloneSAXFuncPtr = ^isStandaloneSAXFunc;

      notationDeclSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr; const publicId: xmlCharPtr; const systemId: xmlCharPtr); cdecl;
        notationDeclSAXFuncPtr = ^notationDeclSAXFunc;

      processingInstructionSAXFunc = procedure  (ctx: Pointer; const target: xmlCharPtr; const data: xmlCharPtr); cdecl;
        processingInstructionSAXFuncPtr = ^processingInstructionSAXFunc;

      referenceSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr); cdecl;
        referenceSAXFuncPtr = ^referenceSAXFunc;

      resolveEntitySAXFunc = function  (ctx: Pointer; const publicId: xmlCharPtr; const systemId: xmlCharPtr) : xmlParserInputPtr; cdecl;
        resolveEntitySAXFuncPtr = ^resolveEntitySAXFunc;

      setDocumentLocatorSAXFunc = procedure  (ctx: Pointer; loc: xmlSAXLocatorPtr); cdecl;
        setDocumentLocatorSAXFuncPtr = ^setDocumentLocatorSAXFunc;

      startDocumentSAXFunc = procedure  (ctx: Pointer); cdecl;
        startDocumentSAXFuncPtr = ^startDocumentSAXFunc;

      startElementNsSAX2Func = procedure  (ctx: Pointer; const localname: xmlCharPtr; const prefix: xmlCharPtr; const URI: xmlCharPtr; nb_namespaces: Longint; const namespaces: xmlCharPtrPtr; nb_attributes: Longint; nb_defaulted: Longint; const attributes: xmlCharPtrPtr); cdecl;
        startElementNsSAX2FuncPtr = ^startElementNsSAX2Func;

      startElementSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr; const atts: xmlCharPtrPtr); cdecl;
        startElementSAXFuncPtr = ^startElementSAXFunc;

      unparsedEntityDeclSAXFunc = procedure  (ctx: Pointer; const name: xmlCharPtr; const publicId: xmlCharPtr; const systemId: xmlCharPtr; const notationName: xmlCharPtr); cdecl;
        unparsedEntityDeclSAXFuncPtr = ^unparsedEntityDeclSAXFunc;

      warningSAXFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        warningSAXFuncPtr = ^warningSAXFunc;

      xlinkExtendedLinkFunk = procedure  (ctx: Pointer; node: xmlNodePtr; nbLocators: Longint; const hrefs: xlinkHRefPtr; const roles: xlinkRolePtr; nbArcs: Longint; const from: xlinkRolePtr; const to_: xlinkRolePtr; show: xlinkShowPtr; actuate: xlinkActuatePtr; nbTitles: Longint; const titles: xlinkTitlePtr; const langs: xmlCharPtrPtr); cdecl;
        xlinkExtendedLinkFunkPtr = ^xlinkExtendedLinkFunk;

      xlinkExtendedLinkSetFunk = procedure  (ctx: Pointer; node: xmlNodePtr; nbLocators: Longint; const hrefs: xlinkHRefPtr; const roles: xlinkRolePtr; nbTitles: Longint; const titles: xlinkTitlePtr; const langs: xmlCharPtrPtr); cdecl;
        xlinkExtendedLinkSetFunkPtr = ^xlinkExtendedLinkSetFunk;

      xlinkNodeDetectFunc = procedure  (ctx: Pointer; node: xmlNodePtr); cdecl;
        xlinkNodeDetectFuncPtr = ^xlinkNodeDetectFunc;

      xlinkSimpleLinkFunk = procedure  (ctx: Pointer; node: xmlNodePtr; const href: xlinkHRef; const role: xlinkRole; const title: xlinkTitle); cdecl;
        xlinkSimpleLinkFunkPtr = ^xlinkSimpleLinkFunk;

      xmlC14NIsVisibleCallback = function  (user_data: Pointer; node: xmlNodePtr; parent: xmlNodePtr) : Longint; cdecl;
        xmlC14NIsVisibleCallbackPtr = ^xmlC14NIsVisibleCallback;

      xmlCharEncodingInputFunc = function  (out_: PByte; outlen: PInteger; const in_: PByte; inlen: PInteger) : Longint; cdecl;
        xmlCharEncodingInputFuncPtr = ^xmlCharEncodingInputFunc;

      xmlCharEncodingOutputFunc = function  (out_: PByte; outlen: PInteger; const in_: PByte; inlen: PInteger) : Longint; cdecl;
        xmlCharEncodingOutputFuncPtr = ^xmlCharEncodingOutputFunc;

      xmlDeregisterNodeFunc = procedure  (node: xmlNodePtr); cdecl;
        xmlDeregisterNodeFuncPtr = ^xmlDeregisterNodeFunc;

      xmlEntityReferenceFunc = procedure  (ent: xmlEntityPtr; firstNode: xmlNodePtr; lastNode: xmlNodePtr); cdecl;
        xmlEntityReferenceFuncPtr = ^xmlEntityReferenceFunc;

      xmlExternalEntityLoader = function  (const URL: PAnsiChar; const ID: PAnsiChar; context: xmlParserCtxtPtr) : xmlParserInputPtr; cdecl;
        xmlExternalEntityLoaderPtr = ^xmlExternalEntityLoader;

      xmlFreeFunc = procedure  (mem: Pointer); cdecl;
        xmlFreeFuncPtr = ^xmlFreeFunc;

      xmlGenericErrorFunc = procedure  (ctx: Pointer; const msg: PAnsiChar; const func, fname: PAnsiChar; line: Integer; const obj, sub: PAnsiChar; error_n: Integer; const error_s1, error_s2: PAnsiChar); cdecl varargs;
        xmlGenericErrorFuncPtr = ^xmlGenericErrorFunc;

      xmlHashCopier = function  (payload: Pointer; name: xmlCharPtr) : Pointer; cdecl;
        xmlHashCopierPtr = ^xmlHashCopier;

      xmlHashDeallocator = procedure  (payload: Pointer; name: xmlCharPtr); cdecl;
        xmlHashDeallocatorPtr = ^xmlHashDeallocator;

      xmlHashScanner = procedure  (payload: Pointer; data: Pointer; name: xmlCharPtr); cdecl;
        xmlHashScannerPtr = ^xmlHashScanner;

      xmlHashScannerFull = procedure  (payload: Pointer; data: Pointer; const name: xmlCharPtr; const name2: xmlCharPtr; const name3: xmlCharPtr); cdecl;
        xmlHashScannerFullPtr = ^xmlHashScannerFull;

      xmlInputCloseCallback = function  (context: Pointer) : Longint; cdecl;
        xmlInputCloseCallbackPtr = ^xmlInputCloseCallback;

      xmlInputMatchCallback = function  (filename: PAnsiChar) : Longint; cdecl;
        xmlInputMatchCallbackPtr = ^xmlInputMatchCallback;

      xmlInputOpenCallback = function  (filename: PAnsiChar) : Pointer; cdecl;
        xmlInputOpenCallbackPtr = ^xmlInputOpenCallback;

      xmlInputReadCallback = function  (context: Pointer; buffer: PAnsiChar; len: Longint) : Longint; cdecl;
        xmlInputReadCallbackPtr = ^xmlInputReadCallback;

      xmlListDataCompare = function  (const data0: Pointer; const data1: Pointer) : Longint; cdecl;
        xmlListDataComparePtr = ^xmlListDataCompare;

      xmlListDeallocator = procedure  (lk: xmlLinkPtr); cdecl;
        xmlListDeallocatorPtr = ^xmlListDeallocator;

      xmlListWalker = function  (const data: Pointer; const user: Pointer) : Longint; cdecl;
        xmlListWalkerPtr = ^xmlListWalker;

      xmlMallocFunc = function  (size: size_t) : Pointer; cdecl;
        xmlMallocFuncPtr = ^xmlMallocFunc;

      xmlOutputBufferCreateFilenameFunc = function  (const URI: PAnsiChar; encoder: xmlCharEncodingHandlerPtr; compression: Longint) : xmlOutputBufferPtr; cdecl;
        xmlOutputBufferCreateFilenameFuncPtr = ^xmlOutputBufferCreateFilenameFunc;

      xmlOutputCloseCallback = function  (context: Pointer) : Longint; cdecl;
        xmlOutputCloseCallbackPtr = ^xmlOutputCloseCallback;

      xmlOutputMatchCallback = function  (filename: PAnsiChar) : Longint; cdecl;
        xmlOutputMatchCallbackPtr = ^xmlOutputMatchCallback;

      xmlOutputOpenCallback = function  (filename: PAnsiChar) : Pointer; cdecl;
        xmlOutputOpenCallbackPtr = ^xmlOutputOpenCallback;

      xmlOutputWriteCallback = function  (context: Pointer; const buffer: PAnsiChar; len: Longint) : Longint; cdecl;
        xmlOutputWriteCallbackPtr = ^xmlOutputWriteCallback;

      xmlParserInputBufferCreateFilenameFunc = function  (const URI: PAnsiChar; enc: xmlCharEncoding) : xmlParserInputBufferPtr; cdecl;
        xmlParserInputBufferCreateFilenameFuncPtr = ^xmlParserInputBufferCreateFilenameFunc;

      xmlParserInputDeallocate = procedure  (str: xmlCharPtr); cdecl;
        xmlParserInputDeallocatePtr = ^xmlParserInputDeallocate;

      xmlReallocFunc = function  (mem: Pointer; size: size_t) : Pointer; cdecl;
        xmlReallocFuncPtr = ^xmlReallocFunc;

      xmlRegExecCallbacks = procedure  (exec: xmlRegExecCtxtPtr; const token: xmlCharPtr; transdata: Pointer; inputdata: Pointer); cdecl;
        xmlRegExecCallbacksPtr = ^xmlRegExecCallbacks;

      xmlRegisterNodeFunc = procedure  (node: xmlNodePtr); cdecl;
        xmlRegisterNodeFuncPtr = ^xmlRegisterNodeFunc;

      xmlRelaxNGValidityErrorFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        xmlRelaxNGValidityErrorFuncPtr = ^xmlRelaxNGValidityErrorFunc;

      xmlRelaxNGValidityWarningFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        xmlRelaxNGValidityWarningFuncPtr = ^xmlRelaxNGValidityWarningFunc;

      xmlSchemaValidityErrorFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        xmlSchemaValidityErrorFuncPtr = ^xmlSchemaValidityErrorFunc;

      xmlSchemaValidityWarningFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        xmlSchemaValidityWarningFuncPtr = ^xmlSchemaValidityWarningFunc;

      xmlSchematronValidityErrorFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        xmlSchematronValidityErrorFuncPtr = ^xmlSchematronValidityErrorFunc;

      xmlSchematronValidityWarningFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        xmlSchematronValidityWarningFuncPtr = ^xmlSchematronValidityWarningFunc;

      xmlShellCmd = function  (ctxt: xmlShellCtxtPtr; arg: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl;
        xmlShellCmdPtr = ^xmlShellCmd;

      xmlShellReadlineFunc = function  (prompt: PAnsiChar) : PAnsiChar; cdecl;
        xmlShellReadlineFuncPtr = ^xmlShellReadlineFunc;

      xmlStrdupFunc = function  (const str: PAnsiChar) : PAnsiChar; cdecl;
        xmlStrdupFuncPtr = ^xmlStrdupFunc;

      xmlStructuredErrorFunc = procedure  (userData: Pointer; error: xmlErrorPtr); cdecl;
        xmlStructuredErrorFuncPtr = ^xmlStructuredErrorFunc;

      xmlTextReaderErrorFunc = procedure  (arg: Pointer; const msg: PAnsiChar; severity: xmlParserSeverities; locator: xmlTextReaderLocatorPtr); cdecl;
        xmlTextReaderErrorFuncPtr = ^xmlTextReaderErrorFunc;

      xmlValidityErrorFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        xmlValidityErrorFuncPtr = ^xmlValidityErrorFunc;

      xmlValidityWarningFunc = procedure  (ctx: Pointer; const msg: PAnsiChar); cdecl varargs;
        xmlValidityWarningFuncPtr = ^xmlValidityWarningFunc;

      xmlXPathAxisFunc = function  (ctxt: xmlXPathParserContextPtr; cur: xmlXPathObjectPtr) : xmlXPathObjectPtr; cdecl;
        xmlXPathAxisFuncPtr = ^xmlXPathAxisFunc;

      xmlXPathConvertFunc = function  (obj: xmlXPathObjectPtr; type_: Longint) : Longint; cdecl;
        xmlXPathConvertFuncPtr = ^xmlXPathConvertFunc;

      xmlXPathEvalFunc = procedure  (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl;
        xmlXPathEvalFuncPtr = ^xmlXPathEvalFunc;

      xmlXPathFunction = procedure  (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl;
        xmlXPathFunctionPtr = ^xmlXPathFunction;

      xmlXPathFuncLookupFunc = function  (ctxt: Pointer; const name: xmlCharPtr; const ns_uri: xmlCharPtr) : xmlXPathFunction; cdecl;
        xmlXPathFuncLookupFuncPtr = ^xmlXPathFuncLookupFunc;

      xmlXPathVariableLookupFunc = function  (ctxt: Pointer; const name: xmlCharPtr; const ns_uri: xmlCharPtr) : xmlXPathObjectPtr; cdecl;
        xmlXPathVariableLookupFuncPtr = ^xmlXPathVariableLookupFunc;

      htmlElemDesc = record
          name : PAnsiChar; { The tag name}
          startTag : char; { Whether the start tag can be implied}
          endTag : char; { Whether the end tag can be implied}
          saveEndTag : char; { Whether the end tag should be saved}
          empty : char; { Is this an empty element ?}
          depr : char; { Is this a deprecated element ?}
          dtd : char; { 1: only in Loose DTD, 2: only Frameset one}
          isinline : char; { is this a block 0 or inline 1 element}
          desc : PAnsiChar; { the description NRK Jan.2003
* New fields encapsulating HTML structure
*
* Bugs:
*	This is a very limited representation.  It fails to tell us when
*	an element *requires* subelements (we only have whether they're
*	allowed or not), and it doesn't tell us where CDATA and PCDATA
*	are allowed.  Some element relationships are not fully represented:
*	these are flagged with the word MODIFIER
*}
          subelts : PPAnsiChar; { allowed sub-elements of this element}
          defaultsubelt : PAnsiChar; { subelement for suggested auto-repair
if necessary or NULL}
          attrs_opt : PPAnsiChar; { Optional Attributes}
          attrs_depr : PPAnsiChar; { Additional deprecated attributes}
          attrs_req : PPAnsiChar; { Required attributes}
      end;

      htmlEntityDesc = record
          value : Cardinal; { the UNICODE value for the character}
          name : PAnsiChar; { The entity name}
          desc : PAnsiChar; { the description}
      end;

      xlinkHandler = record
          simple : xlinkSimpleLinkFunk; {}
          extended : xlinkExtendedLinkFunk; {}
          set_ : xlinkExtendedLinkSetFunk; {}
      end;

      xmlAttr = record
          _private : Pointer; { application data}
          type_ : xmlElementType; { XML_ATTRIBUTE_NODE, must be second !}
          name : xmlCharPtr; { the name of the property}
          children : xmlNodePtr; { the value of the property}
          last : xmlNodePtr; { NULL}
          parent : xmlNodePtr; { child->parent link}
          next : xmlAttrPtr; { next sibling link }
          prev : xmlAttrPtr; { previous sibling link }
          doc : xmlDocPtr; { the containing document}
          ns : xmlNsPtr; { pointer to the associated namespace}
          atype : xmlAttributeType; { the attribute type if validating}
          psvi : Pointer; { for type/PSVI informations}
      end;

      xmlAttribute = record
          _private : Pointer; { application data}
          type_ : xmlElementType; { XML_ATTRIBUTE_DECL, must be second !}
          name : xmlCharPtr; { Attribute name}
          children : xmlNodePtr; { NULL}
          last : xmlNodePtr; { NULL}
          parent : xmlDtdPtr; { -> DTD}
          next : xmlNodePtr; { next sibling link }
          prev : xmlNodePtr; { previous sibling link }
          doc : xmlDocPtr; { the containing document}
          nexth : xmlAttributePtr; { next in hash table}
          atype : xmlAttributeType; { The attribute type}
          def : xmlAttributeDefault; { the default}
          defaultValue : xmlCharPtr; { or the default value}
          tree : xmlEnumerationPtr; { or the enumeration tree if any}
          prefix : xmlCharPtr; { the namespace prefix if any}
          elem : xmlCharPtr; { Element holding the attribute}
      end;

      xmlAttributeTable = record
      end;

      xmlAutomata = record
      end;

      xmlAutomataState = record
      end;

      xmlBuffer = record
          content : xmlCharPtr; { The buffer content UTF8}
          use : Cardinal; { The buffer size used}
          size : Cardinal; { The buffer size}
          alloc : xmlBufferAllocationScheme; { The realloc method}
      end;

      xmlCatalog = record
      end;

      xmlChLRange = record
          low : Cardinal; {}
          high : Cardinal; {}
      end;

      xmlChRangeGroup = record
          nbShortRange : Longint; {}
          nbLongRange : Longint; {}
          shortRange : xmlChSRangePtr; { points to an array of ranges}
          longRange : xmlChLRangePtr; {}
      end;

      xmlChSRange = record
          low : Word; {}
          high : Word; {}
      end;

      xmlCharEncodingHandler = record
          name : PAnsiChar; {}
          input : xmlCharEncodingInputFunc; {}
          output : xmlCharEncodingOutputFunc; {}
          iconv_in : iconv_t; {}
          iconv_out : iconv_t; {}
      end;

      xmlDOMWrapCtxt = record
          _private : Pointer; {}
      end;

      xmlDict = record
      end;

      xmlDoc = record
          _private : Pointer; { application data}
          type_ : xmlElementType; { XML_DOCUMENT_NODE, must be second !}
          name : PAnsiChar; { name/filename/URI of the document}
          children : xmlNodePtr; { the document tree}
          last : xmlNodePtr; { last child link}
          parent : xmlNodePtr; { child->parent link}
          next : xmlNodePtr; { next sibling link }
          prev : xmlNodePtr; { previous sibling link }
          doc : xmlDocPtr; { autoreference to itself End of common part}
          compression : Longint; { level of zlib compression}
          standalone : Longint; { standalone document (no external refs)}
          intSubset : xmlDtdPtr; { the document internal subset}
          extSubset : xmlDtdPtr; { the document external subset}
          oldNs : xmlNsPtr; { Global namespace, the old way}
          version : xmlCharPtr; { the XML version string}
          encoding : xmlCharPtr; { external initial encoding, if any}
          ids : Pointer; { Hash table for ID attributes if any}
          refs : Pointer; { Hash table for IDREFs attributes if any}
          URL : xmlCharPtr; { The URI for that document}
          charset : Longint; { encoding of the in-memory content
actually an xmlCharEncoding}
          dict : xmlDictPtr; { dict used to allocate names or NULL}
          psvi : Pointer; { for type/PSVI informations}
      end;

      xmlDtd = record
          _private : Pointer; { application data}
          type_ : xmlElementType; { XML_DTD_NODE, must be second !}
          name : xmlCharPtr; { Name of the DTD}
          children : xmlNodePtr; { the value of the property link}
          last : xmlNodePtr; { last child link}
          parent : xmlDocPtr; { child->parent link}
          next : xmlNodePtr; { next sibling link }
          prev : xmlNodePtr; { previous sibling link }
          doc : xmlDocPtr; { the containing document End of common part}
          notations : Pointer; { Hash table for notations if any}
          elements : Pointer; { Hash table for elements if any}
          attributes : Pointer; { Hash table for attributes if any}
          entities : Pointer; { Hash table for entities if any}
          ExternalID : xmlCharPtr; { External identifier for PUBLIC DTD}
          SystemID : xmlCharPtr; { URI for a SYSTEM or PUBLIC DTD}
          pentities : Pointer; { Hash table for param entities if any}
      end;

      xmlElement = record
          _private : Pointer; { application data}
          type_ : xmlElementType; { XML_ELEMENT_DECL, must be second !}
          name : xmlCharPtr; { Element name}
          children : xmlNodePtr; { NULL}
          last : xmlNodePtr; { NULL}
          parent : xmlDtdPtr; { -> DTD}
          next : xmlNodePtr; { next sibling link }
          prev : xmlNodePtr; { previous sibling link }
          doc : xmlDocPtr; { the containing document}
          etype : xmlElementTypeVal; { The type}
          content : xmlElementContentPtr; { the allowed element content}
          attributes : xmlAttributePtr; { List of the declared attributes}
          prefix : xmlCharPtr; { the namespace prefix if any}
          contModel : xmlRegexpPtr; { the validating regexp}
      end;

      xmlElementContent = record
          type_ : xmlElementContentType; { PCDATA, ELEMENT, SEQ or OR}
          ocur : xmlElementContentOccur; { ONCE, OPT, MULT or PLUS}
          name : xmlCharPtr; { Element name}
          c1 : xmlElementContentPtr; { first child}
          c2 : xmlElementContentPtr; { second child}
          parent : xmlElementContentPtr; { parent}
          prefix : xmlCharPtr; { Namespace prefix}
      end;

      xmlElementTable = record
      end;

      xmlEntitiesTable = record
      end;

      xmlEntity = record
          _private : Pointer; { application data}
          type_ : xmlElementType; { XML_ENTITY_DECL, must be second !}
          name : xmlCharPtr; { Entity name}
          children : xmlNodePtr; { First child link}
          last : xmlNodePtr; { Last child link}
          parent : xmlDtdPtr; { -> DTD}
          next : xmlNodePtr; { next sibling link }
          prev : xmlNodePtr; { previous sibling link }
          doc : xmlDocPtr; { the containing document}
          orig : xmlCharPtr; { content without ref substitution}
          content : xmlCharPtr; { content or ndata if unparsed}
          length : Longint; { the content length}
          etype : xmlEntityType; { The entity type}
          ExternalID : xmlCharPtr; { External identifier for PUBLIC}
          SystemID : xmlCharPtr; { URI for a SYSTEM or PUBLIC Entity}
          nexte : xmlEntityPtr; { unused}
          URI : xmlCharPtr; { the full URI as computed}
          owner : Longint; { does the entity own the childrens}
      end;

      xmlEnumeration = record
          next : xmlEnumerationPtr; { next one}
          name : xmlCharPtr; { Enumeration name}
      end;

      xmlError = record
          domain : Longint; { What part of the library raised this error}
          code : Longint; { The error code, e.g. an xmlParserError}
          message : PAnsiChar; { human-readable informative error message}
          level : xmlErrorLevel; { how consequent is the error}
          file_ : PAnsiChar; { the filename}
          line : Longint; { the line number if available}
          str1 : PAnsiChar; { extra string information}
          str2 : PAnsiChar; { extra string information}
          str3 : PAnsiChar; { extra string information}
          int1 : Longint; { extra number information}
          int2 : Longint; { column number of the error or 0 if N/A (todo: rename this field when we would break ABI)}
          ctxt : Pointer; { the parser context if available}
          node : Pointer; { the node in the tree}
      end;

      xmlExpCtxt = record
      end;

      xmlExpNode = record
      end;

      xmlHashTable = record
      end;

      xmlID = record
          next : xmlIDPtr; { next ID}
          value : xmlCharPtr; { The ID name}
          attr : xmlAttrPtr; { The attribute holding it}
          name : xmlCharPtr; { The attribute if attr is not available}
          lineno : Longint; { The line number if attr is not available}
          doc : xmlDocPtr; { The document holding the ID}
      end;

      xmlIDTable = record
      end;

      xmlLink = record
      end;

      xmlList = record
      end;

      xmlLocationSet = record
          locNr : Longint; { number of locations in the set}
          locMax : Longint; { size of the array as allocated}
          locTab : xmlXPathObjectPtrPtr; { array of locations}
      end;

      xmlModule = record
      end;

      xmlMutex = record
      end;

      xmlNode = record
          _private : Pointer; { application data}
          type_ : xmlElementType; { type number, must be second !}
          name : xmlCharPtr; { the name of the node, or the entity}
          children : xmlNodePtr; { parent->childs link}
          last : xmlNodePtr; { last child link}
          parent : xmlNodePtr; { child->parent link}
          next : xmlNodePtr; { next sibling link }
          prev : xmlNodePtr; { previous sibling link }
          doc : xmlDocPtr; { the containing document End of common part}
          ns : xmlNsPtr; { pointer to the associated namespace}
          content : xmlCharPtr; { the content}
          properties : xmlAttrPtr; { properties list}
          nsDef : xmlNsPtr; { namespace definitions on this node}
          psvi : Pointer; { for type/PSVI informations}
          line : Word; { line number}
          extra : Word; { extra data for XPath/XSLT}
      end;

      xmlNodeSet = record
          nodeNr : Longint; { number of nodes in the set}
          nodeMax : Longint; { size of the array as allocated}
          nodeTab : xmlNodePtrPtr; { array of nodes in no particular order @@ with_ns to check wether namespace nodes should be looked at @@}
      end;

      xmlNotation = record
          name : xmlCharPtr; { Notation name}
          PublicID : xmlCharPtr; { Public identifier, if any}
          SystemID : xmlCharPtr; { System identifier, if any}
      end;

      xmlNotationTable = record
      end;

      xmlOutputBuffer = record
          context : Pointer; {}
          writecallback : xmlOutputWriteCallback; {}
          closecallback : xmlOutputCloseCallback; {}
          encoder : xmlCharEncodingHandlerPtr; { I18N conversions to UTF-8}
          buffer : xmlBufferPtr; { Local buffer encoded in UTF-8 or ISOLatin}
          conv : xmlBufferPtr; { if encoder != NULL buffer for output}
          written : Longint; { total number of byte written}
          error : Longint; {}
      end;

      xmlParserInput = record
          buf : xmlParserInputBufferPtr; { UTF-8 encoded buffer}
          filename : PAnsiChar; { The file analyzed, if any}
          directory : PAnsiChar; { the directory/base of the file}
          base : xmlCharPtr; { Base of the array to parse}
          cur : xmlCharPtr; { Current char being parsed}
          end_ : xmlCharPtr; { end of the array to parse}
          length : Longint; { length if known}
          line : Longint; { Current line}
          col : Longint; {* NOTE: consumed is only tested for equality in the parser code,
*       so even if there is an overflow this should not give troubles
*       for parsing very large instances.
*}
          consumed : Cardinal; { How many xmlChars already consumed}
          free : xmlParserInputDeallocate; { function to deallocate the base}
          encoding : xmlCharPtr; { the encoding string for entity}
          version : xmlCharPtr; { the version string for entity}
          standalone : Longint; { Was that entity marked standalone}
          id : Longint; { an unique identifier for the entity}
      end;

      xmlParserInputBuffer = record
          context : Pointer; {}
          readcallback : xmlInputReadCallback; {}
          closecallback : xmlInputCloseCallback; {}
          encoder : xmlCharEncodingHandlerPtr; { I18N conversions to UTF-8}
          buffer : xmlBufferPtr; { Local buffer encoded in UTF-8}
          raw : xmlBufferPtr; { if encoder != NULL buffer for raw input}
          compressed : Longint; { -1=unknown, 0=not compressed, 1=compressed}
          error : Longint; {}
          rawconsumed : Cardinal; { amount consumed from raw}
      end;

      xmlParserNodeInfo = record
          node : xmlNodePtr; { Position & line # that text that created the node begins & ends on}
          begin_pos : Cardinal; {}
          begin_line : Cardinal; {}
          end_pos : Cardinal; {}
          end_line : Cardinal; {}
      end;

      xmlParserNodeInfoSeq = record
          maximum : Cardinal; {}
          length : Cardinal; {}
          buffer : xmlParserNodeInfoPtr; {}
      end;

      xmlPattern = record
      end;

      xmlRMutex = record
      end;

      xmlRef = record
          next : xmlRefPtr; { next Ref}
          value : xmlCharPtr; { The Ref name}
          attr : xmlAttrPtr; { The attribute holding it}
          name : xmlCharPtr; { The attribute if attr is not available}
          lineno : Longint; { The line number if attr is not available}
      end;

      xmlRefTable = record
      end;

      xmlRegExecCtxt = record
      end;

      xmlRegexp = record
      end;

      xmlRelaxNG = record
      end;

      xmlRelaxNGParserCtxt = record
      end;

      xmlRelaxNGValidCtxt = record
      end;

      xmlSAXHandler = record
          internalSubset : internalSubsetSAXFunc; {}
          isStandalone : isStandaloneSAXFunc; {}
          hasInternalSubset : hasInternalSubsetSAXFunc; {}
          hasExternalSubset : hasExternalSubsetSAXFunc; {}
          resolveEntity : resolveEntitySAXFunc; {}
          getEntity : getEntitySAXFunc; {}
          entityDecl : entityDeclSAXFunc; {}
          notationDecl : notationDeclSAXFunc; {}
          attributeDecl : attributeDeclSAXFunc; {}
          elementDecl : elementDeclSAXFunc; {}
          unparsedEntityDecl : unparsedEntityDeclSAXFunc; {}
          setDocumentLocator : setDocumentLocatorSAXFunc; {}
          startDocument : startDocumentSAXFunc; {}
          endDocument : endDocumentSAXFunc; {}
          startElement : startElementSAXFunc; {}
          endElement : endElementSAXFunc; {}
          reference : referenceSAXFunc; {}
          characters : charactersSAXFunc; {}
          ignorableWhitespace : ignorableWhitespaceSAXFunc; {}
          processingInstruction : processingInstructionSAXFunc; {}
          comment : commentSAXFunc; {}
          warning : warningSAXFunc; {}
          error : errorSAXFunc; {}
          fatalError : fatalErrorSAXFunc; { unused error() get all the errors}
          getParameterEntity : getParameterEntitySAXFunc; {}
          cdataBlock : cdataBlockSAXFunc; {}
          externalSubset : externalSubsetSAXFunc; {}
          initialized : Cardinal; { The following fields are extensions available only on version 2}
          _private : Pointer; {}
          startElementNs : startElementNsSAX2Func; {}
          endElementNs : endElementNsSAX2Func; {}
          serror : xmlStructuredErrorFunc; {}
      end;

      xmlSAXHandlerV1 = record
          internalSubset : internalSubsetSAXFunc; {}
          isStandalone : isStandaloneSAXFunc; {}
          hasInternalSubset : hasInternalSubsetSAXFunc; {}
          hasExternalSubset : hasExternalSubsetSAXFunc; {}
          resolveEntity : resolveEntitySAXFunc; {}
          getEntity : getEntitySAXFunc; {}
          entityDecl : entityDeclSAXFunc; {}
          notationDecl : notationDeclSAXFunc; {}
          attributeDecl : attributeDeclSAXFunc; {}
          elementDecl : elementDeclSAXFunc; {}
          unparsedEntityDecl : unparsedEntityDeclSAXFunc; {}
          setDocumentLocator : setDocumentLocatorSAXFunc; {}
          startDocument : startDocumentSAXFunc; {}
          endDocument : endDocumentSAXFunc; {}
          startElement : startElementSAXFunc; {}
          endElement : endElementSAXFunc; {}
          reference : referenceSAXFunc; {}
          characters : charactersSAXFunc; {}
          ignorableWhitespace : ignorableWhitespaceSAXFunc; {}
          processingInstruction : processingInstructionSAXFunc; {}
          comment : commentSAXFunc; {}
          warning : warningSAXFunc; {}
          error : errorSAXFunc; {}
          fatalError : fatalErrorSAXFunc; { unused error() get all the errors}
          getParameterEntity : getParameterEntitySAXFunc; {}
          cdataBlock : cdataBlockSAXFunc; {}
          externalSubset : externalSubsetSAXFunc; {}
          initialized : Cardinal; {}
      end;

      xmlSAXLocator = record
          getPublicId : Pointer; {}
          getSystemId : Pointer; {}
          getLineNumber : Pointer; {}
          getColumnNumber : Pointer; {}
      end;

      xmlGlobalState = record
          xmlParserVersion : PAnsiChar; {}
          xmlDefaultSAXLocator : xmlSAXLocator; {}
          xmlDefaultSAXHandler : xmlSAXHandlerV1; {}
          docbDefaultSAXHandler : xmlSAXHandlerV1; {}
          htmlDefaultSAXHandler : xmlSAXHandlerV1; {}
          xmlFree : xmlFreeFunc; {}
          xmlMalloc : xmlMallocFunc; {}
          xmlMemStrdup : xmlStrdupFunc; {}
          xmlRealloc : xmlReallocFunc; {}
          xmlGenericError : xmlGenericErrorFunc; {}
          xmlStructuredError : xmlStructuredErrorFunc; {}
          xmlGenericErrorContext : Pointer; {}
          oldXMLWDcompatibility : Longint; {}
          xmlBufferAllocScheme : xmlBufferAllocationScheme; {}
          xmlDefaultBufferSize : Longint; {}
          xmlSubstituteEntitiesDefaultValue : Longint; {}
          xmlDoValidityCheckingDefaultValue : Longint; {}
          xmlGetWarningsDefaultValue : Longint; {}
          xmlKeepBlanksDefaultValue : Longint; {}
          xmlLineNumbersDefaultValue : Longint; {}
          xmlLoadExtDtdDefaultValue : Longint; {}
          xmlParserDebugEntities : Longint; {}
          xmlPedanticParserDefaultValue : Longint; {}
          xmlSaveNoEmptyTags : Longint; {}
          xmlIndentTreeOutput : Longint; {}
          xmlTreeIndentString : PAnsiChar; {}
          xmlRegisterNodeDefaultValue : xmlRegisterNodeFunc; {}
          xmlDeregisterNodeDefaultValue : xmlDeregisterNodeFunc; {}
          xmlMallocAtomic : xmlMallocFunc; {}
          xmlLastError : xmlError; {}
          xmlParserInputBufferCreateFilenameValue : xmlParserInputBufferCreateFilenameFunc; {}
          xmlOutputBufferCreateFilenameValue : xmlOutputBufferCreateFilenameFunc; {}
      end;

      xmlSaveCtxt = record
      end;

      xmlSchema = record
          name : xmlCharPtr; { schema name}
          targetNamespace : xmlCharPtr; { the target namespace}
          version : xmlCharPtr; {}
          id : xmlCharPtr; { Obsolete}
          doc : xmlDocPtr; {}
          annot : xmlSchemaAnnotPtr; {}
          flags : Longint; {}
          typeDecl : xmlHashTablePtr; {}
          attrDecl : xmlHashTablePtr; {}
          attrgrpDecl : xmlHashTablePtr; {}
          elemDecl : xmlHashTablePtr; {}
          notaDecl : xmlHashTablePtr; {}
          schemasImports : xmlHashTablePtr; {}
          _private : Pointer; { unused by the library for users or bindings}
          groupDecl : xmlHashTablePtr; {}
          dict : xmlDictPtr; {}
          includes : Pointer; { the includes, this is opaque for now}
          preserve : Longint; { whether to free the document}
          counter : Longint; { used to give ononymous components unique names}
          idcDef : xmlHashTablePtr; { All identity-constraint defs.}
          volatiles : Pointer; { Obsolete}
      end;

      xmlSchemaAnnot = record
          next : xmlSchemaAnnotPtr; {}
          content : xmlNodePtr; { the annotation}
      end;

      xmlSchemaAttribute = record
          type_ : xmlSchemaTypeType; {}
          next : xmlSchemaAttributePtr; { the next attribute (not used?)}
          name : xmlCharPtr; { the name of the declaration}
          id : xmlCharPtr; { Deprecated; not used}
          ref : xmlCharPtr; { Deprecated; not used}
          refNs : xmlCharPtr; { Deprecated; not used}
          typeName : xmlCharPtr; { the local name of the type definition}
          typeNs : xmlCharPtr; { the ns URI of the type definition}
          annot : xmlSchemaAnnotPtr; {}
          base : xmlSchemaTypePtr; { Deprecated; not used}
          occurs : Longint; { Deprecated; not used}
          defValue : xmlCharPtr; { The initial value of the value constraint}
          subtypes : xmlSchemaTypePtr; { the type definition}
          node : xmlNodePtr; {}
          targetNamespace : xmlCharPtr; {}
          flags : Longint; {}
          refPrefix : xmlCharPtr; { Deprecated; not used}
          defVal : xmlSchemaValPtr; { The compiled value constraint}
          refDecl : xmlSchemaAttributePtr; { Deprecated; not used}
      end;

      xmlSchemaAttributeGroup = record
          type_ : xmlSchemaTypeType; { The kind of type}
          next : xmlSchemaAttributePtr; { the next attribute if in a group ...}
          name : xmlCharPtr; {}
          id : xmlCharPtr; {}
          ref : xmlCharPtr; { Deprecated; not used}
          refNs : xmlCharPtr; { Deprecated; not used}
          annot : xmlSchemaAnnotPtr; {}
          attributes : xmlSchemaAttributePtr; { Deprecated; not used}
          node : xmlNodePtr; {}
          flags : Longint; {}
          attributeWildcard : xmlSchemaWildcardPtr; {}
          refPrefix : xmlCharPtr; { Deprecated; not used}
          refItem : xmlSchemaAttributeGroupPtr; { Deprecated; not used}
          targetNamespace : xmlCharPtr; {}
          attrUses : Pointer; {}
      end;

      xmlSchemaAttributeLink = record
          next : xmlSchemaAttributeLinkPtr; { the next attribute link ...}
          attr : xmlSchemaAttributePtr; { the linked attribute}
      end;

      xmlSchemaElement = record
          type_ : xmlSchemaTypeType; { The kind of type}
          next : xmlSchemaTypePtr; { Not used?}
          name : xmlCharPtr; {}
          id : xmlCharPtr; { Deprecated; not used}
          ref : xmlCharPtr; { Deprecated; not used}
          refNs : xmlCharPtr; { Deprecated; not used}
          annot : xmlSchemaAnnotPtr; {}
          subtypes : xmlSchemaTypePtr; { the type definition}
          attributes : xmlSchemaAttributePtr; {}
          node : xmlNodePtr; {}
          minOccurs : Longint; { Deprecated; not used}
          maxOccurs : Longint; { Deprecated; not used}
          flags : Longint; {}
          targetNamespace : xmlCharPtr; {}
          namedType : xmlCharPtr; {}
          namedTypeNs : xmlCharPtr; {}
          substGroup : xmlCharPtr; {}
          substGroupNs : xmlCharPtr; {}
          scope : xmlCharPtr; {}
          value : xmlCharPtr; { The original value of the value constraint.}
          refDecl : xmlSchemaElementPtr; { This will now be used for the
substitution group affiliation}
          contModel : xmlRegexpPtr; { Obsolete for WXS, maybe used for RelaxNG}
          contentType : xmlSchemaContentType; {}
          refPrefix : xmlCharPtr; { Deprecated; not used}
          defVal : xmlSchemaValPtr; { The compiled value contraint.}
          idcs : Pointer; { The identity-constraint defs}
      end;

      xmlSchemaFacet = record
          type_ : xmlSchemaTypeType; { The kind of type}
          next : xmlSchemaFacetPtr; { the next type if in a sequence ...}
          value : xmlCharPtr; { The original value}
          id : xmlCharPtr; { Obsolete}
          annot : xmlSchemaAnnotPtr; {}
          node : xmlNodePtr; {}
          fixed : Longint; { XML_SCHEMAS_FACET_PRESERVE, etc.}
          whitespace : Longint; {}
          val : xmlSchemaValPtr; { The compiled value}
          regexp : xmlRegexpPtr; { The regex for patterns}
      end;

      xmlSchemaFacetLink = record
          next : xmlSchemaFacetLinkPtr; { the next facet link ...}
          facet : xmlSchemaFacetPtr; { the linked facet}
      end;

      xmlSchemaNotation = record
          type_ : xmlSchemaTypeType; { The kind of type}
          name : xmlCharPtr; {}
          annot : xmlSchemaAnnotPtr; {}
          identifier : xmlCharPtr; {}
          targetNamespace : xmlCharPtr; {}
      end;

      xmlSchemaParserCtxt = record
      end;

      xmlSchemaSAXPlugStruct = record
      end;

      xmlSchemaType = record
          type_ : xmlSchemaTypeType; { The kind of type}
          next : xmlSchemaTypePtr; { the next type if in a sequence ...}
          name : xmlCharPtr; {}
          id : xmlCharPtr; { Deprecated; not used}
          ref : xmlCharPtr; { Deprecated; not used}
          refNs : xmlCharPtr; { Deprecated; not used}
          annot : xmlSchemaAnnotPtr; {}
          subtypes : xmlSchemaTypePtr; {}
          attributes : xmlSchemaAttributePtr; { Deprecated; not used}
          node : xmlNodePtr; {}
          minOccurs : Longint; { Deprecated; not used}
          maxOccurs : Longint; { Deprecated; not used}
          flags : Longint; {}
          contentType : xmlSchemaContentType; {}
          base : xmlCharPtr; { Base type's local name}
          baseNs : xmlCharPtr; { Base type's target namespace}
          baseType : xmlSchemaTypePtr; { The base type component}
          facets : xmlSchemaFacetPtr; { Local facets}
          redef : xmlSchemaTypePtr; { Deprecated; not used}
          recurse : Longint; { Obsolete}
          attributeUses : xmlSchemaAttributeLinkPtrPtr; { Deprecated; not used}
          attributeWildcard : xmlSchemaWildcardPtr; {}
          builtInType : Longint; { Type of built-in types.}
          memberTypes : xmlSchemaTypeLinkPtr; { member-types if a union type.}
          facetSet : xmlSchemaFacetLinkPtr; { All facets (incl. inherited)}
          refPrefix : xmlCharPtr; { Deprecated; not used}
          contentTypeDef : xmlSchemaTypePtr; { Used for the simple content of complex types. Could we use @subtypes for this?}
          contModel : xmlRegexpPtr; { Holds the automaton of the content model}
          targetNamespace : xmlCharPtr; {}
          attrUses : Pointer; {}
      end;

      xmlSchemaTypeLink = record
          next : xmlSchemaTypeLinkPtr; { the next type link ...}
          type_ : xmlSchemaTypePtr; { the linked type}
      end;

      xmlSchemaVal = record
      end;

      xmlSchemaValidCtxt = record
      end;

      xmlSchemaWildcard = record
          type_ : xmlSchemaTypeType; { The kind of type}
          id : xmlCharPtr; { Deprecated; not used}
          annot : xmlSchemaAnnotPtr; {}
          node : xmlNodePtr; {}
          minOccurs : Longint; { Deprecated; not used}
          maxOccurs : Longint; { Deprecated; not used}
          processContents : Longint; {}
          any : Longint; { Indicates if the ns constraint is of ##any}
          nsSet : xmlSchemaWildcardNsPtr; { The list of allowed namespaces}
          negNsSet : xmlSchemaWildcardNsPtr; { The negated namespace}
          flags : Longint; {}
      end;

      xmlSchemaWildcardNs = record
          next : xmlSchemaWildcardNsPtr; { the next constraint link ...}
          value : xmlCharPtr; { the value}
      end;

      xmlSchematron = record
      end;

      xmlSchematronParserCtxt = record
      end;

      xmlSchematronValidCtxt = record
      end;

      xmlShellCtxt = record
          filename : PAnsiChar; {}
          doc : xmlDocPtr; {}
          node : xmlNodePtr; {}
          pctxt : xmlXPathContextPtr; {}
          loaded : Longint; {}
          output : PFILE; {}
          input : xmlShellReadlineFunc; {}
      end;

      xmlStreamCtxt = record
      end;

      xmlTextReader = record
      end;

      xmlTextWriter = record
      end;

      xmlURI = record
          scheme : PAnsiChar; { the URI scheme}
          opaque : PAnsiChar; { opaque part}
          authority : PAnsiChar; { the authority part}
          server : PAnsiChar; { the server part}
          user : PAnsiChar; { the user part}
          port : Longint; { the port number}
          path : PAnsiChar; { the path string}
          query : PAnsiChar; { the query string}
          fragment : PAnsiChar; { the fragment identifier}
          cleanup : Longint; { parsing potentially unclean URI}
      end;

      xmlValidCtxt = record
          userData : Pointer; { user specific data block}
          error : xmlValidityErrorFunc; { the callback in case of errors}
          warning : xmlValidityWarningFunc; { the callback in case of warning Node analysis stack used when validating within entities}
          node : xmlNodePtr; { Current parsed Node}
          nodeNr : Longint; { Depth of the parsing stack}
          nodeMax : Longint; { Max depth of the parsing stack}
          nodeTab : xmlNodePtrPtr; { array of nodes}
          finishDtd : Cardinal; { finished validating the Dtd ?}
          doc : xmlDocPtr; { the document}
          valid : Longint; { temporary validity check result state state used for non-determinist content validation}
          vstate : xmlValidStatePtr; { current state}
          vstateNr : Longint; { Depth of the validation stack}
          vstateMax : Longint; { Max depth of the validation stack}
          vstateTab : xmlValidStatePtr; { array of validation states}
          am : xmlAutomataPtr; { the automata}
          state : xmlAutomataStatePtr; { used to build the automata}
      end;

      xmlParserCtxt = record
          sax : xmlSAXHandlerPtr; { The SAX handler}
          userData : Pointer; { For SAX interface only, used by DOM build}
          myDoc : xmlDocPtr; { the document being built}
          wellFormed : Longint; { is the document well formed}
          replaceEntities : Longint; { shall we replace entities ?}
          version : xmlCharPtr; { the XML version string}
          encoding : xmlCharPtr; { the declared encoding, if any}
          standalone : Longint; { standalone document}
          html : Longint; { an HTML(1)/Docbook(2) document Input stream stack}
          input : xmlParserInputPtr; { Current input stream}
          inputNr : Longint; { Number of current input streams}
          inputMax : Longint; { Max number of input streams}
          inputTab : xmlParserInputPtrPtr; { stack of inputs Node analysis stack only used for DOM building}
          node : xmlNodePtr; { Current parsed Node}
          nodeNr : Longint; { Depth of the parsing stack}
          nodeMax : Longint; { Max depth of the parsing stack}
          nodeTab : xmlNodePtrPtr; { array of nodes}
          record_info : Longint; { Whether node info should be kept}
          node_seq : xmlParserNodeInfoSeq; { info about each node parsed}
          errNo : Longint; { error code}
          hasExternalSubset : Longint; { reference and external subset}
          hasPErefs : Longint; { the internal subset has PE refs}
          external : Longint; { are we parsing an external entity}
          valid : Longint; { is the document valid}
          validate : Longint; { shall we try to validate ?}
          vctxt : xmlValidCtxt; { The validity context}
          instate : xmlParserInputState; { current type of input}
          token : Longint; { next char look-ahead}
          directory : PAnsiChar; { the data directory Node name stack}
          name : xmlCharPtr; { Current parsed Node}
          nameNr : Longint; { Depth of the parsing stack}
          nameMax : Longint; { Max depth of the parsing stack}
          nameTab : xmlCharPtrPtr; { array of nodes}
          nbChars : Longint; { number of xmlChar processed}
          checkIndex : Longint; { used by progressive parsing lookup}
          keepBlanks : Longint; { ugly but ...}
          disableSAX : Longint; { SAX callbacks are disabled}
          inSubset : Longint; { Parsing is in int 1/ext 2 subset}
          intSubName : xmlCharPtr; { name of subset}
          extSubURI : xmlCharPtr; { URI of external subset}
          extSubSystem : xmlCharPtr; { SYSTEM ID of external subset xml:space values}
          space : PInteger; { Should the parser preserve spaces}
          spaceNr : Longint; { Depth of the parsing stack}
          spaceMax : Longint; { Max depth of the parsing stack}
          spaceTab : PInteger; { array of space infos}
          depth : Longint; { to prevent entity substitution loops}
          entity : xmlParserInputPtr; { used to check entities boundaries}
          charset : Longint; { encoding of the in-memory content
actually an xmlCharEncoding}
          nodelen : Longint; { Those two fields are there to}
          nodemem : Longint; { Speed up large node parsing}
          pedantic : Longint; { signal pedantic warnings}
          _private : Pointer; { For user data, libxml won't touch it}
          loadsubset : Longint; { should the external subset be loaded}
          linenumbers : Longint; { set line number in element content}
          catalogs : Pointer; { document's own catalog}
          recovery : Longint; { run in recovery mode}
          progressive : Longint; { is this a progressive parsing}
          dict : xmlDictPtr; { dictionnary for the parser}
          atts : xmlCharPtrPtr; { array for the attributes callbacks}
          maxatts : Longint; { the size of the array}
          docdict : Longint; {* pre-interned strings
*}
          str_xml : xmlCharPtr; {}
          str_xmlns : xmlCharPtr; {}
          str_xml_ns : xmlCharPtr; {* Everything below is used only by the new SAX mode
*}
          sax2 : Longint; { operating in the new SAX mode}
          nsNr : Longint; { the number of inherited namespaces}
          nsMax : Longint; { the size of the arrays}
          nsTab : xmlCharPtrPtr; { the array of prefix/namespace name}
          attallocs : PInteger; { which attribute were allocated}
          pushTab : PPointer; { array of data for push}
          attsDefault : xmlHashTablePtr; { defaulted attributes if any}
          attsSpecial : xmlHashTablePtr; { non-CDATA attributes if any}
          nsWellFormed : Longint; { is the document XML Nanespace okay}
          options : Longint; {* Those fields are needed only for treaming parsing so far
*}
          dictNames : Longint; { Use dictionary names for the tree}
          freeElemsNr : Longint; { number of freed element nodes}
          freeElems : xmlNodePtr; { List of freed element nodes}
          freeAttrsNr : Longint; { number of freed attributes nodes}
          freeAttrs : xmlAttrPtr; {* the complete error informations for the last error.
*}
          lastError : xmlError; {}
          parseMode : xmlParserMode; { the parser mode}
      end;

      xmlValidState = record
      end;

      xmlXIncludeCtxt = record
      end;

      xmlXPathAxis = record
          name : xmlCharPtr; { the axis name}
          func : xmlXPathAxisFunc; { the search function}
      end;

      xmlXPathCompExpr = record
      end;

      xmlXPathContext = record
          doc : xmlDocPtr; { The current document}
          node : xmlNodePtr; { The current node}
          nb_variables_unused : Longint; { unused (hash table)}
          max_variables_unused : Longint; { unused (hash table)}
          varHash : xmlHashTablePtr; { Hash table of defined variables}
          nb_types : Longint; { number of defined types}
          max_types : Longint; { max number of types}
          types : xmlXPathTypePtr; { Array of defined types}
          nb_funcs_unused : Longint; { unused (hash table)}
          max_funcs_unused : Longint; { unused (hash table)}
          funcHash : xmlHashTablePtr; { Hash table of defined funcs}
          nb_axis : Longint; { number of defined axis}
          max_axis : Longint; { max number of axis}
          axis : xmlXPathAxisPtr; { Array of defined axis the namespace nodes of the context node}
          namespaces : xmlNsPtrPtr; { Array of namespaces}
          nsNr : Longint; { number of namespace in scope}
          user : Pointer; { function to free extra variables}
          contextSize : Longint; { the context size}
          proximityPosition : Longint; { the proximity position extra stuff for XPointer}
          xptr : Longint; { it this an XPointer context}
          here : xmlNodePtr; { for here()}
          origin : xmlNodePtr; { for origin() the set of namespace declarations in scope for the expression}
          nsHash : xmlHashTablePtr; { The namespaces hash table}
          varLookupFunc : xmlXPathVariableLookupFunc; { variable lookup func}
          varLookupData : Pointer; { variable lookup data Possibility to link in an extra item}
          extra : Pointer; { needed for XSLT The function name and URI when calling a function}
          function_ : xmlCharPtr; {}
          functionURI : xmlCharPtr; { function lookup function and data}
          funcLookupFunc : xmlXPathFuncLookupFunc; { function lookup func}
          funcLookupData : Pointer; { function lookup data temporary namespace lists kept for walking the namespace axis}
          tmpNsList : xmlNsPtrPtr; { Array of namespaces}
          tmpNsNr : Longint; { number of namespace in scope error reporting mechanism}
          userData : Pointer; { user specific data block}
          error : xmlStructuredErrorFunc; { the callback in case of errors}
          lastError : xmlError; { the last error}
          debugNode : xmlNodePtr; { the source node XSLT dictionnary}
          dict : xmlDictPtr; { dictionnary if any}
          flags : Longint; { flags to control compilation Cache for reusal of XPath objects}
          cache : Pointer; {}
      end;

      xmlXPathFunct = record
          name : xmlCharPtr; { the function name}
          func : xmlXPathEvalFunc; { the evaluation function}
      end;

      xmlXPathObject = record
          type_ : xmlXPathObjectType; {}
          nodesetval : xmlNodeSetPtr; {}
          boolval : Longint; {}
          floatval : double; {}
          stringval : xmlCharPtr; {}
          user : Pointer; {}
          index : Longint; {}
          user2 : Pointer; {}
          index2 : Longint; {}
      end;

      xmlXPathParserContext = record
          cur : xmlCharPtr; { the current char being parsed}
          base : xmlCharPtr; { the full expression}
          error : Longint; { error code}
          context : xmlXPathContextPtr; { the evaluation context}
          value : xmlXPathObjectPtr; { the current value}
          valueNr : Longint; { number of values stacked}
          valueMax : Longint; { max number of values stacked}
          valueTab : xmlXPathObjectPtrPtr; { stack of values}
          comp : xmlXPathCompExprPtr; { the precompiled expression}
          xptr : Longint; { it this an XPointer expression}
          ancestor : xmlNodePtr; { used for walking preceding axis}
      end;

      xmlXPathType = record
          name : xmlCharPtr; { the type name}
          func : xmlXPathConvertFunc; { the conversion function}
      end;

      xmlXPathVariable = record
          name : xmlCharPtr; { the variable name}
          value : xmlXPathObjectPtr; { the value}
      end;

      docbDocPtr = xmlDocPtr;
      docbParserCtxt = xmlParserCtxt;
      docbParserCtxtPtr = xmlParserCtxtPtr;
      docbParserInput = xmlParserInput;
      docbParserInputPtr = xmlParserInputPtr;
      docbSAXHandler = xmlSAXHandler;
      docbSAXHandlerPtr = xmlSAXHandlerPtr;
      htmlDocPtr = xmlDocPtr;
      htmlNodePtr = xmlNodePtr;
      htmlParserCtxt = xmlParserCtxt;
      htmlParserCtxtPtr = xmlParserCtxtPtr;
      htmlParserInput = xmlParserInput;
      htmlParserInputPtr = xmlParserInputPtr;
      htmlParserNodeInfo = xmlParserNodeInfo;
      htmlSAXHandler = xmlSAXHandler;
      htmlSAXHandlerPtr = xmlSAXHandlerPtr;
      xmlChar = AnsiChar;
      xmlNsType = xmlElementType;

      xmlNs = record
          next : xmlNsPtr; { next Ns link for this node }
          type_ : xmlNsType; { global or local}
          href : xmlCharPtr; { URL for the namespace}
          prefix : xmlCharPtr; { prefix for the namespace}
          _private : Pointer; { application data}
      end;

  function UTF8ToHtml (out_: PByte; outlen: PInteger; const in_: PByte; inlen: PInteger) : Longint; cdecl; external LIBXML2_SO;
  function UTF8Toisolat1 (out_: PByte; outlen: PInteger; const in_: PByte; inlen: PInteger) : Longint; cdecl; external LIBXML2_SO;
  procedure attribute (ctx: Pointer; const fullname: xmlCharPtr; const value: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure attributeDecl (ctx: Pointer; const elem: xmlCharPtr; const fullname: xmlCharPtr; type_: Longint; def: Longint; const defaultValue: xmlCharPtr; tree: xmlEnumerationPtr); cdecl; external LIBXML2_SO;
  procedure cdataBlock (ctx: Pointer; const value: xmlCharPtr; len: Longint); cdecl; external LIBXML2_SO;
  procedure characters (ctx: Pointer; const ch: xmlCharPtr; len: Longint); cdecl; external LIBXML2_SO;
  function checkNamespace (ctx: Pointer; namespace: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure comment (ctx: Pointer; const value: xmlCharPtr); cdecl; external LIBXML2_SO;
  function docbCreateFileParserCtxt (const filename: PAnsiChar; const encoding: PAnsiChar) : docbParserCtxtPtr; cdecl; external LIBXML2_SO;
  function docbCreatePushParserCtxt (sax: docbSAXHandlerPtr; user_data: Pointer; const chunk: PAnsiChar; size: Longint; const filename: PAnsiChar; enc: xmlCharEncoding) : docbParserCtxtPtr; cdecl; external LIBXML2_SO;
  procedure docbDefaultSAXHandlerInit (); cdecl; external LIBXML2_SO;
  function docbEncodeEntities (out_: PByte; outlen: PInteger; const in_: PByte; inlen: PInteger; quoteChar: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure docbFreeParserCtxt (ctxt: docbParserCtxtPtr); cdecl; external LIBXML2_SO;
  function docbParseChunk (ctxt: docbParserCtxtPtr; const chunk: PAnsiChar; size: Longint; terminate: Longint) : Longint; cdecl; external LIBXML2_SO;
  function docbParseDoc (cur: xmlCharPtr; const encoding: PAnsiChar) : docbDocPtr; cdecl; external LIBXML2_SO;
  function docbParseDocument (ctxt: docbParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function docbParseFile (const filename: PAnsiChar; const encoding: PAnsiChar) : docbDocPtr; cdecl; external LIBXML2_SO;
  function docbSAXParseDoc (cur: xmlCharPtr; const encoding: PAnsiChar; sax: docbSAXHandlerPtr; userData: Pointer) : docbDocPtr; cdecl; external LIBXML2_SO;
  function docbSAXParseFile (const filename: PAnsiChar; const encoding: PAnsiChar; sax: docbSAXHandlerPtr; userData: Pointer) : docbDocPtr; cdecl; external LIBXML2_SO;
  procedure elementDecl (ctx: Pointer; const name: xmlCharPtr; type_: Longint; content: xmlElementContentPtr); cdecl; external LIBXML2_SO;
  procedure endDocument (ctx: Pointer); cdecl; external LIBXML2_SO;
  procedure endElement (ctx: Pointer; const name: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure entityDecl (ctx: Pointer; const name: xmlCharPtr; type_: Longint; const publicId: xmlCharPtr; const systemId: xmlCharPtr; content: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure externalSubset (ctx: Pointer; const name: xmlCharPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr); cdecl; external LIBXML2_SO;
  function getColumnNumber (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function getEntity (ctx: Pointer; const name: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function getLineNumber (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function getNamespace (ctx: Pointer) : xmlNsPtr; cdecl; external LIBXML2_SO;
  function getParameterEntity (ctx: Pointer; const name: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function getPublicId (ctx: Pointer) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function getSystemId (ctx: Pointer) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure globalNamespace (ctx: Pointer; const href: xmlCharPtr; const prefix: xmlCharPtr); cdecl; external LIBXML2_SO;
  function hasExternalSubset (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function hasInternalSubset (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function htmlAttrAllowed (const elt: htmlElemDescPtr; const attr: xmlCharPtr; legacy: Longint) : htmlStatus; cdecl; external LIBXML2_SO;
  function htmlAutoCloseTag (doc: htmlDocPtr; const name: xmlCharPtr; elem: htmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function htmlCreateFileParserCtxt (const filename: PAnsiChar; const encoding: PAnsiChar) : htmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function htmlCreateMemoryParserCtxt (const buffer: PAnsiChar; size: Longint) : htmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function htmlCreatePushParserCtxt (sax: htmlSAXHandlerPtr; user_data: Pointer; const chunk: PAnsiChar; size: Longint; const filename: PAnsiChar; enc: xmlCharEncoding) : htmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function htmlCtxtReadDoc (ctxt: htmlParserCtxtPtr; const cur: xmlCharPtr; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlCtxtReadFd (ctxt: htmlParserCtxtPtr; fd: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlCtxtReadFile (ctxt: htmlParserCtxtPtr; const filename: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlCtxtReadIO (ctxt: htmlParserCtxtPtr; ioread: xmlInputReadCallback; ioclose: xmlInputCloseCallback; ioctx: Pointer; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlCtxtReadMemory (ctxt: htmlParserCtxtPtr; const buffer: PAnsiChar; size: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  procedure htmlCtxtReset (ctxt: htmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function htmlCtxtUseOptions (ctxt: htmlParserCtxtPtr; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure htmlDefaultSAXHandlerInit (); cdecl; external LIBXML2_SO;
  procedure htmlDocContentDumpFormatOutput (buf: xmlOutputBufferPtr; cur: xmlDocPtr; const encoding: PAnsiChar; format: Longint); cdecl; external LIBXML2_SO;
  procedure htmlDocContentDumpOutput (buf: xmlOutputBufferPtr; cur: xmlDocPtr; const encoding: PAnsiChar); cdecl; external LIBXML2_SO;
  function htmlDocDump (f: PFILE; cur: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure htmlDocDumpMemory (cur: xmlDocPtr; mem: xmlCharPtrPtr; size: PInteger); cdecl; external LIBXML2_SO;
  procedure htmlDocDumpMemoryFormat (cur: xmlDocPtr; mem: xmlCharPtrPtr; size: PInteger; format: Longint); cdecl; external LIBXML2_SO;
  function htmlElementAllowedHere (const parent: htmlElemDescPtr; const elt: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function htmlElementStatusHere (const parent: htmlElemDescPtr; const elt: htmlElemDescPtr) : htmlStatus; cdecl; external LIBXML2_SO;
  function htmlEncodeEntities (out_: PByte; outlen: PInteger; const in_: PByte; inlen: PInteger; quoteChar: Longint) : Longint; cdecl; external LIBXML2_SO;
  function htmlEntityLookup (const name: xmlCharPtr) : htmlEntityDescPtr; cdecl; external LIBXML2_SO;
  function htmlEntityValueLookup (value: Cardinal) : htmlEntityDescPtr; cdecl; external LIBXML2_SO;
  procedure htmlFreeParserCtxt (ctxt: htmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function htmlGetMetaEncoding (doc: htmlDocPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function htmlHandleOmittedElem (val: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure htmlInitAutoClose (); cdecl; external LIBXML2_SO;
  function htmlIsAutoClosed (doc: htmlDocPtr; elem: htmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function htmlIsBooleanAttr (const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function htmlIsScriptAttribute (const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function htmlNewDoc (const URI: xmlCharPtr; const ExternalID: xmlCharPtr) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlNewDocNoDtD (const URI: xmlCharPtr; const ExternalID: xmlCharPtr) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlNodeDump (buf: xmlBufferPtr; doc: xmlDocPtr; cur: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  procedure htmlNodeDumpFile (out_: PFILE; doc: xmlDocPtr; cur: xmlNodePtr); cdecl; external LIBXML2_SO;
  function htmlNodeDumpFileFormat (out_: PFILE; doc: xmlDocPtr; cur: xmlNodePtr; const encoding: PAnsiChar; format: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure htmlNodeDumpFormatOutput (buf: xmlOutputBufferPtr; doc: xmlDocPtr; cur: xmlNodePtr; const encoding: PAnsiChar; format: Longint); cdecl; external LIBXML2_SO;
  procedure htmlNodeDumpOutput (buf: xmlOutputBufferPtr; doc: xmlDocPtr; cur: xmlNodePtr; const encoding: PAnsiChar); cdecl; external LIBXML2_SO;
  function htmlNodeStatus (const node: htmlNodePtr; legacy: Longint) : htmlStatus; cdecl; external LIBXML2_SO;
  function htmlParseCharRef (ctxt: htmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function htmlParseChunk (ctxt: htmlParserCtxtPtr; const chunk: PAnsiChar; size: Longint; terminate: Longint) : Longint; cdecl; external LIBXML2_SO;
  function htmlParseDoc (cur: xmlCharPtr; const encoding: PAnsiChar) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlParseDocument (ctxt: htmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure htmlParseElement (ctxt: htmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function htmlParseEntityRef (ctxt: htmlParserCtxtPtr; const str: xmlCharPtrPtr) : htmlEntityDescPtr; cdecl; external LIBXML2_SO;
  function htmlParseFile (const filename: PAnsiChar; const encoding: PAnsiChar) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlReadDoc (const cur: xmlCharPtr; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlReadFd (fd: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlReadFile (const filename: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlReadIO (ioread: xmlInputReadCallback; ioclose: xmlInputCloseCallback; ioctx: Pointer; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlReadMemory (const buffer: PAnsiChar; size: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlSAXParseDoc (cur: xmlCharPtr; const encoding: PAnsiChar; sax: htmlSAXHandlerPtr; userData: Pointer) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlSAXParseFile (const filename: PAnsiChar; const encoding: PAnsiChar; sax: htmlSAXHandlerPtr; userData: Pointer) : htmlDocPtr; cdecl; external LIBXML2_SO;
  function htmlSaveFile (const filename: PAnsiChar; cur: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function htmlSaveFileEnc (const filename: PAnsiChar; cur: xmlDocPtr; const encoding: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function htmlSaveFileFormat (const filename: PAnsiChar; cur: xmlDocPtr; const encoding: PAnsiChar; format: Longint) : Longint; cdecl; external LIBXML2_SO;
  function htmlSetMetaEncoding (doc: htmlDocPtr; const encoding: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function htmlTagLookup (const tag: xmlCharPtr) : htmlElemDescPtr; cdecl; external LIBXML2_SO;
  procedure ignorableWhitespace (ctx: Pointer; const ch: xmlCharPtr; len: Longint); cdecl; external LIBXML2_SO;
  procedure initGenericErrorDefaultFunc (handler: xmlGenericErrorFuncPtr); cdecl; external LIBXML2_SO;
  procedure initdocbDefaultSAXHandler (hdlr: xmlSAXHandlerV1Ptr); cdecl; external LIBXML2_SO;
  procedure inithtmlDefaultSAXHandler (hdlr: xmlSAXHandlerV1Ptr); cdecl; external LIBXML2_SO;
  procedure initxmlDefaultSAXHandler (hdlr: xmlSAXHandlerV1Ptr; warning: Longint); cdecl; external LIBXML2_SO;
  function inputPop (ctxt: xmlParserCtxtPtr) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  function inputPush (ctxt: xmlParserCtxtPtr; value: xmlParserInputPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure internalSubset (ctx: Pointer; const name: xmlCharPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr); cdecl; external LIBXML2_SO;
  function isStandalone (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function isolat1ToUTF8 (out_: PByte; outlen: PInteger; const in_: PByte; inlen: PInteger) : Longint; cdecl; external LIBXML2_SO;
  function namePop (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function namePush (ctxt: xmlParserCtxtPtr; const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure namespaceDecl (ctx: Pointer; const href: xmlCharPtr; const prefix: xmlCharPtr); cdecl; external LIBXML2_SO;
  function nodePop (ctxt: xmlParserCtxtPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function nodePush (ctxt: xmlParserCtxtPtr; value: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  procedure notationDecl (ctx: Pointer; const name: xmlCharPtr; const publicId: xmlCharPtr; const systemId: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure processingInstruction (ctx: Pointer; const target: xmlCharPtr; const data: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure reference (ctx: Pointer; const name: xmlCharPtr); cdecl; external LIBXML2_SO;
  function resolveEntity (ctx: Pointer; const publicId: xmlCharPtr; const systemId: xmlCharPtr) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  procedure setDocumentLocator (ctx: Pointer; loc: xmlSAXLocatorPtr); cdecl; external LIBXML2_SO;
  procedure setNamespace (ctx: Pointer; const name: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure startDocument (ctx: Pointer); cdecl; external LIBXML2_SO;
  procedure startElement (ctx: Pointer; const fullname: xmlCharPtr; const atts: xmlCharPtrPtr); cdecl; external LIBXML2_SO;
  procedure unparsedEntityDecl (ctx: Pointer; const name: xmlCharPtr; const publicId: xmlCharPtr; const systemId: xmlCharPtr; const notationName: xmlCharPtr); cdecl; external LIBXML2_SO;
  function valuePop (ctxt: xmlXPathParserContextPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function valuePush (ctxt: xmlXPathParserContextPtr; value: xmlXPathObjectPtr) : Longint; cdecl; external LIBXML2_SO;
  function xlinkGetDefaultDetect () : xlinkNodeDetectFunc; cdecl; external LIBXML2_SO;
  function xlinkGetDefaultHandler () : xlinkHandlerPtr; cdecl; external LIBXML2_SO;
  function xlinkIsLink (doc: xmlDocPtr; node: xmlNodePtr) : xlinkType; cdecl; external LIBXML2_SO;
  procedure xlinkSetDefaultDetect (func: xlinkNodeDetectFunc); cdecl; external LIBXML2_SO;
  procedure xlinkSetDefaultHandler (handler: xlinkHandlerPtr); cdecl; external LIBXML2_SO;
  function xmlACatalogAdd (catal: xmlCatalogPtr; const type_: xmlCharPtr; const orig: xmlCharPtr; const replace: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlACatalogDump (catal: xmlCatalogPtr; out_: PFILE); cdecl; external LIBXML2_SO;
  function xmlACatalogRemove (catal: xmlCatalogPtr; const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlACatalogResolve (catal: xmlCatalogPtr; const pubID: xmlCharPtr; const sysID: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlACatalogResolvePublic (catal: xmlCatalogPtr; const pubID: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlACatalogResolveSystem (catal: xmlCatalogPtr; const sysID: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlACatalogResolveURI (catal: xmlCatalogPtr; const URI: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlAddAttributeDecl (ctxt: xmlValidCtxtPtr; dtd: xmlDtdPtr; const elem: xmlCharPtr; const name: xmlCharPtr; const ns: xmlCharPtr; type_: xmlAttributeType; def: xmlAttributeDefault; const defaultValue: xmlCharPtr; tree: xmlEnumerationPtr) : xmlAttributePtr; cdecl; external LIBXML2_SO;
  function xmlAddChild (parent: xmlNodePtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlAddChildList (parent: xmlNodePtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlAddDocEntity (doc: xmlDocPtr; const name: xmlCharPtr; type_: Longint; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr; const content: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function xmlAddDtdEntity (doc: xmlDocPtr; const name: xmlCharPtr; type_: Longint; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr; const content: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function xmlAddElementDecl (ctxt: xmlValidCtxtPtr; dtd: xmlDtdPtr; const name: xmlCharPtr; type_: xmlElementTypeVal; content: xmlElementContentPtr) : xmlElementPtr; cdecl; external LIBXML2_SO;
  function xmlAddEncodingAlias (const name: PAnsiChar; const alias: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlAddID (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; const value: xmlCharPtr; attr: xmlAttrPtr) : xmlIDPtr; cdecl; external LIBXML2_SO;
  function xmlAddNextSibling (cur: xmlNodePtr; elem: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlAddNotationDecl (ctxt: xmlValidCtxtPtr; dtd: xmlDtdPtr; const name: xmlCharPtr; const PublicID: xmlCharPtr; const SystemID: xmlCharPtr) : xmlNotationPtr; cdecl; external LIBXML2_SO;
  function xmlAddPrevSibling (cur: xmlNodePtr; elem: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlAddRef (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; const value: xmlCharPtr; attr: xmlAttrPtr) : xmlRefPtr; cdecl; external LIBXML2_SO;
  function xmlAddSibling (cur: xmlNodePtr; elem: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlAllocOutputBuffer (encoder: xmlCharEncodingHandlerPtr) : xmlOutputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlAllocParserInputBuffer (enc: xmlCharEncoding) : xmlParserInputBufferPtr; cdecl; external LIBXML2_SO;
  procedure xmlAttrSerializeTxtContent (buf: xmlBufferPtr; doc: xmlDocPtr; attr: xmlAttrPtr; const string_: xmlCharPtr); cdecl; external LIBXML2_SO;
  function xmlAutomataCompile (am: xmlAutomataPtr) : xmlRegexpPtr; cdecl; external LIBXML2_SO;
  function xmlAutomataGetInitState (am: xmlAutomataPtr) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataIsDeterminist (am: xmlAutomataPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlAutomataNewAllTrans (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; lax: Longint) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewCountTrans (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; const token: xmlCharPtr; min: Longint; max: Longint; data: Pointer) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewCountTrans2 (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; const token: xmlCharPtr; const token2: xmlCharPtr; min: Longint; max: Longint; data: Pointer) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewCountedTrans (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; counter: Longint) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewCounter (am: xmlAutomataPtr; min: Longint; max: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlAutomataNewCounterTrans (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; counter: Longint) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewEpsilon (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewNegTrans (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; const token: xmlCharPtr; const token2: xmlCharPtr; data: Pointer) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewOnceTrans (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; const token: xmlCharPtr; min: Longint; max: Longint; data: Pointer) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewOnceTrans2 (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; const token: xmlCharPtr; const token2: xmlCharPtr; min: Longint; max: Longint; data: Pointer) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewState (am: xmlAutomataPtr) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewTransition (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; const token: xmlCharPtr; data: Pointer) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataNewTransition2 (am: xmlAutomataPtr; from: xmlAutomataStatePtr; to_: xmlAutomataStatePtr; const token: xmlCharPtr; const token2: xmlCharPtr; data: Pointer) : xmlAutomataStatePtr; cdecl; external LIBXML2_SO;
  function xmlAutomataSetFinalState (am: xmlAutomataPtr; state: xmlAutomataStatePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlBoolToText (boolval: Longint) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlBufferAdd (buf: xmlBufferPtr; const str: xmlCharPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlBufferAddHead (buf: xmlBufferPtr; const str: xmlCharPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlBufferCCat (buf: xmlBufferPtr; const str: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlBufferCat (buf: xmlBufferPtr; const str: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlBufferContent (const buf: xmlBufferPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlBufferCreate () : xmlBufferPtr; cdecl; external LIBXML2_SO;
  function xmlBufferCreateSize (size: size_t) : xmlBufferPtr; cdecl; external LIBXML2_SO;
  function xmlBufferCreateStatic (mem: Pointer; size: size_t) : xmlBufferPtr; cdecl; external LIBXML2_SO;
  function xmlBufferDump (file_: PFILE; buf: xmlBufferPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlBufferEmpty (buf: xmlBufferPtr); cdecl; external LIBXML2_SO;
  procedure xmlBufferFree (buf: xmlBufferPtr); cdecl; external LIBXML2_SO;
  function xmlBufferGrow (buf: xmlBufferPtr; len: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlBufferLength (const buf: xmlBufferPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlBufferResize (buf: xmlBufferPtr; size: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlBufferSetAllocationScheme (buf: xmlBufferPtr; scheme: xmlBufferAllocationScheme); cdecl; external LIBXML2_SO;
  function xmlBufferShrink (buf: xmlBufferPtr; len: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  //// procedure xmlBufferWriteCHAR (buf: xmlBufferPtr; const string_: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlBufferWriteChar (buf: xmlBufferPtr; const string_: PAnsiChar); cdecl; external LIBXML2_SO;
  procedure xmlBufferWriteQuotedString (buf: xmlBufferPtr; const string_: xmlCharPtr); cdecl; external LIBXML2_SO;
  function xmlBuildQName (const ncname: xmlCharPtr; const prefix: xmlCharPtr; memory: xmlCharPtr; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlBuildRelativeURI (const URI: xmlCharPtr; const base: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlBuildURI (const URI: xmlCharPtr; const base: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlByteConsumed (ctxt: xmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlC14NDocDumpMemory (doc: xmlDocPtr; nodes: xmlNodeSetPtr; exclusive: Longint; inclusive_ns_prefixes: xmlCharPtrPtr; with_comments: Longint; doc_txt_ptr: xmlCharPtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlC14NDocSave (doc: xmlDocPtr; nodes: xmlNodeSetPtr; exclusive: Longint; inclusive_ns_prefixes: xmlCharPtrPtr; with_comments: Longint; const filename: PAnsiChar; compression: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlC14NDocSaveTo (doc: xmlDocPtr; nodes: xmlNodeSetPtr; exclusive: Longint; inclusive_ns_prefixes: xmlCharPtrPtr; with_comments: Longint; buf: xmlOutputBufferPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlC14NExecute (doc: xmlDocPtr; is_visible_callback: xmlC14NIsVisibleCallback; user_data: Pointer; exclusive: Longint; inclusive_ns_prefixes: xmlCharPtrPtr; with_comments: Longint; buf: xmlOutputBufferPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCanonicPath (const path: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCatalogAdd (const type_: xmlCharPtr; const orig: xmlCharPtr; const replace: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCatalogAddLocal (catalogs: Pointer; const URL: xmlCharPtr) : Pointer; cdecl; external LIBXML2_SO;
  procedure xmlCatalogCleanup (); cdecl; external LIBXML2_SO;
  function xmlCatalogConvert () : Longint; cdecl; external LIBXML2_SO;
  procedure xmlCatalogDump (out_: PFILE); cdecl; external LIBXML2_SO;
  procedure xmlCatalogFreeLocal (catalogs: Pointer); cdecl; external LIBXML2_SO;
  function xmlCatalogGetDefaults () : xmlCatalogAllow; cdecl; external LIBXML2_SO;
  function xmlCatalogGetPublic (const pubID: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCatalogGetSystem (const sysID: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCatalogIsEmpty (catal: xmlCatalogPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCatalogLocalResolve (catalogs: Pointer; const pubID: xmlCharPtr; const sysID: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCatalogLocalResolveURI (catalogs: Pointer; const URI: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCatalogRemove (const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCatalogResolve (const pubID: xmlCharPtr; const sysID: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCatalogResolvePublic (const pubID: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCatalogResolveSystem (const sysID: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCatalogResolveURI (const URI: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCatalogSetDebug (level: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlCatalogSetDefaultPrefer (prefer: xmlCatalogPrefer) : xmlCatalogPrefer; cdecl; external LIBXML2_SO;
  procedure xmlCatalogSetDefaults (allow: xmlCatalogAllow); cdecl; external LIBXML2_SO;
  function xmlCharEncCloseFunc (handler: xmlCharEncodingHandlerPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCharEncFirstLine (handler: xmlCharEncodingHandlerPtr; out_: xmlBufferPtr; in_: xmlBufferPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCharEncInFunc (handler: xmlCharEncodingHandlerPtr; out_: xmlBufferPtr; in_: xmlBufferPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCharEncOutFunc (handler: xmlCharEncodingHandlerPtr; out_: xmlBufferPtr; in_: xmlBufferPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCharInRange (val: Cardinal; const rptr: xmlChRangeGroupPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCharStrdup (const cur: PAnsiChar) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCharStrndup (const cur: PAnsiChar; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlCheckFilename (const path: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlCheckHTTPInput (ctxt: xmlParserCtxtPtr; ret: xmlParserInputPtr) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  function xmlCheckLanguageID (const lang: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCheckUTF8 (const utf: PByte) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlCheckVersion (version: Longint); cdecl; external LIBXML2_SO;
  procedure xmlCleanuPAnsiCharEncodingHandlers (); cdecl; external LIBXML2_SO;
  procedure xmlCleanupEncodingAliases (); cdecl; external LIBXML2_SO;
  procedure xmlCleanupGlobals (); cdecl; external LIBXML2_SO;
  procedure xmlCleanupInputCallbacks (); cdecl; external LIBXML2_SO;
  procedure xmlCleanupMemory (); cdecl; external LIBXML2_SO;
  procedure xmlCleanupOutputCallbacks (); cdecl; external LIBXML2_SO;
  procedure xmlCleanupParser (); cdecl; external LIBXML2_SO;
  procedure xmlCleanupPredefinedEntities (); cdecl; external LIBXML2_SO;
  procedure xmlCleanupThreads (); cdecl; external LIBXML2_SO;
  procedure xmlClearNodeInfoSeq (seq: xmlParserNodeInfoSeqPtr); cdecl; external LIBXML2_SO;
  procedure xmlClearParserCtxt (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlConvertSGMLCatalog (catal: xmlCatalogPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCopyAttributeTable (table: xmlAttributeTablePtr) : xmlAttributeTablePtr; cdecl; external LIBXML2_SO;
  function xmlCopyChar (len: Longint; out_: xmlCharPtr; val: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlCopyCharMultiByte (out_: xmlCharPtr; val: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlCopyDoc (doc: xmlDocPtr; recursive: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlCopyDocElementContent (doc: xmlDocPtr; cur: xmlElementContentPtr) : xmlElementContentPtr; cdecl; external LIBXML2_SO;
  function xmlCopyDtd (dtd: xmlDtdPtr) : xmlDtdPtr; cdecl; external LIBXML2_SO;
  function xmlCopyElementContent (cur: xmlElementContentPtr) : xmlElementContentPtr; cdecl; external LIBXML2_SO;
  function xmlCopyElementTable (table: xmlElementTablePtr) : xmlElementTablePtr; cdecl; external LIBXML2_SO;
  function xmlCopyEntitiesTable (table: xmlEntitiesTablePtr) : xmlEntitiesTablePtr; cdecl; external LIBXML2_SO;
  function xmlCopyEnumeration (cur: xmlEnumerationPtr) : xmlEnumerationPtr; cdecl; external LIBXML2_SO;
  function xmlCopyError (from: xmlErrorPtr; to_: xmlErrorPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlCopyNamespace (cur: xmlNsPtr) : xmlNsPtr; cdecl; external LIBXML2_SO;
  function xmlCopyNamespaceList (cur: xmlNsPtr) : xmlNsPtr; cdecl; external LIBXML2_SO;
  function xmlCopyNode (const node: xmlNodePtr; extended: Longint) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlCopyNodeList (const node: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlCopyNotationTable (table: xmlNotationTablePtr) : xmlNotationTablePtr; cdecl; external LIBXML2_SO;
  function xmlCopyProp (target: xmlNodePtr; cur: xmlAttrPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlCopyPropList (target: xmlNodePtr; cur: xmlAttrPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlCreateDocParserCtxt (const cur: xmlCharPtr) : xmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlCreateEntitiesTable () : xmlEntitiesTablePtr; cdecl; external LIBXML2_SO;
  function xmlCreateEntityParserCtxt (const URL: xmlCharPtr; const ID: xmlCharPtr; const base: xmlCharPtr) : xmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlCreateEnumeration (const name: xmlCharPtr) : xmlEnumerationPtr; cdecl; external LIBXML2_SO;
  function xmlCreateFileParserCtxt (const filename: PAnsiChar) : xmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlCreateIOParserCtxt (sax: xmlSAXHandlerPtr; user_data: Pointer; ioread: xmlInputReadCallback; ioclose: xmlInputCloseCallback; ioctx: Pointer; enc: xmlCharEncoding) : xmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlCreateIntSubset (doc: xmlDocPtr; const name: xmlCharPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr) : xmlDtdPtr; cdecl; external LIBXML2_SO;
  function xmlCreateMemoryParserCtxt (const buffer: PAnsiChar; size: Longint) : xmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlCreatePushParserCtxt (sax: xmlSAXHandlerPtr; user_data: Pointer; const chunk: PAnsiChar; size: Longint; const filename: PAnsiChar) : xmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlCreateURI () : xmlURIPtr; cdecl; external LIBXML2_SO;
  function xmlCreateURLParserCtxt (const filename: PAnsiChar; options: Longint) : xmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlCtxtGetLastError (ctx: Pointer) : xmlErrorPtr; cdecl; external LIBXML2_SO;
  function xmlCtxtReadDoc (ctxt: xmlParserCtxtPtr; const cur: xmlCharPtr; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlCtxtReadFd (ctxt: xmlParserCtxtPtr; fd: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlCtxtReadFile (ctxt: xmlParserCtxtPtr; const filename: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlCtxtReadIO (ctxt: xmlParserCtxtPtr; ioread: xmlInputReadCallback; ioclose: xmlInputCloseCallback; ioctx: Pointer; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlCtxtReadMemory (ctxt: xmlParserCtxtPtr; const buffer: PAnsiChar; size: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  procedure xmlCtxtReset (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlCtxtResetLastError (ctx: Pointer); cdecl; external LIBXML2_SO;
  function xmlCtxtResetPush (ctxt: xmlParserCtxtPtr; const chunk: PAnsiChar; size: Longint; const filename: PAnsiChar; const encoding: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlCtxtUseOptions (ctxt: xmlParserCtxtPtr; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlCurrentChar (ctxt: xmlParserCtxtPtr; len: PInteger) : Longint; cdecl; external LIBXML2_SO;
  function xmlDOMWrapAdoptNode (ctxt: xmlDOMWrapCtxtPtr; sourceDoc: xmlDocPtr; node: xmlNodePtr; destDoc: xmlDocPtr; destParent: xmlNodePtr; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlDOMWrapCloneNode (ctxt: xmlDOMWrapCtxtPtr; sourceDoc: xmlDocPtr; node: xmlNodePtr; resNode: xmlNodePtrPtr; destDoc: xmlDocPtr; destParent: xmlNodePtr; deep: Longint; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlDOMWrapFreeCtxt (ctxt: xmlDOMWrapCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlDOMWrapNewCtxt () : xmlDOMWrapCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlDOMWrapReconcileNamespaces (ctxt: xmlDOMWrapCtxtPtr; elem: xmlNodePtr; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlDOMWrapRemoveNode (ctxt: xmlDOMWrapCtxtPtr; doc: xmlDocPtr; node: xmlNodePtr; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlDebugCheckDocument (output: PFILE; doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpAttr (output: PFILE; attr: xmlAttrPtr; depth: Longint); cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpAttrList (output: PFILE; attr: xmlAttrPtr; depth: Longint); cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpDTD (output: PFILE; dtd: xmlDtdPtr); cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpDocument (output: PFILE; doc: xmlDocPtr); cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpDocumentHead (output: PFILE; doc: xmlDocPtr); cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpEntities (output: PFILE; doc: xmlDocPtr); cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpNode (output: PFILE; node: xmlNodePtr; depth: Longint); cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpNodeList (output: PFILE; node: xmlNodePtr; depth: Longint); cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpOneNode (output: PFILE; node: xmlNodePtr; depth: Longint); cdecl; external LIBXML2_SO;
  procedure xmlDebugDumpString (output: PFILE; const str: xmlCharPtr); cdecl; external LIBXML2_SO;
  function xmlDecodeEntities (ctxt: xmlParserCtxtPtr; len: Longint; what: Longint; end_: xmlChar; end2: xmlChar; end3: xmlChar) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlDefaultSAXHandlerInit (); cdecl; external LIBXML2_SO;
  function xmlDelEncodingAlias (const alias: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlDeregisterNodeDefault (func: xmlDeregisterNodeFunc) : xmlDeregisterNodeFunc; cdecl; external LIBXML2_SO;
  function xmlDetectCharEncoding (const in_: PByte; len: Longint) : xmlCharEncoding; cdecl; external LIBXML2_SO;
  procedure xmlDictCleanup (); cdecl; external LIBXML2_SO;
  function xmlDictCreate () : xmlDictPtr; cdecl; external LIBXML2_SO;
  function xmlDictCreateSub (sub: xmlDictPtr) : xmlDictPtr; cdecl; external LIBXML2_SO;
  function xmlDictExists (dict: xmlDictPtr; const name: xmlCharPtr; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlDictFree (dict: xmlDictPtr); cdecl; external LIBXML2_SO;
  function xmlDictLookup (dict: xmlDictPtr; const name: xmlCharPtr; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlDictOwns (dict: xmlDictPtr; const str: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlDictQLookup (dict: xmlDictPtr; const prefix: xmlCharPtr; const name: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlDictReference (dict: xmlDictPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlDictSize (dict: xmlDictPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlDocCopyNode (const node: xmlNodePtr; doc: xmlDocPtr; extended: Longint) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlDocCopyNodeList (doc: xmlDocPtr; const node: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlDocDump (f: PFILE; cur: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlDocDumpFormatMemory (cur: xmlDocPtr; mem: xmlCharPtrPtr; size: PInteger; format: Longint); cdecl; external LIBXML2_SO;
  procedure xmlDocDumpFormatMemoryEnc (out_doc: xmlDocPtr; doc_txt_ptr: xmlCharPtrPtr; doc_txt_len: PInteger; const txt_encoding: PAnsiChar; format: Longint); cdecl; external LIBXML2_SO;
  procedure xmlDocDumpMemory (cur: xmlDocPtr; mem: xmlCharPtrPtr; size: PInteger); cdecl; external LIBXML2_SO;
  procedure xmlDocDumpMemoryEnc (out_doc: xmlDocPtr; doc_txt_ptr: xmlCharPtrPtr; doc_txt_len: PInteger; const txt_encoding: PAnsiChar); cdecl; external LIBXML2_SO;
  function xmlDocFormatDump (f: PFILE; cur: xmlDocPtr; format: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlDocGetRootElement (doc: xmlDocPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlDocSetRootElement (doc: xmlDocPtr; root: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  procedure xmlDumpAttributeDecl (buf: xmlBufferPtr; attr: xmlAttributePtr); cdecl; external LIBXML2_SO;
  procedure xmlDumpAttributeTable (buf: xmlBufferPtr; table: xmlAttributeTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlDumpElementDecl (buf: xmlBufferPtr; elem: xmlElementPtr); cdecl; external LIBXML2_SO;
  procedure xmlDumpElementTable (buf: xmlBufferPtr; table: xmlElementTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlDumpEntitiesTable (buf: xmlBufferPtr; table: xmlEntitiesTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlDumpEntityDecl (buf: xmlBufferPtr; ent: xmlEntityPtr); cdecl; external LIBXML2_SO;
  procedure xmlDumpNotationDecl (buf: xmlBufferPtr; nota: xmlNotationPtr); cdecl; external LIBXML2_SO;
  procedure xmlDumpNotationTable (buf: xmlBufferPtr; table: xmlNotationTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlElemDump (f: PFILE; doc: xmlDocPtr; cur: xmlNodePtr); cdecl; external LIBXML2_SO;
  function xmlEncodeEntities (doc: xmlDocPtr; const input: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlEncodeEntitiesReentrant (doc: xmlDocPtr; const input: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlEncodeSpecialChars (doc: xmlDocPtr; const input: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlErrMemory (ctxt: xmlParserCtxtPtr; const extra: PAnsiChar); cdecl; external LIBXML2_SO;
  function xmlExpCtxtNbCons (ctxt: xmlExpCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlExpCtxtNbNodes (ctxt: xmlExpCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlExpDump (buf: xmlBufferPtr; expr: xmlExpNodePtr); cdecl; external LIBXML2_SO;
  function xmlExpExpDerive (ctxt: xmlExpCtxtPtr; exp: xmlExpNodePtr; sub: xmlExpNodePtr) : xmlExpNodePtr; cdecl; external LIBXML2_SO;
  procedure xmlExpFree (ctxt: xmlExpCtxtPtr; exp: xmlExpNodePtr); cdecl; external LIBXML2_SO;
  procedure xmlExpFreeCtxt (ctxt: xmlExpCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlExpGetLanguage (ctxt: xmlExpCtxtPtr; exp: xmlExpNodePtr; const langList: xmlCharPtrPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlExpGetStart (ctxt: xmlExpCtxtPtr; exp: xmlExpNodePtr; const tokList: xmlCharPtrPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlExpIsNillable (exp: xmlExpNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlExpMaxToken (expr: xmlExpNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlExpNewAtom (ctxt: xmlExpCtxtPtr; const name: xmlCharPtr; len: Longint) : xmlExpNodePtr; cdecl; external LIBXML2_SO;
  function xmlExpNewCtxt (maxNodes: Longint; dict: xmlDictPtr) : xmlExpCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlExpNewOr (ctxt: xmlExpCtxtPtr; left: xmlExpNodePtr; right: xmlExpNodePtr) : xmlExpNodePtr; cdecl; external LIBXML2_SO;
  function xmlExpNewRange (ctxt: xmlExpCtxtPtr; subset: xmlExpNodePtr; min: Longint; max: Longint) : xmlExpNodePtr; cdecl; external LIBXML2_SO;
  function xmlExpNewSeq (ctxt: xmlExpCtxtPtr; left: xmlExpNodePtr; right: xmlExpNodePtr) : xmlExpNodePtr; cdecl; external LIBXML2_SO;
  function xmlExpParse (ctxt: xmlExpCtxtPtr; const expr: PAnsiChar) : xmlExpNodePtr; cdecl; external LIBXML2_SO;
  procedure xmlExpRef (exp: xmlExpNodePtr); cdecl; external LIBXML2_SO;
  function xmlExpStringDerive (ctxt: xmlExpCtxtPtr; exp: xmlExpNodePtr; const str: xmlCharPtr; len: Longint) : xmlExpNodePtr; cdecl; external LIBXML2_SO;
  function xmlExpSubsume (ctxt: xmlExpCtxtPtr; exp: xmlExpNodePtr; sub: xmlExpNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlFileClose (context: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlFileMatch (const filename: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlFileOpen (const filename: PAnsiChar) : Pointer; cdecl; external LIBXML2_SO;
  function xmlFileRead (context: Pointer; buffer: PAnsiChar; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlFindCharEncodingHandler (const name: PAnsiChar) : xmlCharEncodingHandlerPtr; cdecl; external LIBXML2_SO;
  procedure xmlFreeAttributeTable (table: xmlAttributeTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeAutomata (am: xmlAutomataPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeCatalog (catal: xmlCatalogPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeDoc (cur: xmlDocPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeDocElementContent (doc: xmlDocPtr; cur: xmlElementContentPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeDtd (cur: xmlDtdPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeElementContent (cur: xmlElementContentPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeElementTable (table: xmlElementTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeEntitiesTable (table: xmlEntitiesTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeEnumeration (cur: xmlEnumerationPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeIDTable (table: xmlIDTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeInputStream (input: xmlParserInputPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeMutex (tok: xmlMutexPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeNode (cur: xmlNodePtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeNodeList (cur: xmlNodePtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeNotationTable (table: xmlNotationTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeNs (cur: xmlNsPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeNsList (cur: xmlNsPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeParserCtxt (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeParserInputBuffer (in_: xmlParserInputBufferPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreePattern (comp: xmlPatternPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreePatternList (comp: xmlPatternPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeProp (cur: xmlAttrPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreePropList (cur: xmlAttrPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeRMutex (tok: xmlRMutexPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeRefTable (table: xmlRefTablePtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeStreamCtxt (stream: xmlStreamCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeTextReader (reader: xmlTextReaderPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeTextWriter (writer: xmlTextWriterPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeURI (uri: xmlURIPtr); cdecl; external LIBXML2_SO;
  procedure xmlFreeValidCtxt (cur: xmlValidCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlGcMemGet (freeFunc: xmlFreeFuncPtr; mallocFunc: xmlMallocFuncPtr; mallocAtomicFunc: xmlMallocFuncPtr; reallocFunc: xmlReallocFuncPtr; strdupFunc: xmlStrdupFuncPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlGcMemSetup (freeFunc: xmlFreeFunc; mallocFunc: xmlMallocFunc; mallocAtomicFunc: xmlMallocFunc; reallocFunc: xmlReallocFunc; strdupFunc: xmlStrdupFunc) : Longint; cdecl; external LIBXML2_SO;
  function xmlGetBufferAllocationScheme () : xmlBufferAllocationScheme; cdecl; external LIBXML2_SO;
  function xmlGetCharEncodingHandler (enc: xmlCharEncoding) : xmlCharEncodingHandlerPtr; cdecl; external LIBXML2_SO;
  function xmlGetCharEncodingName (enc: xmlCharEncoding) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlGetCompressMode () : Longint; cdecl; external LIBXML2_SO;
  function xmlGetDocCompressMode (doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlGetDocEntity (doc: xmlDocPtr; const name: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function xmlGetDtdAttrDesc (dtd: xmlDtdPtr; const elem: xmlCharPtr; const name: xmlCharPtr) : xmlAttributePtr; cdecl; external LIBXML2_SO;
  function xmlGetDtdElementDesc (dtd: xmlDtdPtr; const name: xmlCharPtr) : xmlElementPtr; cdecl; external LIBXML2_SO;
  function xmlGetDtdEntity (doc: xmlDocPtr; const name: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function xmlGetDtdNotationDesc (dtd: xmlDtdPtr; const name: xmlCharPtr) : xmlNotationPtr; cdecl; external LIBXML2_SO;
  function xmlGetDtdQAttrDesc (dtd: xmlDtdPtr; const elem: xmlCharPtr; const name: xmlCharPtr; const prefix: xmlCharPtr) : xmlAttributePtr; cdecl; external LIBXML2_SO;
  function xmlGetDtdQElementDesc (dtd: xmlDtdPtr; const name: xmlCharPtr; const prefix: xmlCharPtr) : xmlElementPtr; cdecl; external LIBXML2_SO;
  function xmlGetEncodingAlias (const alias: PAnsiChar) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlGetExternalEntityLoader () : xmlExternalEntityLoader; cdecl; external LIBXML2_SO;
  function xmlGetFeature (ctxt: xmlParserCtxtPtr; const name: PAnsiChar; result: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlGetFeaturesList (len: PInteger; const result: PPAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlGetGlobalState () : xmlGlobalStatePtr; cdecl; external LIBXML2_SO;
  function xmlGetID (doc: xmlDocPtr; const ID: xmlCharPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlGetIntSubset (doc: xmlDocPtr) : xmlDtdPtr; cdecl; external LIBXML2_SO;
  function xmlGetLastChild (parent: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlGetLastError () : xmlErrorPtr; cdecl; external LIBXML2_SO;
  function xmlGetLineNo (node: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlGetNoNsProp (node: xmlNodePtr; const name: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlGetNodePath (node: xmlNodePtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlGetNsList (doc: xmlDocPtr; node: xmlNodePtr) : xmlNsPtrPtr; cdecl; external LIBXML2_SO;
  function xmlGetNsProp (node: xmlNodePtr; const name: xmlCharPtr; const nameSpace: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlGetParameterEntity (doc: xmlDocPtr; const name: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function xmlGetPredefinedEntity (const name: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function xmlGetProp (node: xmlNodePtr; const name: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlGetRefs (doc: xmlDocPtr; const ID: xmlCharPtr) : xmlListPtr; cdecl; external LIBXML2_SO;
  function xmlGetThreadId () : Longint; cdecl; external LIBXML2_SO;
  function xmlGetUTF8Char (const utf: PByte; len: PInteger) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlHandleEntity (ctxt: xmlParserCtxtPtr; entity: xmlEntityPtr); cdecl; external LIBXML2_SO;
  function xmlHasFeature (feature: xmlFeature) : Longint; cdecl; external LIBXML2_SO;
  function xmlHasNsProp (node: xmlNodePtr; const name: xmlCharPtr; const nameSpace: xmlCharPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlHasProp (node: xmlNodePtr; const name: xmlCharPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlHashAddEntry (table: xmlHashTablePtr; const name: xmlCharPtr; userdata: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlHashAddEntry2 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr; userdata: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlHashAddEntry3 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr; const name3: xmlCharPtr; userdata: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlHashCopy (table: xmlHashTablePtr; f: xmlHashCopier) : xmlHashTablePtr; cdecl; external LIBXML2_SO;
  function xmlHashCreate (size: Longint) : xmlHashTablePtr; cdecl; external LIBXML2_SO;
  function xmlHashCreateDict (size: Longint; dict: xmlDictPtr) : xmlHashTablePtr; cdecl; external LIBXML2_SO;
  procedure xmlHashFree (table: xmlHashTablePtr; f: xmlHashDeallocator); cdecl; external LIBXML2_SO;
  function xmlHashLookup (table: xmlHashTablePtr; const name: xmlCharPtr) : Pointer; cdecl; external LIBXML2_SO;
  function xmlHashLookup2 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr) : Pointer; cdecl; external LIBXML2_SO;
  function xmlHashLookup3 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr; const name3: xmlCharPtr) : Pointer; cdecl; external LIBXML2_SO;
  function xmlHashQLookup (table: xmlHashTablePtr; const prefix: xmlCharPtr; const name: xmlCharPtr) : Pointer; cdecl; external LIBXML2_SO;
  function xmlHashQLookup2 (table: xmlHashTablePtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const prefix2: xmlCharPtr; const name2: xmlCharPtr) : Pointer; cdecl; external LIBXML2_SO;
  function xmlHashQLookup3 (table: xmlHashTablePtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const prefix2: xmlCharPtr; const name2: xmlCharPtr; const prefix3: xmlCharPtr; const name3: xmlCharPtr) : Pointer; cdecl; external LIBXML2_SO;
  function xmlHashRemoveEntry (table: xmlHashTablePtr; const name: xmlCharPtr; f: xmlHashDeallocator) : Longint; cdecl; external LIBXML2_SO;
  function xmlHashRemoveEntry2 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr; f: xmlHashDeallocator) : Longint; cdecl; external LIBXML2_SO;
  function xmlHashRemoveEntry3 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr; const name3: xmlCharPtr; f: xmlHashDeallocator) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlHashScan (table: xmlHashTablePtr; f: xmlHashScanner; data: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlHashScan3 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr; const name3: xmlCharPtr; f: xmlHashScanner; data: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlHashScanFull (table: xmlHashTablePtr; f: xmlHashScannerFull; data: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlHashScanFull3 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr; const name3: xmlCharPtr; f: xmlHashScannerFull; data: Pointer); cdecl; external LIBXML2_SO;
  function xmlHashSize (table: xmlHashTablePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlHashUpdateEntry (table: xmlHashTablePtr; const name: xmlCharPtr; userdata: Pointer; f: xmlHashDeallocator) : Longint; cdecl; external LIBXML2_SO;
  function xmlHashUpdateEntry2 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr; userdata: Pointer; f: xmlHashDeallocator) : Longint; cdecl; external LIBXML2_SO;
  function xmlHashUpdateEntry3 (table: xmlHashTablePtr; const name: xmlCharPtr; const name2: xmlCharPtr; const name3: xmlCharPtr; userdata: Pointer; f: xmlHashDeallocator) : Longint; cdecl; external LIBXML2_SO;
  function xmlIOFTPClose (context: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlIOFTPMatch (const filename: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlIOFTPOpen (const filename: PAnsiChar) : Pointer; cdecl; external LIBXML2_SO;
  function xmlIOFTPRead (context: Pointer; buffer: PAnsiChar; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlIOHTTPClose (context: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlIOHTTPMatch (const filename: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlIOHTTPOpen (const filename: PAnsiChar) : Pointer; cdecl; external LIBXML2_SO;
  function xmlIOHTTPOpenW (const post_uri: PAnsiChar; compression: Longint) : Pointer; cdecl; external LIBXML2_SO;
  function xmlIOHTTPRead (context: Pointer; buffer: PAnsiChar; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlIOParseDTD (sax: xmlSAXHandlerPtr; input: xmlParserInputBufferPtr; enc: xmlCharEncoding) : xmlDtdPtr; cdecl; external LIBXML2_SO;
  procedure xmlInitCharEncodingHandlers (); cdecl; external LIBXML2_SO;
  procedure xmlInitGlobals (); cdecl; external LIBXML2_SO;
  function xmlInitMemory () : Longint; cdecl; external LIBXML2_SO;
  procedure xmlInitNodeInfoSeq (seq: xmlParserNodeInfoSeqPtr); cdecl; external LIBXML2_SO;
  procedure xmlInitParser (); cdecl; external LIBXML2_SO;
  function xmlInitParserCtxt (ctxt: xmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlInitThreads (); cdecl; external LIBXML2_SO;
  procedure xmlInitializeCatalog (); cdecl; external LIBXML2_SO;
  procedure xmlInitializeGlobalState (gs: xmlGlobalStatePtr); cdecl; external LIBXML2_SO;
  procedure xmlInitializePredefinedEntities (); cdecl; external LIBXML2_SO;
  function xmlIsBaseChar (ch: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsBlank (ch: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsBlankNode (node: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsChar (ch: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsCombining (ch: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsDigit (ch: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsExtender (ch: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsID (doc: xmlDocPtr; elem: xmlNodePtr; attr: xmlAttrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsIdeographic (ch: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsLetter (c: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsMainThread () : Longint; cdecl; external LIBXML2_SO;
  function xmlIsMixedElement (doc: xmlDocPtr; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsPubidChar (ch: Cardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsRef (doc: xmlDocPtr; elem: xmlNodePtr; attr: xmlAttrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlIsXHTML (const systemID: xmlCharPtr; const publicID: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlKeepBlanksDefault (val: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlLineNumbersDefault (val: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlLinkGetData (lk: xmlLinkPtr) : Pointer; cdecl; external LIBXML2_SO;
  function xmlListAppend (l: xmlListPtr; data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlListClear (l: xmlListPtr); cdecl; external LIBXML2_SO;
  function xmlListCopy (cur: xmlListPtr; const old: xmlListPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlListCreate (deallocator: xmlListDeallocator; compare: xmlListDataCompare) : xmlListPtr; cdecl; external LIBXML2_SO;
  procedure xmlListDelete (l: xmlListPtr); cdecl; external LIBXML2_SO;
  function xmlListDup (const old: xmlListPtr) : xmlListPtr; cdecl; external LIBXML2_SO;
  function xmlListEmpty (l: xmlListPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlListEnd (l: xmlListPtr) : xmlLinkPtr; cdecl; external LIBXML2_SO;
  function xmlListFront (l: xmlListPtr) : xmlLinkPtr; cdecl; external LIBXML2_SO;
  function xmlListInsert (l: xmlListPtr; data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlListMerge (l1: xmlListPtr; l2: xmlListPtr); cdecl; external LIBXML2_SO;
  procedure xmlListPopBack (l: xmlListPtr); cdecl; external LIBXML2_SO;
  procedure xmlListPopFront (l: xmlListPtr); cdecl; external LIBXML2_SO;
  function xmlListPushBack (l: xmlListPtr; data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlListPushFront (l: xmlListPtr; data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlListRemoveAll (l: xmlListPtr; data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlListRemoveFirst (l: xmlListPtr; data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlListRemoveLast (l: xmlListPtr; data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlListReverse (l: xmlListPtr); cdecl; external LIBXML2_SO;
  function xmlListReverseSearch (l: xmlListPtr; data: Pointer) : Pointer; cdecl; external LIBXML2_SO;
  procedure xmlListReverseWalk (l: xmlListPtr; walker: xmlListWalker; const user: Pointer); cdecl; external LIBXML2_SO;
  function xmlListSearch (l: xmlListPtr; data: Pointer) : Pointer; cdecl; external LIBXML2_SO;
  function xmlListSize (l: xmlListPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlListSort (l: xmlListPtr); cdecl; external LIBXML2_SO;
  procedure xmlListWalk (l: xmlListPtr; walker: xmlListWalker; const user: Pointer); cdecl; external LIBXML2_SO;
  function xmlLoadACatalog (const filename: PAnsiChar) : xmlCatalogPtr; cdecl; external LIBXML2_SO;
  function xmlLoadCatalog (const filename: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlLoadCatalogs (const pathss: PAnsiChar); cdecl; external LIBXML2_SO;
  function xmlLoadExternalEntity (const URL: PAnsiChar; const ID: PAnsiChar; ctxt: xmlParserCtxtPtr) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  function xmlLoadSGMLSuperCatalog (const filename: PAnsiChar) : xmlCatalogPtr; cdecl; external LIBXML2_SO;
  procedure xmlLockLibrary (); cdecl; external LIBXML2_SO;
  function xmlLsCountNode (node: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlLsOneNode (output: PFILE; node: xmlNodePtr); cdecl; external LIBXML2_SO;
  function xmlMallocAtomicLoc (size: size_t; const file_: PAnsiChar; line: Longint) : Pointer; cdecl; external LIBXML2_SO;
  function xmlMallocLoc (size: size_t; const file_: PAnsiChar; line: Longint) : Pointer; cdecl; external LIBXML2_SO;
  function xmlMemBlocks () : Longint; cdecl; external LIBXML2_SO;
  procedure xmlMemDisplay (fp: PFILE); cdecl; external LIBXML2_SO;
  procedure xmlMemFree (ptr: Pointer); cdecl; external LIBXML2_SO;
  function xmlMemGet (freeFunc: xmlFreeFuncPtr; mallocFunc: xmlMallocFuncPtr; reallocFunc: xmlReallocFuncPtr; strdupFunc: xmlStrdupFuncPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlMemMalloc (size: size_t) : Pointer; cdecl; external LIBXML2_SO;
  function xmlMemRealloc (ptr: Pointer; size: size_t) : Pointer; cdecl; external LIBXML2_SO;
  function xmlMemSetup (freeFunc: xmlFreeFunc; mallocFunc: xmlMallocFunc; reallocFunc: xmlReallocFunc; strdupFunc: xmlStrdupFunc) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlMemShow (fp: PFILE; nr: Longint); cdecl; external LIBXML2_SO;
  function xmlMemStrdupLoc (const str: PAnsiChar; const file_: PAnsiChar; line: Longint) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlMemUsed () : Longint; cdecl; external LIBXML2_SO;
  procedure xmlMemoryDump (); cdecl; external LIBXML2_SO;
  function xmlMemoryStrdup (const str: PAnsiChar) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlModuleClose (module: xmlModulePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlModuleFree (module: xmlModulePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlModuleOpen (const name: PAnsiChar; options: Longint) : xmlModulePtr; cdecl; external LIBXML2_SO;
  function xmlModuleSymbol (module: xmlModulePtr; const name: PAnsiChar; symbol: PPointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlMutexLock (tok: xmlMutexPtr); cdecl; external LIBXML2_SO;
  procedure xmlMutexUnlock (tok: xmlMutexPtr); cdecl; external LIBXML2_SO;
  function xmlNamespaceParseNCName (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlNamespaceParseNSDef (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlNamespaceParseQName (ctxt: xmlParserCtxtPtr; prefix: xmlCharPtrPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlNanoFTPCheckResponse (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlNanoFTPCleanup (); cdecl; external LIBXML2_SO;
  function xmlNanoFTPClose (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoFTPCloseConnection (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoFTPConnect (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoFTPConnectTo (const server: PAnsiChar; port: Longint) : Pointer; cdecl; external LIBXML2_SO;
  function xmlNanoFTPCwd (ctx: Pointer; const directory: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoFTPDele (ctx: Pointer; const file_: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlNanoFTPFreeCtxt (ctx: Pointer); cdecl; external LIBXML2_SO;
  function xmlNanoFTPGet (ctx: Pointer; callback: ftpDataCallback; userData: Pointer; const filename: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoFTPGetConnection (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoFTPGetResponse (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoFTPGetSocket (ctx: Pointer; const filename: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlNanoFTPInit (); cdecl; external LIBXML2_SO;
  function xmlNanoFTPList (ctx: Pointer; callback: ftpListCallback; userData: Pointer; const filename: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoFTPNewCtxt (const URL: PAnsiChar) : Pointer; cdecl; external LIBXML2_SO;
  function xmlNanoFTPOpen (const URL: PAnsiChar) : Pointer; cdecl; external LIBXML2_SO;
  procedure xmlNanoFTPProxy (const host: PAnsiChar; port: Longint; const user: PAnsiChar; const passwd: PAnsiChar; type_: Longint); cdecl; external LIBXML2_SO;
  function xmlNanoFTPQuit (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoFTPRead (ctx: Pointer; dest: Pointer; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlNanoFTPScanProxy (const URL: PAnsiChar); cdecl; external LIBXML2_SO;
  function xmlNanoFTPUpdateURL (ctx: Pointer; const URL: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPAuthHeader (ctx: Pointer) : PAnsiChar; cdecl; external LIBXML2_SO;
  procedure xmlNanoHTTPCleanup (); cdecl; external LIBXML2_SO;
  procedure xmlNanoHTTPClose (ctx: Pointer); cdecl; external LIBXML2_SO;
  function xmlNanoHTTPContentLength (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPEncoding (ctx: Pointer) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPFetch (const URL: PAnsiChar; const filename: PAnsiChar; contentType: PPAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlNanoHTTPInit (); cdecl; external LIBXML2_SO;
  function xmlNanoHTTPMethod (const URL: PAnsiChar; const method: PAnsiChar; const input: PAnsiChar; contentType: PPAnsiChar; const headers: PAnsiChar; ilen: Longint) : Pointer; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPMethodRedir (const URL: PAnsiChar; const method: PAnsiChar; const input: PAnsiChar; contentType: PPAnsiChar; redir: PPAnsiChar; const headers: PAnsiChar; ilen: Longint) : Pointer; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPMimeType (ctx: Pointer) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPOpen (const URL: PAnsiChar; contentType: PPAnsiChar) : Pointer; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPOpenRedir (const URL: PAnsiChar; contentType: PPAnsiChar; redir: PPAnsiChar) : Pointer; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPRead (ctx: Pointer; dest: Pointer; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPRedir (ctx: Pointer) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPReturnCode (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlNanoHTTPSave (ctxt: Pointer; const filename: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlNanoHTTPScanProxy (const URL: PAnsiChar); cdecl; external LIBXML2_SO;
  function xmlNewAutomata () : xmlAutomataPtr; cdecl; external LIBXML2_SO;
  function xmlNewCDataBlock (doc: xmlDocPtr; const content: xmlCharPtr; len: Longint) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewCatalog (sgml: Longint) : xmlCatalogPtr; cdecl; external LIBXML2_SO;
  function xmlNewCharEncodingHandler (const name: PAnsiChar; input: xmlCharEncodingInputFunc; output: xmlCharEncodingOutputFunc) : xmlCharEncodingHandlerPtr; cdecl; external LIBXML2_SO;
  function xmlNewCharRef (doc: xmlDocPtr; const name: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewChild (parent: xmlNodePtr; ns: xmlNsPtr; const name: xmlCharPtr; const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewComment (const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewDoc (const version: xmlCharPtr) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlNewDocComment (doc: xmlDocPtr; const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewDocElementContent (doc: xmlDocPtr; const name: xmlCharPtr; type_: xmlElementContentType) : xmlElementContentPtr; cdecl; external LIBXML2_SO;
  function xmlNewDocFragment (doc: xmlDocPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewDocNode (doc: xmlDocPtr; ns: xmlNsPtr; const name: xmlCharPtr; const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewDocNodeEatName (doc: xmlDocPtr; ns: xmlNsPtr; name: xmlCharPtr; const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewDocPI (doc: xmlDocPtr; const name: xmlCharPtr; const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewDocProp (doc: xmlDocPtr; const name: xmlCharPtr; const value: xmlCharPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlNewDocRawNode (doc: xmlDocPtr; ns: xmlNsPtr; const name: xmlCharPtr; const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewDocText (doc: xmlDocPtr; const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewDocTextLen (doc: xmlDocPtr; const content: xmlCharPtr; len: Longint) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewDtd (doc: xmlDocPtr; const name: xmlCharPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr) : xmlDtdPtr; cdecl; external LIBXML2_SO;
  function xmlNewElementContent (const name: xmlCharPtr; type_: xmlElementContentType) : xmlElementContentPtr; cdecl; external LIBXML2_SO;
  function xmlNewEntityInputStream (ctxt: xmlParserCtxtPtr; entity: xmlEntityPtr) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  function xmlNewGlobalNs (doc: xmlDocPtr; const href: xmlCharPtr; const prefix: xmlCharPtr) : xmlNsPtr; cdecl; external LIBXML2_SO;
  function xmlNewIOInputStream (ctxt: xmlParserCtxtPtr; input: xmlParserInputBufferPtr; enc: xmlCharEncoding) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  function xmlNewInputFromFile (ctxt: xmlParserCtxtPtr; const filename: PAnsiChar) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  function xmlNewInputStream (ctxt: xmlParserCtxtPtr) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  function xmlNewMutex () : xmlMutexPtr; cdecl; external LIBXML2_SO;
  function xmlNewNode (ns: xmlNsPtr; const name: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewNodeEatName (ns: xmlNsPtr; name: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewNs (node: xmlNodePtr; const href: xmlCharPtr; const prefix: xmlCharPtr) : xmlNsPtr; cdecl; external LIBXML2_SO;
  function xmlNewNsProp (node: xmlNodePtr; ns: xmlNsPtr; const name: xmlCharPtr; const value: xmlCharPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlNewNsPropEatName (node: xmlNodePtr; ns: xmlNsPtr; name: xmlCharPtr; const value: xmlCharPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlNewPI (const name: xmlCharPtr; const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewParserCtxt () : xmlParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlNewProp (node: xmlNodePtr; const name: xmlCharPtr; const value: xmlCharPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlNewRMutex () : xmlRMutexPtr; cdecl; external LIBXML2_SO;
  function xmlNewReference (doc: xmlDocPtr; const name: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewStringInputStream (ctxt: xmlParserCtxtPtr; const buffer: xmlCharPtr) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  function xmlNewText (const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewTextChild (parent: xmlNodePtr; ns: xmlNsPtr; const name: xmlCharPtr; const content: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewTextLen (const content: xmlCharPtr; len: Longint) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlNewTextReader (input: xmlParserInputBufferPtr; const URI: PAnsiChar) : xmlTextReaderPtr; cdecl; external LIBXML2_SO;
  function xmlNewTextReaderFilename (const URI: PAnsiChar) : xmlTextReaderPtr; cdecl; external LIBXML2_SO;
  function xmlNewTextWriter (out_: xmlOutputBufferPtr) : xmlTextWriterPtr; cdecl; external LIBXML2_SO;
  function xmlNewTextWriterDoc (doc: xmlDocPtrPtr; compression: Longint) : xmlTextWriterPtr; cdecl; external LIBXML2_SO;
  function xmlNewTextWriterFilename (const uri: PAnsiChar; compression: Longint) : xmlTextWriterPtr; cdecl; external LIBXML2_SO;
  function xmlNewTextWriterMemory (buf: xmlBufferPtr; compression: Longint) : xmlTextWriterPtr; cdecl; external LIBXML2_SO;
  function xmlNewTextWriterPushParser (ctxt: xmlParserCtxtPtr; compression: Longint) : xmlTextWriterPtr; cdecl; external LIBXML2_SO;
  function xmlNewTextWriterTree (doc: xmlDocPtr; node: xmlNodePtr; compression: Longint) : xmlTextWriterPtr; cdecl; external LIBXML2_SO;
  function xmlNewValidCtxt () : xmlValidCtxtPtr; cdecl; external LIBXML2_SO;
  procedure xmlNextChar (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlNoNetExternalEntityLoader (const URL: PAnsiChar; const ID: PAnsiChar; ctxt: xmlParserCtxtPtr) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  procedure xmlNodeAddContent (cur: xmlNodePtr; const content: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlNodeAddContentLen (cur: xmlNodePtr; const content: xmlCharPtr; len: Longint); cdecl; external LIBXML2_SO;
  function xmlNodeBufGetContent (buffer: xmlBufferPtr; cur: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlNodeDump (buf: xmlBufferPtr; doc: xmlDocPtr; cur: xmlNodePtr; level: Longint; format: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlNodeDumpOutput (buf: xmlOutputBufferPtr; doc: xmlDocPtr; cur: xmlNodePtr; level: Longint; format: Longint; const encoding: PAnsiChar); cdecl; external LIBXML2_SO;
  function xmlNodeGetBase (doc: xmlDocPtr; cur: xmlNodePtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlNodeGetContent (cur: xmlNodePtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlNodeGetLang (cur: xmlNodePtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlNodeGetSpacePreserve (cur: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlNodeIsText (node: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlNodeListGetRawString (doc: xmlDocPtr; list: xmlNodePtr; inLine_: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlNodeListGetString (doc: xmlDocPtr; list: xmlNodePtr; inLine_: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlNodeSetBase (cur: xmlNodePtr; const uri: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlNodeSetContent (cur: xmlNodePtr; const content: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlNodeSetContentLen (cur: xmlNodePtr; const content: xmlCharPtr; len: Longint); cdecl; external LIBXML2_SO;
  procedure xmlNodeSetLang (cur: xmlNodePtr; const lang: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlNodeSetName (cur: xmlNodePtr; const name: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlNodeSetSpacePreserve (cur: xmlNodePtr; val: Longint); cdecl; external LIBXML2_SO;
  function xmlNormalizeURIPath (path: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlNormalizeWindowsPath (const path: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlOutputBufferClose (out_: xmlOutputBufferPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlOutputBufferCreateBuffer (buffer: xmlBufferPtr; encoder: xmlCharEncodingHandlerPtr) : xmlOutputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlOutputBufferCreateFd (fd: Longint; encoder: xmlCharEncodingHandlerPtr) : xmlOutputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlOutputBufferCreateFile (file_: PFILE; encoder: xmlCharEncodingHandlerPtr) : xmlOutputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlOutputBufferCreateFilename (const URI: PAnsiChar; encoder: xmlCharEncodingHandlerPtr; compression: Longint) : xmlOutputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlOutputBufferCreateFilenameDefault (func: xmlOutputBufferCreateFilenameFunc) : xmlOutputBufferCreateFilenameFunc; cdecl; external LIBXML2_SO;
  function xmlOutputBufferCreateIO (iowrite: xmlOutputWriteCallback; ioclose: xmlOutputCloseCallback; ioctx: Pointer; encoder: xmlCharEncodingHandlerPtr) : xmlOutputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlOutputBufferFlush (out_: xmlOutputBufferPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlOutputBufferWrite (out_: xmlOutputBufferPtr; len: Longint; const buf: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlOutputBufferWriteEscape (out_: xmlOutputBufferPtr; const str: xmlCharPtr; escaping: xmlCharEncodingOutputFunc) : Longint; cdecl; external LIBXML2_SO;
  function xmlOutputBufferWriteString (out_: xmlOutputBufferPtr; const str: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseAttValue (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlParseAttribute (ctxt: xmlParserCtxtPtr; value: xmlCharPtrPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseAttributeListDecl (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseAttributeType (ctxt: xmlParserCtxtPtr; tree: xmlEnumerationPtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseBalancedChunkMemory (doc: xmlDocPtr; sax: xmlSAXHandlerPtr; user_data: Pointer; depth: Longint; const string_: xmlCharPtr; lst: xmlNodePtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseBalancedChunkMemoryRecover (doc: xmlDocPtr; sax: xmlSAXHandlerPtr; user_data: Pointer; depth: Longint; const string_: xmlCharPtr; lst: xmlNodePtrPtr; recover: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlParseCDSect (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseCatalogFile (const filename: PAnsiChar) : xmlDocPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseCharData (ctxt: xmlParserCtxtPtr; cdata: Longint); cdecl; external LIBXML2_SO;
  function xmlParseCharEncoding (const name: PAnsiChar) : xmlCharEncoding; cdecl; external LIBXML2_SO;
  function xmlParseCharRef (ctxt: xmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseChunk (ctxt: xmlParserCtxtPtr; const chunk: PAnsiChar; size: Longint; terminate: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlParseComment (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlParseContent (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseCtxtExternalEntity (ctx: xmlParserCtxtPtr; const URL: xmlCharPtr; const ID: xmlCharPtr; lst: xmlNodePtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseDTD (const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr) : xmlDtdPtr; cdecl; external LIBXML2_SO;
  function xmlParseDefaultDecl (ctxt: xmlParserCtxtPtr; value: xmlCharPtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseDoc (const cur: xmlCharPtr) : xmlDocPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseDocTypeDecl (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseDocument (ctxt: xmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlParseElement (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseElementChildrenContentDecl (ctxt: xmlParserCtxtPtr; inputchk: Longint) : xmlElementContentPtr; cdecl; external LIBXML2_SO;
  function xmlParseElementContentDecl (ctxt: xmlParserCtxtPtr; const name: xmlCharPtr; result: xmlElementContentPtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseElementDecl (ctxt: xmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseElementMixedContentDecl (ctxt: xmlParserCtxtPtr; inputchk: Longint) : xmlElementContentPtr; cdecl; external LIBXML2_SO;
  function xmlParseEncName (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlParseEncodingDecl (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseEndTag (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseEntity (const filename: PAnsiChar) : xmlDocPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseEntityDecl (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseEntityRef (ctxt: xmlParserCtxtPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function xmlParseEntityValue (ctxt: xmlParserCtxtPtr; orig: xmlCharPtrPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlParseEnumeratedType (ctxt: xmlParserCtxtPtr; tree: xmlEnumerationPtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseEnumerationType (ctxt: xmlParserCtxtPtr) : xmlEnumerationPtr; cdecl; external LIBXML2_SO;
  function xmlParseExtParsedEnt (ctxt: xmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseExternalEntity (doc: xmlDocPtr; sax: xmlSAXHandlerPtr; user_data: Pointer; depth: Longint; const URL: xmlCharPtr; const ID: xmlCharPtr; lst: xmlNodePtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseExternalID (ctxt: xmlParserCtxtPtr; publicID: xmlCharPtrPtr; strict: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseExternalSubset (ctxt: xmlParserCtxtPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr); cdecl; external LIBXML2_SO;
  function xmlParseFile (const filename: PAnsiChar) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlParseInNodeContext (node: xmlNodePtr; const data: PAnsiChar; datalen: Longint; options: Longint; lst: xmlNodePtrPtr) : xmlParserErrors; cdecl; external LIBXML2_SO;
  procedure xmlParseMarkupDecl (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseMemory (const buffer: PAnsiChar; size: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseMisc (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseName (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseNamespace (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseNmtoken (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseNotationDecl (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseNotationType (ctxt: xmlParserCtxtPtr) : xmlEnumerationPtr; cdecl; external LIBXML2_SO;
  procedure xmlParsePEReference (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlParsePI (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParsePITarget (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlParsePubidLiteral (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlParseQuotedString (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseReference (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseSDDecl (ctxt: xmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseStartTag (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlParseSystemLiteral (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseTextDecl (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParseURI (const str: PAnsiChar) : xmlURIPtr; cdecl; external LIBXML2_SO;
  function xmlParseURIRaw (const str: PAnsiChar; raw: Longint) : xmlURIPtr; cdecl; external LIBXML2_SO;
  function xmlParseURIReference (uri: xmlURIPtr; const str: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlParseVersionInfo (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlParseVersionNum (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlParseXMLDecl (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlParserAddNodeInfo (ctxt: xmlParserCtxtPtr; const info: xmlParserNodeInfoPtr); cdecl; external LIBXML2_SO;
  procedure xmlParserError (ctx: Pointer; const msg: PAnsiChar); cdecl; varargs; external LIBXML2_SO;
  function xmlParserFindNodeInfo (const ctx: xmlParserCtxtPtr; const node: xmlNodePtr) : xmlParserNodeInfoPtr; cdecl; external LIBXML2_SO;
  function xmlParserFindNodeInfoIndex (const seq: xmlParserNodeInfoSeqPtr; const node: xmlNodePtr) : Cardinal; cdecl; external LIBXML2_SO;
  function xmlParserGetDirectory (const filename: PAnsiChar) : PAnsiChar; cdecl; external LIBXML2_SO;
  procedure xmlParserHandlePEReference (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlParserHandleReference (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlParserInputBufferCreateFd (fd: Longint; enc: xmlCharEncoding) : xmlParserInputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlParserInputBufferCreateFile (file_: PFILE; enc: xmlCharEncoding) : xmlParserInputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlParserInputBufferCreateFilename (const URI: PAnsiChar; enc: xmlCharEncoding) : xmlParserInputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlParserInputBufferCreateFilenameDefault (func: xmlParserInputBufferCreateFilenameFunc) : xmlParserInputBufferCreateFilenameFunc; cdecl; external LIBXML2_SO;
  function xmlParserInputBufferCreateIO (ioread: xmlInputReadCallback; ioclose: xmlInputCloseCallback; ioctx: Pointer; enc: xmlCharEncoding) : xmlParserInputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlParserInputBufferCreateMem (const mem: PAnsiChar; size: Longint; enc: xmlCharEncoding) : xmlParserInputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlParserInputBufferCreateStatic (const mem: PAnsiChar; size: Longint; enc: xmlCharEncoding) : xmlParserInputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlParserInputBufferGrow (in_: xmlParserInputBufferPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlParserInputBufferPush (in_: xmlParserInputBufferPtr; len: Longint; const buf: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlParserInputBufferRead (in_: xmlParserInputBufferPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlParserInputGrow (in_: xmlParserInputPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlParserInputRead (in_: xmlParserInputPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlParserInputShrink (in_: xmlParserInputPtr); cdecl; external LIBXML2_SO;
  procedure xmlParserPrintFileContext (input: xmlParserInputPtr); cdecl; external LIBXML2_SO;
  procedure xmlParserPrintFileInfo (input: xmlParserInputPtr); cdecl; external LIBXML2_SO;
  procedure xmlParserValidityError (ctx: Pointer; const msg: PAnsiChar); cdecl; varargs; external LIBXML2_SO;
  procedure xmlParserValidityWarning (ctx: Pointer; const msg: PAnsiChar); cdecl; varargs; external LIBXML2_SO;
  procedure xmlParserWarning (ctx: Pointer; const msg: PAnsiChar); cdecl; varargs; external LIBXML2_SO;
  function xmlPatternFromRoot (comp: xmlPatternPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlPatternGetStreamCtxt (comp: xmlPatternPtr) : xmlStreamCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlPatternMatch (comp: xmlPatternPtr; node: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlPatternMaxDepth (comp: xmlPatternPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlPatternMinDepth (comp: xmlPatternPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlPatternStreamable (comp: xmlPatternPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlPatterncompile (const pattern: xmlCharPtr; dict: xmlDictPtr; flags: Longint; const namespaces: xmlCharPtrPtr) : xmlPatternPtr; cdecl; external LIBXML2_SO;
  function xmlPedanticParserDefault (val: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlPopInput (ctxt: xmlParserCtxtPtr) : xmlChar; cdecl; external LIBXML2_SO;
  function xmlPopInputCallbacks () : Longint; cdecl; external LIBXML2_SO;
  procedure xmlPrintURI (stream: PFILE; uri: xmlURIPtr); cdecl; external LIBXML2_SO;
  procedure xmlPushInput (ctxt: xmlParserCtxtPtr; input: xmlParserInputPtr); cdecl; external LIBXML2_SO;
  procedure xmlRMutexLock (tok: xmlRMutexPtr); cdecl; external LIBXML2_SO;
  procedure xmlRMutexUnlock (tok: xmlRMutexPtr); cdecl; external LIBXML2_SO;
  function xmlReadDoc (const cur: xmlCharPtr; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlReadFd (fd: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlReadFile (const filename: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlReadIO (ioread: xmlInputReadCallback; ioclose: xmlInputCloseCallback; ioctx: Pointer; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlReadMemory (const buffer: PAnsiChar; size: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlReaderForDoc (const cur: xmlCharPtr; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlTextReaderPtr; cdecl; external LIBXML2_SO;
  function xmlReaderForFd (fd: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlTextReaderPtr; cdecl; external LIBXML2_SO;
  function xmlReaderForFile (const filename: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlTextReaderPtr; cdecl; external LIBXML2_SO;
  function xmlReaderForIO (ioread: xmlInputReadCallback; ioclose: xmlInputCloseCallback; ioctx: Pointer; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlTextReaderPtr; cdecl; external LIBXML2_SO;
  function xmlReaderForMemory (const buffer: PAnsiChar; size: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlTextReaderPtr; cdecl; external LIBXML2_SO;
  function xmlReaderNewDoc (reader: xmlTextReaderPtr; const cur: xmlCharPtr; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlReaderNewFd (reader: xmlTextReaderPtr; fd: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlReaderNewFile (reader: xmlTextReaderPtr; const filename: PAnsiChar; const encoding: PAnsiChar; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlReaderNewIO (reader: xmlTextReaderPtr; ioread: xmlInputReadCallback; ioclose: xmlInputCloseCallback; ioctx: Pointer; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlReaderNewMemory (reader: xmlTextReaderPtr; const buffer: PAnsiChar; size: Longint; const URL: PAnsiChar; const encoding: PAnsiChar; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlReaderNewWalker (reader: xmlTextReaderPtr; doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlReaderWalker (doc: xmlDocPtr) : xmlTextReaderPtr; cdecl; external LIBXML2_SO;
  function xmlReallocLoc (ptr: Pointer; size: size_t; const file_: PAnsiChar; line: Longint) : Pointer; cdecl; external LIBXML2_SO;
  function xmlReconciliateNs (doc: xmlDocPtr; tree: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlRecoverDoc (cur: xmlCharPtr) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlRecoverFile (const filename: PAnsiChar) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlRecoverMemory (const buffer: PAnsiChar; size: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlRegExecErrInfo (exec: xmlRegExecCtxtPtr; const string_: xmlCharPtrPtr; nbval: PInteger; nbneg: PInteger; values: xmlCharPtrPtr; terminal: PInteger) : Longint; cdecl; external LIBXML2_SO;
  function xmlRegExecNextValues (exec: xmlRegExecCtxtPtr; nbval: PInteger; nbneg: PInteger; values: xmlCharPtrPtr; terminal: PInteger) : Longint; cdecl; external LIBXML2_SO;
  function xmlRegExecPushString (exec: xmlRegExecCtxtPtr; const value: xmlCharPtr; data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlRegExecPushString2 (exec: xmlRegExecCtxtPtr; const value: xmlCharPtr; const value2: xmlCharPtr; data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlRegFreeExecCtxt (exec: xmlRegExecCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlRegFreeRegexp (regexp: xmlRegexpPtr); cdecl; external LIBXML2_SO;
  function xmlRegNewExecCtxt (comp: xmlRegexpPtr; callback: xmlRegExecCallbacks; data: Pointer) : xmlRegExecCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlRegexpCompile (const regexp: xmlCharPtr) : xmlRegexpPtr; cdecl; external LIBXML2_SO;
  function xmlRegexpExec (comp: xmlRegexpPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlRegexpIsDeterminist (comp: xmlRegexpPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlRegexpPrint (output: PFILE; regexp: xmlRegexpPtr); cdecl; external LIBXML2_SO;
  procedure xmlRegisterCharEncodingHandler (handler: xmlCharEncodingHandlerPtr); cdecl; external LIBXML2_SO;
  procedure xmlRegisterDefaultInputCallbacks (); cdecl; external LIBXML2_SO;
  procedure xmlRegisterDefaultOutputCallbacks (); cdecl; external LIBXML2_SO;
  procedure xmlRegisterHTTPPostCallbacks (); cdecl; external LIBXML2_SO;
  function xmlRegisterInputCallbacks (matchFunc: xmlInputMatchCallback; openFunc: xmlInputOpenCallback; readFunc: xmlInputReadCallback; closeFunc: xmlInputCloseCallback) : Longint; cdecl; external LIBXML2_SO;
  function xmlRegisterNodeDefault (func: xmlRegisterNodeFunc) : xmlRegisterNodeFunc; cdecl; external LIBXML2_SO;
  function xmlRegisterOutputCallbacks (matchFunc: xmlOutputMatchCallback; openFunc: xmlOutputOpenCallback; writeFunc: xmlOutputWriteCallback; closeFunc: xmlOutputCloseCallback) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGCleanupTypes (); cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGDump (output: PFILE; schema: xmlRelaxNGPtr); cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGDumpTree (output: PFILE; schema: xmlRelaxNGPtr); cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGFree (schema: xmlRelaxNGPtr); cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGFreeParserCtxt (ctxt: xmlRelaxNGParserCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGFreeValidCtxt (ctxt: xmlRelaxNGValidCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlRelaxNGGetParserErrors (ctxt: xmlRelaxNGParserCtxtPtr; err: xmlRelaxNGValidityErrorFuncPtr; warn: xmlRelaxNGValidityWarningFuncPtr; ctx: PPointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlRelaxNGGetValidErrors (ctxt: xmlRelaxNGValidCtxtPtr; err: xmlRelaxNGValidityErrorFuncPtr; warn: xmlRelaxNGValidityWarningFuncPtr; ctx: PPointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlRelaxNGInitTypes () : Longint; cdecl; external LIBXML2_SO;
  function xmlRelaxNGNewDocParserCtxt (doc: xmlDocPtr) : xmlRelaxNGParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlRelaxNGNewMemParserCtxt (const buffer: PAnsiChar; size: Longint) : xmlRelaxNGParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlRelaxNGNewParserCtxt (const URL: PAnsiChar) : xmlRelaxNGParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlRelaxNGNewValidCtxt (schema: xmlRelaxNGPtr) : xmlRelaxNGValidCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlRelaxNGParse (ctxt: xmlRelaxNGParserCtxtPtr) : xmlRelaxNGPtr; cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGSetParserErrors (ctxt: xmlRelaxNGParserCtxtPtr; err: xmlRelaxNGValidityErrorFunc; warn: xmlRelaxNGValidityWarningFunc; ctx: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGSetParserStructuredErrors (ctxt: xmlRelaxNGParserCtxtPtr; serror: xmlStructuredErrorFunc; ctx: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGSetValidErrors (ctxt: xmlRelaxNGValidCtxtPtr; err: xmlRelaxNGValidityErrorFunc; warn: xmlRelaxNGValidityWarningFunc; ctx: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlRelaxNGSetValidStructuredErrors (ctxt: xmlRelaxNGValidCtxtPtr; serror: xmlStructuredErrorFunc; ctx: Pointer); cdecl; external LIBXML2_SO;
  function xmlRelaxNGValidateDoc (ctxt: xmlRelaxNGValidCtxtPtr; doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlRelaxNGValidateFullElement (ctxt: xmlRelaxNGValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlRelaxNGValidatePopElement (ctxt: xmlRelaxNGValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlRelaxNGValidatePushCData (ctxt: xmlRelaxNGValidCtxtPtr; const data: xmlCharPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlRelaxNGValidatePushElement (ctxt: xmlRelaxNGValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlRelaxParserSetFlag (ctxt: xmlRelaxNGParserCtxtPtr; flags: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlRemoveID (doc: xmlDocPtr; attr: xmlAttrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlRemoveProp (cur: xmlAttrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlRemoveRef (doc: xmlDocPtr; attr: xmlAttrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlReplaceNode (old: xmlNodePtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  procedure xmlResetError (err: xmlErrorPtr); cdecl; external LIBXML2_SO;
  procedure xmlResetLastError (); cdecl; external LIBXML2_SO;
  procedure xmlSAX2AttributeDecl (ctx: Pointer; const elem: xmlCharPtr; const fullname: xmlCharPtr; type_: Longint; def: Longint; const defaultValue: xmlCharPtr; tree: xmlEnumerationPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2CDataBlock (ctx: Pointer; const value: xmlCharPtr; len: Longint); cdecl; external LIBXML2_SO;
  procedure xmlSAX2Characters (ctx: Pointer; const ch: xmlCharPtr; len: Longint); cdecl; external LIBXML2_SO;
  procedure xmlSAX2Comment (ctx: Pointer; const value: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2ElementDecl (ctx: Pointer; const name: xmlCharPtr; type_: Longint; content: xmlElementContentPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2EndDocument (ctx: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlSAX2EndElement (ctx: Pointer; const name: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2EndElementNs (ctx: Pointer; const localname: xmlCharPtr; const prefix: xmlCharPtr; const URI: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2EntityDecl (ctx: Pointer; const name: xmlCharPtr; type_: Longint; const publicId: xmlCharPtr; const systemId: xmlCharPtr; content: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2ExternalSubset (ctx: Pointer; const name: xmlCharPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr); cdecl; external LIBXML2_SO;
  function xmlSAX2GetColumnNumber (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlSAX2GetEntity (ctx: Pointer; const name: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function xmlSAX2GetLineNumber (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlSAX2GetParameterEntity (ctx: Pointer; const name: xmlCharPtr) : xmlEntityPtr; cdecl; external LIBXML2_SO;
  function xmlSAX2GetPublicId (ctx: Pointer) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlSAX2GetSystemId (ctx: Pointer) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlSAX2HasExternalSubset (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlSAX2HasInternalSubset (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlSAX2IgnorableWhitespace (ctx: Pointer; const ch: xmlCharPtr; len: Longint); cdecl; external LIBXML2_SO;
  procedure xmlSAX2InitDefaultSAXHandler (hdlr: xmlSAXHandlerPtr; warning: Longint); cdecl; external LIBXML2_SO;
  procedure xmlSAX2InitDocbDefaultSAXHandler (hdlr: xmlSAXHandlerPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2InitHtmlDefaultSAXHandler (hdlr: xmlSAXHandlerPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2InternalSubset (ctx: Pointer; const name: xmlCharPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr); cdecl; external LIBXML2_SO;
  function xmlSAX2IsStandalone (ctx: Pointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlSAX2NotationDecl (ctx: Pointer; const name: xmlCharPtr; const publicId: xmlCharPtr; const systemId: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2ProcessingInstruction (ctx: Pointer; const target: xmlCharPtr; const data: xmlCharPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2Reference (ctx: Pointer; const name: xmlCharPtr); cdecl; external LIBXML2_SO;
  function xmlSAX2ResolveEntity (ctx: Pointer; const publicId: xmlCharPtr; const systemId: xmlCharPtr) : xmlParserInputPtr; cdecl; external LIBXML2_SO;
  procedure xmlSAX2SetDocumentLocator (ctx: Pointer; loc: xmlSAXLocatorPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2StartDocument (ctx: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlSAX2StartElement (ctx: Pointer; const fullname: xmlCharPtr; const atts: xmlCharPtrPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2StartElementNs (ctx: Pointer; const localname: xmlCharPtr; const prefix: xmlCharPtr; const URI: xmlCharPtr; nb_namespaces: Longint; const namespaces: xmlCharPtrPtr; nb_attributes: Longint; nb_defaulted: Longint; const attributes: xmlCharPtrPtr); cdecl; external LIBXML2_SO;
  procedure xmlSAX2UnparsedEntityDecl (ctx: Pointer; const name: xmlCharPtr; const publicId: xmlCharPtr; const systemId: xmlCharPtr; const notationName: xmlCharPtr); cdecl; external LIBXML2_SO;
  function xmlSAXDefaultVersion (version: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlSAXParseDTD (sax: xmlSAXHandlerPtr; const ExternalID: xmlCharPtr; const SystemID: xmlCharPtr) : xmlDtdPtr; cdecl; external LIBXML2_SO;
  function xmlSAXParseDoc (sax: xmlSAXHandlerPtr; const cur: xmlCharPtr; recovery: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlSAXParseEntity (sax: xmlSAXHandlerPtr; const filename: PAnsiChar) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlSAXParseFile (sax: xmlSAXHandlerPtr; const filename: PAnsiChar; recovery: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlSAXParseFileWithData (sax: xmlSAXHandlerPtr; const filename: PAnsiChar; recovery: Longint; data: Pointer) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlSAXParseMemory (sax: xmlSAXHandlerPtr; const buffer: PAnsiChar; size: Longint; recovery: Longint) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlSAXParseMemoryWithData (sax: xmlSAXHandlerPtr; const buffer: PAnsiChar; size: Longint; recovery: Longint; data: Pointer) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlSAXUserParseFile (sax: xmlSAXHandlerPtr; user_data: Pointer; const filename: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlSAXUserParseMemory (sax: xmlSAXHandlerPtr; user_data: Pointer; const buffer: PAnsiChar; size: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlSAXVersion (hdlr: xmlSAXHandlerPtr; version: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveClose (ctxt: xmlSaveCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveDoc (ctxt: xmlSaveCtxtPtr; doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveFile (const filename: PAnsiChar; cur: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveFileEnc (const filename: PAnsiChar; cur: xmlDocPtr; const encoding: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveFileTo (buf: xmlOutputBufferPtr; cur: xmlDocPtr; const encoding: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveFlush (ctxt: xmlSaveCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveFormatFile (const filename: PAnsiChar; cur: xmlDocPtr; format: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveFormatFileEnc (const filename: PAnsiChar; cur: xmlDocPtr; const encoding: PAnsiChar; format: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveFormatFileTo (buf: xmlOutputBufferPtr; cur: xmlDocPtr; const encoding: PAnsiChar; format: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveSetAttrEscape (ctxt: xmlSaveCtxtPtr; escape: xmlCharEncodingOutputFunc) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveSetEscape (ctxt: xmlSaveCtxtPtr; escape: xmlCharEncodingOutputFunc) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveToBuffer (buffer: xmlBufferPtr; const encoding: PAnsiChar; options: Longint) : xmlSaveCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSaveToFd (fd: Longint; const encoding: PAnsiChar; options: Longint) : xmlSaveCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSaveToFilename (const filename: PAnsiChar; const encoding: PAnsiChar; options: Longint) : xmlSaveCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSaveToIO (iowrite: xmlOutputWriteCallback; ioclose: xmlOutputCloseCallback; ioctx: Pointer; const encoding: PAnsiChar; options: Longint) : xmlSaveCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSaveTree (ctxt: xmlSaveCtxtPtr; node: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSaveUri (uri: xmlURIPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlScanName (ctxt: xmlParserCtxtPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaCheckFacet (facet: xmlSchemaFacetPtr; typeDecl: xmlSchemaTypePtr; pctxt: xmlSchemaParserCtxtPtr; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlSchemaCleanupTypes (); cdecl; external LIBXML2_SO;
  function xmlSchemaCollapseString (const value: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaCompareValues (x: xmlSchemaValPtr; y: xmlSchemaValPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaCompareValuesWhtsp (x: xmlSchemaValPtr; xws: xmlSchemaWhitespaceValueType; y: xmlSchemaValPtr; yws: xmlSchemaWhitespaceValueType) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaCopyValue (val: xmlSchemaValPtr) : xmlSchemaValPtr; cdecl; external LIBXML2_SO;
  procedure xmlSchemaDump (output: PFILE; schema: xmlSchemaPtr); cdecl; external LIBXML2_SO;
  procedure xmlSchemaFree (schema: xmlSchemaPtr); cdecl; external LIBXML2_SO;
  procedure xmlSchemaFreeFacet (facet: xmlSchemaFacetPtr); cdecl; external LIBXML2_SO;
  procedure xmlSchemaFreeParserCtxt (ctxt: xmlSchemaParserCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlSchemaFreeType (type_: xmlSchemaTypePtr); cdecl; external LIBXML2_SO;
  procedure xmlSchemaFreeValidCtxt (ctxt: xmlSchemaValidCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlSchemaFreeValue (value: xmlSchemaValPtr); cdecl; external LIBXML2_SO;
  procedure xmlSchemaFreeWildcard (wildcard: xmlSchemaWildcardPtr); cdecl; external LIBXML2_SO;
  function xmlSchemaGetBuiltInListSimpleTypeItemType (type_: xmlSchemaTypePtr) : xmlSchemaTypePtr; cdecl; external LIBXML2_SO;
  function xmlSchemaGetBuiltInType (type_: xmlSchemaValType) : xmlSchemaTypePtr; cdecl; external LIBXML2_SO;
  function xmlSchemaGetCanonValue (val: xmlSchemaValPtr; const retValue: xmlCharPtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaGetCanonValueWhtsp (val: xmlSchemaValPtr; const retValue: xmlCharPtrPtr; ws: xmlSchemaWhitespaceValueType) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaGetFacetValueAsULong (facet: xmlSchemaFacetPtr) : Cardinal; cdecl; external LIBXML2_SO;
  function xmlSchemaGetParserErrors (ctxt: xmlSchemaParserCtxtPtr; err: xmlSchemaValidityErrorFuncPtr; warn: xmlSchemaValidityWarningFuncPtr; ctx: PPointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaGetPredefinedType (const name: xmlCharPtr; const ns: xmlCharPtr) : xmlSchemaTypePtr; cdecl; external LIBXML2_SO;
  function xmlSchemaGetValType (val: xmlSchemaValPtr) : xmlSchemaValType; cdecl; external LIBXML2_SO;
  function xmlSchemaGetValidErrors (ctxt: xmlSchemaValidCtxtPtr; err: xmlSchemaValidityErrorFuncPtr; warn: xmlSchemaValidityWarningFuncPtr; ctx: PPointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlSchemaInitTypes (); cdecl; external LIBXML2_SO;
  function xmlSchemaIsBuiltInTypeFacet (type_: xmlSchemaTypePtr; facetType: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaIsValid (ctxt: xmlSchemaValidCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaNewDocParserCtxt (doc: xmlDocPtr) : xmlSchemaParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaNewFacet () : xmlSchemaFacetPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaNewMemParserCtxt (const buffer: PAnsiChar; size: Longint) : xmlSchemaParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaNewNOTATIONValue (const name: xmlCharPtr; const ns: xmlCharPtr) : xmlSchemaValPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaNewParserCtxt (const URL: PAnsiChar) : xmlSchemaParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaNewQNameValue (const namespaceName: xmlCharPtr; const localName: xmlCharPtr) : xmlSchemaValPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaNewStringValue (type_: xmlSchemaValType; const value: xmlCharPtr) : xmlSchemaValPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaNewValidCtxt (schema: xmlSchemaPtr) : xmlSchemaValidCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaParse (ctxt: xmlSchemaParserCtxtPtr) : xmlSchemaPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaSAXPlug (ctxt: xmlSchemaValidCtxtPtr; sax: xmlSAXHandlerPtrPtr; user_data: PPointer) : xmlSchemaSAXPlugPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaSAXUnplug (plug: xmlSchemaSAXPlugPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlSchemaSetParserErrors (ctxt: xmlSchemaParserCtxtPtr; err: xmlSchemaValidityErrorFunc; warn: xmlSchemaValidityWarningFunc; ctx: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlSchemaSetParserStructuredErrors (ctxt: xmlSchemaParserCtxtPtr; serror: xmlStructuredErrorFunc; ctx: Pointer); cdecl; external LIBXML2_SO;
  procedure xmlSchemaSetValidErrors (ctxt: xmlSchemaValidCtxtPtr; err: xmlSchemaValidityErrorFunc; warn: xmlSchemaValidityWarningFunc; ctx: Pointer); cdecl; external LIBXML2_SO;
  function xmlSchemaSetValidOptions (ctxt: xmlSchemaValidCtxtPtr; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlSchemaSetValidStructuredErrors (ctxt: xmlSchemaValidCtxtPtr; serror: xmlStructuredErrorFunc; ctx: Pointer); cdecl; external LIBXML2_SO;
  function xmlSchemaValPredefTypeNode (type_: xmlSchemaTypePtr; const value: xmlCharPtr; val: xmlSchemaValPtrPtr; node: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValPredefTypeNodeNoNorm (type_: xmlSchemaTypePtr; const value: xmlCharPtr; val: xmlSchemaValPtrPtr; node: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidCtxtGetOptions (ctxt: xmlSchemaValidCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidateDoc (ctxt: xmlSchemaValidCtxtPtr; instance: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidateFacet (base: xmlSchemaTypePtr; facet: xmlSchemaFacetPtr; const value: xmlCharPtr; val: xmlSchemaValPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidateFacetWhtsp (facet: xmlSchemaFacetPtr; fws: xmlSchemaWhitespaceValueType; valType: xmlSchemaValType; const value: xmlCharPtr; val: xmlSchemaValPtr; ws: xmlSchemaWhitespaceValueType) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidateFile (ctxt: xmlSchemaValidCtxtPtr; const filename: PAnsiChar; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidateLengthFacet (type_: xmlSchemaTypePtr; facet: xmlSchemaFacetPtr; const value: xmlCharPtr; val: xmlSchemaValPtr; length: PCardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidateLengthFacetWhtsp (facet: xmlSchemaFacetPtr; valType: xmlSchemaValType; const value: xmlCharPtr; val: xmlSchemaValPtr; length: PCardinal; ws: xmlSchemaWhitespaceValueType) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidateListSimpleTypeFacet (facet: xmlSchemaFacetPtr; const value: xmlCharPtr; actualLen: Cardinal; expectedLen: PCardinal) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidateOneElement (ctxt: xmlSchemaValidCtxtPtr; elem: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidatePredefinedType (type_: xmlSchemaTypePtr; const value: xmlCharPtr; val: xmlSchemaValPtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValidateStream (ctxt: xmlSchemaValidCtxtPtr; input: xmlParserInputBufferPtr; enc: xmlCharEncoding; sax: xmlSAXHandlerPtr; user_data: Pointer) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValueAppend (prev: xmlSchemaValPtr; cur: xmlSchemaValPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValueGetAsBoolean (val: xmlSchemaValPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSchemaValueGetAsString (val: xmlSchemaValPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaValueGetNext (cur: xmlSchemaValPtr) : xmlSchemaValPtr; cdecl; external LIBXML2_SO;
  function xmlSchemaWhiteSpaceReplace (const value: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlSchematronFree (schema: xmlSchematronPtr); cdecl; external LIBXML2_SO;
  procedure xmlSchematronFreeParserCtxt (ctxt: xmlSchematronParserCtxtPtr); cdecl; external LIBXML2_SO;
  procedure xmlSchematronFreeValidCtxt (ctxt: xmlSchematronValidCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlSchematronNewDocParserCtxt (doc: xmlDocPtr) : xmlSchematronParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSchematronNewMemParserCtxt (const buffer: PAnsiChar; size: Longint) : xmlSchematronParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSchematronNewParserCtxt (const URL: PAnsiChar) : xmlSchematronParserCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSchematronNewValidCtxt (schema: xmlSchematronPtr; options: Longint) : xmlSchematronValidCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlSchematronParse (ctxt: xmlSchematronParserCtxtPtr) : xmlSchematronPtr; cdecl; external LIBXML2_SO;
  function xmlSchematronValidateDoc (ctxt: xmlSchematronValidCtxtPtr; instance: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSearchNs (doc: xmlDocPtr; node: xmlNodePtr; const nameSpace: xmlCharPtr) : xmlNsPtr; cdecl; external LIBXML2_SO;
  function xmlSearchNsByHref (doc: xmlDocPtr; node: xmlNodePtr; const href: xmlCharPtr) : xmlNsPtr; cdecl; external LIBXML2_SO;
  procedure xmlSetBufferAllocationScheme (scheme: xmlBufferAllocationScheme); cdecl; external LIBXML2_SO;
  procedure xmlSetCompressMode (mode: Longint); cdecl; external LIBXML2_SO;
  procedure xmlSetDocCompressMode (doc: xmlDocPtr; mode: Longint); cdecl; external LIBXML2_SO;
  procedure xmlSetEntityReferenceFunc (func: xmlEntityReferenceFunc); cdecl; external LIBXML2_SO;
  procedure xmlSetExternalEntityLoader (f: xmlExternalEntityLoader); cdecl; external LIBXML2_SO;
  function xmlSetFeature (ctxt: xmlParserCtxtPtr; const name: PAnsiChar; value: Pointer) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlSetGenericErrorFunc (ctx: Pointer; handler: xmlGenericErrorFunc); cdecl; external LIBXML2_SO;
  procedure xmlSetListDoc (list: xmlNodePtr; doc: xmlDocPtr); cdecl; external LIBXML2_SO;
  procedure xmlSetNs (node: xmlNodePtr; ns: xmlNsPtr); cdecl; external LIBXML2_SO;
  function xmlSetNsProp (node: xmlNodePtr; ns: xmlNsPtr; const name: xmlCharPtr; const value: xmlCharPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  function xmlSetProp (node: xmlNodePtr; const name: xmlCharPtr; const value: xmlCharPtr) : xmlAttrPtr; cdecl; external LIBXML2_SO;
  procedure xmlSetStructuredErrorFunc (ctx: Pointer; handler: xmlStructuredErrorFunc); cdecl; external LIBXML2_SO;
  procedure xmlSetTreeDoc (tree: xmlNodePtr; doc: xmlDocPtr); cdecl; external LIBXML2_SO;
  procedure xmlSetupParserForBuffer (ctxt: xmlParserCtxtPtr; const buffer: xmlCharPtr; const filename: PAnsiChar); cdecl; external LIBXML2_SO;
  procedure xmlShell (doc: xmlDocPtr; filename: PAnsiChar; input: xmlShellReadlineFunc; output: PFILE); cdecl; external LIBXML2_SO;
  function xmlShellBase (ctxt: xmlShellCtxtPtr; arg: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlShellCat (ctxt: xmlShellCtxtPtr; arg: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlShellDir (ctxt: xmlShellCtxtPtr; arg: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlShellDu (ctxt: xmlShellCtxtPtr; arg: PAnsiChar; tree: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlShellList (ctxt: xmlShellCtxtPtr; arg: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlShellLoad (ctxt: xmlShellCtxtPtr; filename: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlShellPrintNode (node: xmlNodePtr); cdecl; external LIBXML2_SO;
  procedure xmlShellPrintXPathError (errorType: Longint; const arg: PAnsiChar); cdecl; external LIBXML2_SO;
  procedure xmlShellPrintXPathResult (list: xmlXPathObjectPtr); cdecl; external LIBXML2_SO;
  function xmlShellPwd (ctxt: xmlShellCtxtPtr; buffer: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlShellSave (ctxt: xmlShellCtxtPtr; filename: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlShellValidate (ctxt: xmlShellCtxtPtr; dtd: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlShellWrite (ctxt: xmlShellCtxtPtr; filename: PAnsiChar; node: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSkipBlankChars (ctxt: xmlParserCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlSnprintfElementContent (buf: PAnsiChar; size: Longint; content: xmlElementContentPtr; englob: Longint); cdecl; external LIBXML2_SO;
  function xmlSplitQName (ctxt: xmlParserCtxtPtr; const name: xmlCharPtr; prefix: xmlCharPtrPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlSplitQName2 (const name: xmlCharPtr; prefix: xmlCharPtrPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlSplitQName3 (const name: xmlCharPtr; len: PInteger) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlSprintfElementContent (buf: PAnsiChar; content: xmlElementContentPtr; englob: Longint); cdecl; external LIBXML2_SO;
  procedure xmlStopParser (ctxt: xmlParserCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlStrEqual (const str1: xmlCharPtr; const str2: xmlCharPtr) : Longbool; cdecl; external LIBXML2_SO;
  function xmlStrPrintf (buf: xmlCharPtr; len: Longint; const msg: xmlCharPtr) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlStrQEqual (const pref: xmlCharPtr; const name: xmlCharPtr; const str: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlStrVPrintf (buf: xmlCharPtr; len: Longint; const msg: xmlCharPtr; ap: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlStrcasecmp (const str1: xmlCharPtr; const str2: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlStrcasestr (const str: xmlCharPtr; val: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStrcat (cur: xmlCharPtr; const add: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStrchr (const str: xmlCharPtr; val: xmlChar) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStrcmp (const str1: xmlCharPtr; const str2: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlStrdup (const cur: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStreamPop (stream: xmlStreamCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlStreamPush (stream: xmlStreamCtxtPtr; const name: xmlCharPtr; const ns: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlStreamPushAttr (stream: xmlStreamCtxtPtr; const name: xmlCharPtr; const ns: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlStreamPushNode (stream: xmlStreamCtxtPtr; const name: xmlCharPtr; const ns: xmlCharPtr; nodeType: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlStreamWantsAnyNode (streamCtxt: xmlStreamCtxtPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlStringCurrentChar (ctxt: xmlParserCtxtPtr; const cur: xmlCharPtr; len: PInteger) : Longint; cdecl; external LIBXML2_SO;
  function xmlStringDecodeEntities (ctxt: xmlParserCtxtPtr; const str: xmlCharPtr; what: Longint; end_: xmlChar; end2: xmlChar; end3: xmlChar) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStringGetNodeList (doc: xmlDocPtr; const value: xmlCharPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlStringLenDecodeEntities (ctxt: xmlParserCtxtPtr; const str: xmlCharPtr; len: Longint; what: Longint; end_: xmlChar; end2: xmlChar; end3: xmlChar) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStringLenGetNodeList (doc: xmlDocPtr; const value: xmlCharPtr; len: Longint) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlStrlen (const str: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlStrncasecmp (const str1: xmlCharPtr; const str2: xmlCharPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlStrncat (cur: xmlCharPtr; const add: xmlCharPtr; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStrncatNew (const str1: xmlCharPtr; const str2: xmlCharPtr; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStrncmp (const str1: xmlCharPtr; const str2: xmlCharPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlStrndup (const cur: xmlCharPtr; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStrstr (const str: xmlCharPtr; const val: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlStrsub (const str: xmlCharPtr; start: Longint; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlSubstituteEntitiesDefault (val: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlSwitchEncoding (ctxt: xmlParserCtxtPtr; enc: xmlCharEncoding) : Longint; cdecl; external LIBXML2_SO;
  function xmlSwitchInputEncoding (ctxt: xmlParserCtxtPtr; input: xmlParserInputPtr; handler: xmlCharEncodingHandlerPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlSwitchToEncoding (ctxt: xmlParserCtxtPtr; handler: xmlCharEncodingHandlerPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextConcat (node: xmlNodePtr; const content: xmlCharPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextMerge (first: xmlNodePtr; second: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderAttributeCount (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderBaseUri (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderByteConsumed (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderClose (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstBaseUri (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstEncoding (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstLocalName (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstName (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstNamespaceUri (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstPrefix (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstString (reader: xmlTextReaderPtr; const str: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstValue (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstXmlLang (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderConstXmlVersion (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderCurrentDoc (reader: xmlTextReaderPtr) : xmlDocPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderCurrentNode (reader: xmlTextReaderPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderDepth (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderExpand (reader: xmlTextReaderPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderGetAttribute (reader: xmlTextReaderPtr; const name: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderGetAttributeNo (reader: xmlTextReaderPtr; no: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderGetAttributeNs (reader: xmlTextReaderPtr; const localName: xmlCharPtr; const namespaceURI: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlTextReaderGetErrorHandler (reader: xmlTextReaderPtr; f: xmlTextReaderErrorFuncPtr; arg: PPointer); cdecl; external LIBXML2_SO;
  function xmlTextReaderGetParserColumnNumber (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderGetParserLineNumber (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderGetParserProp (reader: xmlTextReaderPtr; prop: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderGetRemainder (reader: xmlTextReaderPtr) : xmlParserInputBufferPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderHasAttributes (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderHasValue (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderIsDefault (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderIsEmptyElement (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderIsNamespaceDecl (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderIsValid (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderLocalName (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderLocatorBaseURI (locator: xmlTextReaderLocatorPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderLocatorLineNumber (locator: xmlTextReaderLocatorPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderLookupNamespace (reader: xmlTextReaderPtr; const prefix: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderMoveToAttribute (reader: xmlTextReaderPtr; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderMoveToAttributeNo (reader: xmlTextReaderPtr; no: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderMoveToAttributeNs (reader: xmlTextReaderPtr; const localName: xmlCharPtr; const namespaceURI: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderMoveToElement (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderMoveToFirstAttribute (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderMoveToNextAttribute (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderName (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderNamespaceUri (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderNext (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderNextSibling (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderNodeType (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderNormalization (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderPrefix (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderPreserve (reader: xmlTextReaderPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderPreservePattern (reader: xmlTextReaderPtr; const pattern: xmlCharPtr; const namespaces: xmlCharPtrPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderQuoteChar (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderRead (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderReadAttributeValue (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderReadInnerXml (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderReadOuterXml (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderReadState (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderReadString (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderRelaxNGSetSchema (reader: xmlTextReaderPtr; schema: xmlRelaxNGPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderRelaxNGValidate (reader: xmlTextReaderPtr; const rng: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderSchemaValidate (reader: xmlTextReaderPtr; const xsd: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderSchemaValidateCtxt (reader: xmlTextReaderPtr; ctxt: xmlSchemaValidCtxtPtr; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlTextReaderSetErrorHandler (reader: xmlTextReaderPtr; f: xmlTextReaderErrorFunc; arg: Pointer); cdecl; external LIBXML2_SO;
  function xmlTextReaderSetParserProp (reader: xmlTextReaderPtr; prop: Longint; value: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderSetSchema (reader: xmlTextReaderPtr; schema: xmlSchemaPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlTextReaderSetStructuredErrorHandler (reader: xmlTextReaderPtr; f: xmlStructuredErrorFunc; arg: Pointer); cdecl; external LIBXML2_SO;
  function xmlTextReaderStandalone (reader: xmlTextReaderPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextReaderValue (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextReaderXmlLang (reader: xmlTextReaderPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndAttribute (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndCDATA (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndComment (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndDTD (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndDTDAttlist (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndDTDElement (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndDTDEntity (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndDocument (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndElement (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterEndPI (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterFlush (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterFullEndElement (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterSetIndent (writer: xmlTextWriterPtr; indent: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterSetIndentString (writer: xmlTextWriterPtr; const str: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartAttribute (writer: xmlTextWriterPtr; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartAttributeNS (writer: xmlTextWriterPtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const namespaceURI: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartCDATA (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartComment (writer: xmlTextWriterPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartDTD (writer: xmlTextWriterPtr; const name: xmlCharPtr; const pubid: xmlCharPtr; const sysid: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartDTDAttlist (writer: xmlTextWriterPtr; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartDTDElement (writer: xmlTextWriterPtr; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartDTDEntity (writer: xmlTextWriterPtr; pe: Longint; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartDocument (writer: xmlTextWriterPtr; const version: PAnsiChar; const encoding: PAnsiChar; const standalone: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartElement (writer: xmlTextWriterPtr; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartElementNS (writer: xmlTextWriterPtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const namespaceURI: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterStartPI (writer: xmlTextWriterPtr; const target: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteAttribute (writer: xmlTextWriterPtr; const name: xmlCharPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteAttributeNS (writer: xmlTextWriterPtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const namespaceURI: xmlCharPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteBase64 (writer: xmlTextWriterPtr; const data: PAnsiChar; start: Longint; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteBinHex (writer: xmlTextWriterPtr; const data: PAnsiChar; start: Longint; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteCDATA (writer: xmlTextWriterPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteComment (writer: xmlTextWriterPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteDTD (writer: xmlTextWriterPtr; const name: xmlCharPtr; const pubid: xmlCharPtr; const sysid: xmlCharPtr; const subset: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteDTDAttlist (writer: xmlTextWriterPtr; const name: xmlCharPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteDTDElement (writer: xmlTextWriterPtr; const name: xmlCharPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteDTDEntity (writer: xmlTextWriterPtr; pe: Longint; const name: xmlCharPtr; const pubid: xmlCharPtr; const sysid: xmlCharPtr; const ndataid: xmlCharPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteDTDExternalEntity (writer: xmlTextWriterPtr; pe: Longint; const name: xmlCharPtr; const pubid: xmlCharPtr; const sysid: xmlCharPtr; const ndataid: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteDTDExternalEntityContents (writer: xmlTextWriterPtr; const pubid: xmlCharPtr; const sysid: xmlCharPtr; const ndataid: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteDTDInternalEntity (writer: xmlTextWriterPtr; pe: Longint; const name: xmlCharPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteDTDNotation (writer: xmlTextWriterPtr; const name: xmlCharPtr; const pubid: xmlCharPtr; const sysid: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteElement (writer: xmlTextWriterPtr; const name: xmlCharPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteElementNS (writer: xmlTextWriterPtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const namespaceURI: xmlCharPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteFormatAttribute (writer: xmlTextWriterPtr; const name: xmlCharPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatAttributeNS (writer: xmlTextWriterPtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const namespaceURI: xmlCharPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatCDATA (writer: xmlTextWriterPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatComment (writer: xmlTextWriterPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatDTD (writer: xmlTextWriterPtr; const name: xmlCharPtr; const pubid: xmlCharPtr; const sysid: xmlCharPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatDTDAttlist (writer: xmlTextWriterPtr; const name: xmlCharPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatDTDElement (writer: xmlTextWriterPtr; const name: xmlCharPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatDTDInternalEntity (writer: xmlTextWriterPtr; pe: Longint; const name: xmlCharPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatElement (writer: xmlTextWriterPtr; const name: xmlCharPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatElementNS (writer: xmlTextWriterPtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const namespaceURI: xmlCharPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatPI (writer: xmlTextWriterPtr; const target: xmlCharPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatRaw (writer: xmlTextWriterPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWriteFormatString (writer: xmlTextWriterPtr; const format: PAnsiChar) : Longint; cdecl; varargs; external LIBXML2_SO;
  function xmlTextWriterWritePI (writer: xmlTextWriterPtr; const target: xmlCharPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteRaw (writer: xmlTextWriterPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteRawLen (writer: xmlTextWriterPtr; const content: xmlCharPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteString (writer: xmlTextWriterPtr; const content: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatAttribute (writer: xmlTextWriterPtr; const name: xmlCharPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatAttributeNS (writer: xmlTextWriterPtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const namespaceURI: xmlCharPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatCDATA (writer: xmlTextWriterPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatComment (writer: xmlTextWriterPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatDTD (writer: xmlTextWriterPtr; const name: xmlCharPtr; const pubid: xmlCharPtr; const sysid: xmlCharPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatDTDAttlist (writer: xmlTextWriterPtr; const name: xmlCharPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatDTDElement (writer: xmlTextWriterPtr; const name: xmlCharPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatDTDInternalEntity (writer: xmlTextWriterPtr; pe: Longint; const name: xmlCharPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatElement (writer: xmlTextWriterPtr; const name: xmlCharPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatElementNS (writer: xmlTextWriterPtr; const prefix: xmlCharPtr; const name: xmlCharPtr; const namespaceURI: xmlCharPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatPI (writer: xmlTextWriterPtr; const target: xmlCharPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatRaw (writer: xmlTextWriterPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlTextWriterWriteVFormatString (writer: xmlTextWriterPtr; const format: PAnsiChar; argptr: va_list) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefBufferAllocScheme (v: xmlBufferAllocationScheme) : xmlBufferAllocationScheme; cdecl; external LIBXML2_SO;
  function xmlThrDefDefaultBufferSize (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefDeregisterNodeDefault (func: xmlDeregisterNodeFunc) : xmlDeregisterNodeFunc; cdecl; external LIBXML2_SO;
  function xmlThrDefDoValidityCheckingDefaultValue (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefGetWarningsDefaultValue (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefIndentTreeOutput (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefKeepBlanksDefaultValue (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefLineNumbersDefaultValue (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefLoadExtDtdDefaultValue (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefOutputBufferCreateFilenameDefault (func: xmlOutputBufferCreateFilenameFunc) : xmlOutputBufferCreateFilenameFunc; cdecl; external LIBXML2_SO;
  function xmlThrDefParserDebugEntities (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefParserInputBufferCreateFilenameDefault (func: xmlParserInputBufferCreateFilenameFunc) : xmlParserInputBufferCreateFilenameFunc; cdecl; external LIBXML2_SO;
  function xmlThrDefPedanticParserDefaultValue (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefRegisterNodeDefault (func: xmlRegisterNodeFunc) : xmlRegisterNodeFunc; cdecl; external LIBXML2_SO;
  function xmlThrDefSaveNoEmptyTags (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlThrDefSetGenericErrorFunc (ctx: Pointer; handler: xmlGenericErrorFunc); cdecl; external LIBXML2_SO;
  procedure xmlThrDefSetStructuredErrorFunc (ctx: Pointer; handler: xmlStructuredErrorFunc); cdecl; external LIBXML2_SO;
  function xmlThrDefSubstituteEntitiesDefaultValue (v: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlThrDefTreeIndentString (const v: PAnsiChar) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlUCSIsAegeanNumbers (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsAlphabeticPresentationForms (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsArabic (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsArabicPresentationFormsA (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsArabicPresentationFormsB (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsArmenian (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsArrows (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsBasicLatin (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsBengali (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsBlock (code: Longint; const block: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsBlockElements (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsBopomofo (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsBopomofoExtended (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsBoxDrawing (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsBraillePatterns (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsBuhid (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsByzantineMusicalSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCJKCompatibility (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCJKCompatibilityForms (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCJKCompatibilityIdeographs (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCJKCompatibilityIdeographsSupplement (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCJKRadicalsSupplement (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCJKSymbolsandPunctuation (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCJKUnifiedIdeographs (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCJKUnifiedIdeographsExtensionA (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCJKUnifiedIdeographsExtensionB (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCat (code: Longint; const cat: PAnsiChar) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatC (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatCc (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatCf (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatCo (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatCs (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatL (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatLl (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatLm (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatLo (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatLt (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatLu (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatM (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatMc (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatMe (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatMn (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatN (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatNd (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatNl (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatNo (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatP (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatPc (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatPd (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatPe (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatPf (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatPi (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatPo (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatPs (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatS (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatSc (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatSk (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatSm (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatSo (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatZ (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatZl (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatZp (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCatZs (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCherokee (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCombiningDiacriticalMarks (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCombiningDiacriticalMarksforSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCombiningHalfMarks (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCombiningMarksforSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsControlPictures (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCurrencySymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCypriotSyllabary (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCyrillic (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsCyrillicSupplement (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsDeseret (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsDevanagari (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsDingbats (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsEnclosedAlphanumerics (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsEnclosedCJKLettersandMonths (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsEthiopic (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsGeneralPunctuation (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsGeometricShapes (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsGeorgian (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsGothic (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsGreek (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsGreekExtended (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsGreekandCoptic (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsGujarati (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsGurmukhi (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsHalfwidthandFullwidthForms (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsHangulCompatibilityJamo (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsHangulJamo (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsHangulSyllables (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsHanunoo (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsHebrew (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsHighPrivateUseSurrogates (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsHighSurrogates (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsHiragana (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsIPAExtensions (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsIdeographicDescriptionCharacters (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsKanbun (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsKangxiRadicals (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsKannada (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsKatakana (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsKatakanaPhoneticExtensions (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsKhmer (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsKhmerSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLao (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLatin1Supplement (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLatinExtendedA (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLatinExtendedAdditional (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLatinExtendedB (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLetterlikeSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLimbu (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLinearBIdeograms (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLinearBSyllabary (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsLowSurrogates (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMalayalam (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMathematicalAlphanumericSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMathematicalOperators (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMiscellaneousMathematicalSymbolsA (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMiscellaneousMathematicalSymbolsB (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMiscellaneousSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMiscellaneousSymbolsandArrows (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMiscellaneousTechnical (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMongolian (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMusicalSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsMyanmar (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsNumberForms (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsOgham (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsOldItalic (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsOpticalCharacterRecognition (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsOriya (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsOsmanya (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsPhoneticExtensions (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsPrivateUse (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsPrivateUseArea (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsRunic (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsShavian (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSinhala (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSmallFormVariants (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSpacingModifierLetters (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSpecials (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSuperscriptsandSubscripts (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSupplementalArrowsA (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSupplementalArrowsB (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSupplementalMathematicalOperators (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSupplementaryPrivateUseAreaA (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSupplementaryPrivateUseAreaB (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsSyriac (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsTagalog (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsTagbanwa (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsTags (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsTaiLe (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsTaiXuanJingSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsTamil (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsTelugu (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsThaana (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsThai (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsTibetan (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsUgaritic (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsUnifiedCanadianAboriginalSyllabics (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsVariationSelectors (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsVariationSelectorsSupplement (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsYiRadicals (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsYiSyllables (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUCSIsYijingHexagramSymbols (code: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlURIEscape (const str: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlURIEscapeStr (const str: xmlCharPtr; const list: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlURIUnescapeString (const str: PAnsiChar; len: Longint; target: PAnsiChar) : PAnsiChar; cdecl; external LIBXML2_SO;
  function xmlUTF8Charcmp (const utf1: xmlCharPtr; const utf2: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlUTF8Size (const utf: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlUTF8Strlen (const utf: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlUTF8Strloc (const utf: xmlCharPtr; const utfchar: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlUTF8Strndup (const utf: xmlCharPtr; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlUTF8Strpos (const utf: xmlCharPtr; pos: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlUTF8Strsize (const utf: xmlCharPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlUTF8Strsub (const utf: xmlCharPtr; start: Longint; len: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlUnlinkNode (cur: xmlNodePtr); cdecl; external LIBXML2_SO;
  procedure xmlUnlockLibrary (); cdecl; external LIBXML2_SO;
  function xmlUnsetNsProp (node: xmlNodePtr; ns: xmlNsPtr; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlUnsetProp (node: xmlNodePtr; const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidBuildContentModel (ctxt: xmlValidCtxtPtr; elem: xmlElementPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidCtxtNormalizeAttributeValue (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr; const name: xmlCharPtr; const value: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlValidGetPotentialChildren (ctree: xmlElementContentPtr; const names: xmlCharPtrPtr; len: PInteger; max: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidGetValidElements (prev: xmlNodePtr; next: xmlNodePtr; const names: xmlCharPtrPtr; max: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidNormalizeAttributeValue (doc: xmlDocPtr; elem: xmlNodePtr; const name: xmlCharPtr; const value: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlValidateAttributeDecl (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; attr: xmlAttributePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateAttributeValue (type_: xmlAttributeType; const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateDocument (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateDocumentFinal (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateDtd (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; dtd: xmlDtdPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateDtdFinal (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateElement (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateElementDecl (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; elem: xmlElementPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateNCName (const value: xmlCharPtr; space: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateNMToken (const value: xmlCharPtr; space: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateName (const value: xmlCharPtr; space: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateNameValue (const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateNamesValue (const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateNmtokenValue (const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateNmtokensValue (const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateNotationDecl (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; nota: xmlNotationPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateNotationUse (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; const notationName: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateOneAttribute (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr; attr: xmlAttrPtr; const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateOneElement (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateOneNamespace (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr; const prefix: xmlCharPtr; ns: xmlNsPtr; const value: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidatePopElement (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr; const qname: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidatePushCData (ctxt: xmlValidCtxtPtr; const data: xmlCharPtr; len: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidatePushElement (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr; elem: xmlNodePtr; const qname: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateQName (const value: xmlCharPtr; space: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlValidateRoot (ctxt: xmlValidCtxtPtr; doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXIncludeFreeContext (ctxt: xmlXIncludeCtxtPtr); cdecl; external LIBXML2_SO;
  function xmlXIncludeNewContext (doc: xmlDocPtr) : xmlXIncludeCtxtPtr; cdecl; external LIBXML2_SO;
  function xmlXIncludeProcess (doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXIncludeProcessFlags (doc: xmlDocPtr; flags: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlXIncludeProcessNode (ctxt: xmlXIncludeCtxtPtr; node: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXIncludeProcessTree (tree: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXIncludeProcessTreeFlags (tree: xmlNodePtr; flags: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlXIncludeSetFlags (ctxt: xmlXIncludeCtxtPtr; flags: Longint) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXPathAddValues (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathBooleanFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathCastBooleanToNumber (val: Longint) : double; cdecl; external LIBXML2_SO;
  function xmlXPathCastBooleanToString (val: Longint) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlXPathCastNodeSetToBoolean (ns: xmlNodeSetPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathCastNodeSetToNumber (ns: xmlNodeSetPtr) : double; cdecl; external LIBXML2_SO;
  function xmlXPathCastNodeSetToString (ns: xmlNodeSetPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlXPathCastNodeToNumber (node: xmlNodePtr) : double; cdecl; external LIBXML2_SO;
  function xmlXPathCastNodeToString (node: xmlNodePtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlXPathCastNumberToBoolean (val: double) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathCastNumberToString (val: double) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlXPathCastStringToBoolean (const val: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathCastStringToNumber (const val: xmlCharPtr) : double; cdecl; external LIBXML2_SO;
  function xmlXPathCastToBoolean (val: xmlXPathObjectPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathCastToNumber (val: xmlXPathObjectPtr) : double; cdecl; external LIBXML2_SO;
  function xmlXPathCastToString (val: xmlXPathObjectPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathCeilingFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathCmpNodes (node1: xmlNodePtr; node2: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathCompareValues (ctxt: xmlXPathParserContextPtr; inf: Longint; strict: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathCompile (const str: xmlCharPtr) : xmlXPathCompExprPtr; cdecl; external LIBXML2_SO;
  function xmlXPathCompiledEval (comp: xmlXPathCompExprPtr; ctx: xmlXPathContextPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathConcatFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathContainsFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathContextSetCache (ctxt: xmlXPathContextPtr; active: Longint; value: Longint; options: Longint) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathConvertBoolean (val: xmlXPathObjectPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathConvertNumber (val: xmlXPathObjectPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathConvertString (val: xmlXPathObjectPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathCountFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathCtxtCompile (ctxt: xmlXPathContextPtr; const str: xmlCharPtr) : xmlXPathCompExprPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathDebugDumpCompExpr (output: PFILE; comp: xmlXPathCompExprPtr; depth: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathDebugDumpObject (output: PFILE; cur: xmlXPathObjectPtr; depth: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathDifference (nodes1: xmlNodeSetPtr; nodes2: xmlNodeSetPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  function xmlXPathDistinct (nodes: xmlNodeSetPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  function xmlXPathDistinctSorted (nodes: xmlNodeSetPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathDivValues (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  function xmlXPathEqualValues (ctxt: xmlXPathParserContextPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXPathErr (ctxt: xmlXPathParserContextPtr; error: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathEval (const str: xmlCharPtr; ctx: xmlXPathContextPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathEvalExpr (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  function xmlXPathEvalExpression (const str: xmlCharPtr; ctxt: xmlXPathContextPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathEvalPredicate (ctxt: xmlXPathContextPtr; res: xmlXPathObjectPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathEvaluatePredicateResult (ctxt: xmlXPathParserContextPtr; res: xmlXPathObjectPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXPathFalseFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathFloorFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathFreeCompExpr (comp: xmlXPathCompExprPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathFreeContext (ctxt: xmlXPathContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathFreeNodeSet (obj: xmlNodeSetPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathFreeNodeSetList (obj: xmlXPathObjectPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathFreeObject (obj: xmlXPathObjectPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathFreeParserContext (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  function xmlXPathFunctionLookup (ctxt: xmlXPathContextPtr; const name: xmlCharPtr) : xmlXPathFunction; cdecl; external LIBXML2_SO;
  function xmlXPathFunctionLookupNS (ctxt: xmlXPathContextPtr; const name: xmlCharPtr; const ns_uri: xmlCharPtr) : xmlXPathFunction; cdecl; external LIBXML2_SO;
  function xmlXPathHasSameNodes (nodes1: xmlNodeSetPtr; nodes2: xmlNodeSetPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXPathIdFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathInit (); cdecl; external LIBXML2_SO;
  function xmlXPathIntersection (nodes1: xmlNodeSetPtr; nodes2: xmlNodeSetPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  function xmlXPathIsInf (val: double) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathIsNaN (val: double) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathIsNodeType (const name: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXPathLangFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathLastFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathLeading (nodes1: xmlNodeSetPtr; nodes2: xmlNodeSetPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  function xmlXPathLeadingSorted (nodes1: xmlNodeSetPtr; nodes2: xmlNodeSetPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathLocalNameFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathModValues (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathMultValues (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathNamespaceURIFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathNewBoolean (val: Longint) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNewCString (const val: PAnsiChar) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNewContext (doc: xmlDocPtr) : xmlXPathContextPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNewFloat (val: double) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNewNodeSet (val: xmlNodePtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNewNodeSetList (val: xmlNodeSetPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNewParserContext (const str: xmlCharPtr; ctxt: xmlXPathContextPtr) : xmlXPathParserContextPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNewString (const val: xmlCharPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNewValueTree (val: xmlNodePtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextAncestor (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextAncestorOrSelf (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextAttribute (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextChild (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextDescendant (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextDescendantOrSelf (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextFollowing (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextFollowingSibling (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextNamespace (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextParent (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextPreceding (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextPrecedingSibling (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNextSelf (ctxt: xmlXPathParserContextPtr; cur: xmlNodePtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPathNodeLeading (nodes: xmlNodeSetPtr; node: xmlNodePtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNodeLeadingSorted (nodes: xmlNodeSetPtr; node: xmlNodePtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathNodeSetAdd (cur: xmlNodeSetPtr; val: xmlNodePtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathNodeSetAddNs (cur: xmlNodeSetPtr; node: xmlNodePtr; ns: xmlNsPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathNodeSetAddUnique (cur: xmlNodeSetPtr; val: xmlNodePtr); cdecl; external LIBXML2_SO;
  function xmlXPathNodeSetContains (cur: xmlNodeSetPtr; val: xmlNodePtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathNodeSetCreate (val: xmlNodePtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathNodeSetDel (cur: xmlNodeSetPtr; val: xmlNodePtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathNodeSetFreeNs (ns: xmlNsPtr); cdecl; external LIBXML2_SO;
  function xmlXPathNodeSetMerge (val1: xmlNodeSetPtr; val2: xmlNodeSetPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathNodeSetRemove (cur: xmlNodeSetPtr; val: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathNodeSetSort (set_: xmlNodeSetPtr); cdecl; external LIBXML2_SO;
  function xmlXPathNodeTrailing (nodes: xmlNodeSetPtr; node: xmlNodePtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  function xmlXPathNodeTrailingSorted (nodes: xmlNodeSetPtr; node: xmlNodePtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathNormalizeFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathNotEqualValues (ctxt: xmlXPathParserContextPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXPathNotFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathNsLookup (ctxt: xmlXPathContextPtr; const prefix: xmlCharPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathNumberFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathObjectCopy (val: xmlXPathObjectPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathOrderDocElems (doc: xmlDocPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathParseNCName (ctxt: xmlXPathParserContextPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlXPathParseName (ctxt: xmlXPathParserContextPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  function xmlXPathPopBoolean (ctxt: xmlXPathParserContextPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathPopExternal (ctxt: xmlXPathParserContextPtr) : Pointer; cdecl; external LIBXML2_SO;
  function xmlXPathPopNodeSet (ctxt: xmlXPathParserContextPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  function xmlXPathPopNumber (ctxt: xmlXPathParserContextPtr) : double; cdecl; external LIBXML2_SO;
  function xmlXPathPopString (ctxt: xmlXPathParserContextPtr) : xmlCharPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathPositionFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathRegisterAllFunctions (ctxt: xmlXPathContextPtr); cdecl; external LIBXML2_SO;
  function xmlXPathRegisterFunc (ctxt: xmlXPathContextPtr; const name: xmlCharPtr; f: xmlXPathFunction) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXPathRegisterFuncLookup (ctxt: xmlXPathContextPtr; f: xmlXPathFuncLookupFunc; funcCtxt: Pointer); cdecl; external LIBXML2_SO;
  function xmlXPathRegisterFuncNS (ctxt: xmlXPathContextPtr; const name: xmlCharPtr; const ns_uri: xmlCharPtr; f: xmlXPathFunction) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathRegisterNs (ctxt: xmlXPathContextPtr; const prefix: xmlCharPtr; const ns_uri: xmlCharPtr) : Longint; cdecl; external LIBXML2_SO;
  function xmlXPathRegisterVariable (ctxt: xmlXPathContextPtr; const name: xmlCharPtr; value: xmlXPathObjectPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXPathRegisterVariableLookup (ctxt: xmlXPathContextPtr; f: xmlXPathVariableLookupFunc; data: Pointer); cdecl; external LIBXML2_SO;
  function xmlXPathRegisterVariableNS (ctxt: xmlXPathContextPtr; const name: xmlCharPtr; const ns_uri: xmlCharPtr; value: xmlXPathObjectPtr) : Longint; cdecl; external LIBXML2_SO;
  procedure xmlXPathRegisteredFuncsCleanup (ctxt: xmlXPathContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathRegisteredNsCleanup (ctxt: xmlXPathContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathRegisteredVariablesCleanup (ctxt: xmlXPathContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathRoot (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathRoundFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathStartsWithFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathStringEvalNumber (const str: xmlCharPtr) : double; cdecl; external LIBXML2_SO;
  procedure xmlXPathStringFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathStringLengthFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathSubValues (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPathSubstringAfterFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathSubstringBeforeFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathSubstringFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathSumFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPathTrailing (nodes1: xmlNodeSetPtr; nodes2: xmlNodeSetPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  function xmlXPathTrailingSorted (nodes1: xmlNodeSetPtr; nodes2: xmlNodeSetPtr) : xmlNodeSetPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPathTranslateFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathTrueFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  procedure xmlXPathValueFlipSign (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  function xmlXPathVariableLookup (ctxt: xmlXPathContextPtr; const name: xmlCharPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathVariableLookupNS (ctxt: xmlXPathContextPtr; const name: xmlCharPtr; const ns_uri: xmlCharPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathWrapCString (val: PAnsiChar) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathWrapExternal (val: Pointer) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathWrapNodeSet (val: xmlNodeSetPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPathWrapString (val: xmlCharPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPatherror (ctxt: xmlXPathParserContextPtr; const file_: PAnsiChar; line: Longint; no: Longint); cdecl; external LIBXML2_SO;
  function xmlXPtrBuildNodeList (obj: xmlXPathObjectPtr) : xmlNodePtr; cdecl; external LIBXML2_SO;
  function xmlXPtrEval (const str: xmlCharPtr; ctx: xmlXPathContextPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPtrEvalRangePredicate (ctxt: xmlXPathParserContextPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPtrFreeLocationSet (obj: xmlLocationSetPtr); cdecl; external LIBXML2_SO;
  procedure xmlXPtrLocationSetAdd (cur: xmlLocationSetPtr; val: xmlXPathObjectPtr); cdecl; external LIBXML2_SO;
  function xmlXPtrLocationSetCreate (val: xmlXPathObjectPtr) : xmlLocationSetPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPtrLocationSetDel (cur: xmlLocationSetPtr; val: xmlXPathObjectPtr); cdecl; external LIBXML2_SO;
  function xmlXPtrLocationSetMerge (val1: xmlLocationSetPtr; val2: xmlLocationSetPtr) : xmlLocationSetPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPtrLocationSetRemove (cur: xmlLocationSetPtr; val: Longint); cdecl; external LIBXML2_SO;
  function xmlXPtrNewCollapsedRange (start: xmlNodePtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPtrNewContext (doc: xmlDocPtr; here: xmlNodePtr; origin: xmlNodePtr) : xmlXPathContextPtr; cdecl; external LIBXML2_SO;
  function xmlXPtrNewLocationSetNodeSet (set_: xmlNodeSetPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPtrNewLocationSetNodes (start: xmlNodePtr; end_: xmlNodePtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPtrNewRange (start: xmlNodePtr; startindex: Longint; end_: xmlNodePtr; endindex: Longint) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPtrNewRangeNodeObject (start: xmlNodePtr; end_: xmlXPathObjectPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPtrNewRangeNodePoint (start: xmlNodePtr; end_: xmlXPathObjectPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPtrNewRangeNodes (start: xmlNodePtr; end_: xmlNodePtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPtrNewRangePointNode (start: xmlXPathObjectPtr; end_: xmlNodePtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function xmlXPtrNewRangePoints (start: xmlXPathObjectPtr; end_: xmlXPathObjectPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  procedure xmlXPtrRangeToFunction (ctxt: xmlXPathParserContextPtr; nargs: Longint); cdecl; external LIBXML2_SO;
  function xmlXPtrWrapLocationSet (val: xmlLocationSetPtr) : xmlXPathObjectPtr; cdecl; external LIBXML2_SO;
  function __docbDefaultSAXHandler(): xmlSAXHandlerV1Ptr; cdecl; external LIBXML2_SO;
var
  __emptyExp: xmlExpNodePtrPtr;
var
  __forbiddenExp: xmlExpNodePtrPtr;
  function __htmlDefaultSAXHandler(): xmlSAXHandlerV1Ptr; cdecl; external LIBXML2_SO;
  function __oldXMLWDcompatibility(): PInteger; cdecl; external LIBXML2_SO;
  function __xmlBufferAllocScheme(): xmlBufferAllocationSchemePtr; cdecl; external LIBXML2_SO;
  function __xmlDefaultBufferSize(): PInteger; cdecl; external LIBXML2_SO;
  function __xmlDefaultSAXHandler(): xmlSAXHandlerV1Ptr; cdecl; external LIBXML2_SO;
  function __xmlDefaultSAXLocator(): xmlSAXLocatorPtr; cdecl; external LIBXML2_SO;
  function __xmlDeregisterNodeDefaultValue(): xmlDeregisterNodeFuncPtr; cdecl; external LIBXML2_SO;
  function __xmlDoValidityCheckingDefaultValue(): PInteger; cdecl; external LIBXML2_SO;
  procedure xmlFree (mem: Pointer); cdecl;
  function __xmlGenericError(): xmlGenericErrorFuncPtr; cdecl; external LIBXML2_SO;
  function __xmlGenericErrorContext(): PPointer; cdecl; external LIBXML2_SO;
  function __xmlGetWarningsDefaultValue(): PInteger; cdecl; external LIBXML2_SO;
  function __xmlIndentTreeOutput(): PInteger; cdecl; external LIBXML2_SO;
var
  __xmlIsBaseCharGroup: xmlChRangeGroupPtr;
var
  __xmlIsCharGroup: xmlChRangeGroupPtr;
var
  __xmlIsCombiningGroup: xmlChRangeGroupPtr;
var
  __xmlIsDigitGroup: xmlChRangeGroupPtr;
var
  __xmlIsExtenderGroup: xmlChRangeGroupPtr;
var
  __xmlIsIdeographicGroup: xmlChRangeGroupPtr;
  function __xmlKeepBlanksDefaultValue(): PInteger; cdecl; external LIBXML2_SO;
  function __xmlLastError(): xmlErrorPtr; cdecl; external LIBXML2_SO;
  function __xmlLineNumbersDefaultValue(): PInteger; cdecl; external LIBXML2_SO;
  function __xmlLoadExtDtdDefaultValue(): PInteger; cdecl; external LIBXML2_SO;
  function xmlMalloc (size: size_t) : Pointer; cdecl;
  function xmlMallocAtomic (size: size_t) : Pointer; cdecl;
  function xmlMemStrdup (const str: PAnsiChar) : PAnsiChar; cdecl;
  function __xmlOutputBufferCreateFilenameValue(): xmlOutputBufferCreateFilenameFuncPtr; cdecl; external LIBXML2_SO;
  function __xmlParserDebugEntities(): PInteger; cdecl; external LIBXML2_SO;
  function __xmlParserInputBufferCreateFilenameValue(): xmlParserInputBufferCreateFilenameFuncPtr; cdecl; external LIBXML2_SO;
var
  __xmlParserMaxDepth: PCardinal;
  function __xmlParserVersion(): PPAnsiChar; cdecl; external LIBXML2_SO;
  function __xmlPedanticParserDefaultValue(): PInteger; cdecl; external LIBXML2_SO;
  function xmlRealloc (mem: Pointer; size: size_t) : Pointer; cdecl;
  function __xmlRegisterNodeDefaultValue(): xmlRegisterNodeFuncPtr; cdecl; external LIBXML2_SO;
  function __xmlSaveNoEmptyTags(): PInteger; cdecl; external LIBXML2_SO;
var
  xmlStringComment: PAnsiChar;
var
  xmlStringText: PAnsiChar;
var
  xmlStringTextNoenc: PAnsiChar;
  function __xmlStructuredError(): xmlStructuredErrorFuncPtr; cdecl; external LIBXML2_SO;
  function __xmlSubstituteEntitiesDefaultValue(): PInteger; cdecl; external LIBXML2_SO;
  function __xmlTreeIndentString(): PPAnsiChar; cdecl; external LIBXML2_SO;
var
  __xmlXPathNAN: PDouble;
var
  __xmlXPathNINF: PDouble;
var
  __xmlXPathPINF: PDouble;

type charTab = array[0..255] of Byte;
   charTabPtr = ^charTab;

var
  xmlIsPubidChar_tab: charTab;

// macros from xpath.h
  function xmlXPathNodeSetGetLength(ns: xmlNodeSetPtr): Integer;
  function xmlXPathNodeSetItem(ns: xmlNodeSetPtr; index: Integer): xmlNodePtr;
  function xmlXPathNodeSetIsEmpty(ns: xmlNodeSetPtr): Boolean;

implementation
uses
{$IFDEF MSWINDOWS}
  Windows,
{$ENDIF}
  SysUtils;

var
  libHandle: THandle;

// Utility function to make sure procedure entry points are not null

procedure CheckForNil(ptr: Pointer; name:string);
begin
  if not Assigned(ptr) then
    raise Exception.Create('"' + name + '" could not be loaded from the dynamic library ' + LIBXML2_SO);
end;


// macros from xpath.h

function xmlXPathNodeSetGetLength(ns: xmlNodeSetPtr): Integer;
begin
  if Assigned(ns) then
    Result := ns.nodeNr
  else
    Result := 0
end;

function xmlXPathNodeSetItem(ns: xmlNodeSetPtr; index: Integer): xmlNodePtr;
var
  p: xmlNodePtrPtr;
begin
  if (ns = nil) or (index < 0) or (index >= ns.nodeNr) then
    Result := nil
  else
  begin
    p := ns.nodeTab;
    Inc(p, index);
    Result := p^;
  end;
end;

function xmlXPathNodeSetIsEmpty(ns: xmlNodeSetPtr): Boolean;
begin
  Result := ((ns = nil) or (ns.nodeNr = 0) or (ns.nodeTab = nil));
end;

var
   pxmlFree: xmlFreeFuncPtr;

procedure xmlFree (mem: Pointer); cdecl;
begin
  CheckForNil(pxmlFree, 'xmlFree');
  pxmlFree^(mem);
end;

var
   pxmlMalloc: xmlMallocFuncPtr;

function xmlMalloc (size: size_t) : Pointer; cdecl;
begin
  CheckForNil(pxmlMalloc, 'xmlMalloc');
  Result := pxmlMalloc^(size);
end;

var
   pxmlMallocAtomic: xmlMallocFuncPtr;

function xmlMallocAtomic (size: size_t) : Pointer; cdecl;
begin
  CheckForNil(pxmlMallocAtomic, 'xmlMallocAtomic');
  Result := pxmlMallocAtomic^(size);
end;

var
   pxmlMemStrdup: xmlStrdupFuncPtr;

function xmlMemStrdup (const str: PAnsiChar) : PAnsiChar; cdecl;
begin
  CheckForNil(pxmlMemStrdup, 'xmlMemStrdup');
  Result := pxmlMemStrdup^(str);
end;

var
   pxmlRealloc: xmlReallocFuncPtr;

function xmlRealloc (mem: Pointer; size: size_t) : Pointer; cdecl;
begin
  CheckForNil(pxmlRealloc, 'xmlRealloc');
  Result := pxmlRealloc^(mem, size);
end;



initialization
  // The Delphi 'external' directive can be used for functions and procedures,
  // but here we need to obtain the addresses of POINTERS to functions. We can
  // get to these addresses (and also those of other data values exported from
  // the DLL) by using GetProcAddress.
  libHandle := LoadLibrary(LIBXML2_SO);
  if libHandle <> 0 then
  begin
    __emptyExp := xmlExpNodePtrPtr(GetProcAddress(libHandle, 'emptyExp'));
    __forbiddenExp := xmlExpNodePtrPtr(GetProcAddress(libHandle, 'forbiddenExp'));
    pxmlFree := xmlFreeFuncPtr(GetProcAddress(libHandle, 'xmlFree'));
    __xmlIsBaseCharGroup := xmlChRangeGroupPtr(GetProcAddress(libHandle, 'xmlIsBaseCharGroup'));
    __xmlIsCharGroup := xmlChRangeGroupPtr(GetProcAddress(libHandle, 'xmlIsCharGroup'));
    __xmlIsCombiningGroup := xmlChRangeGroupPtr(GetProcAddress(libHandle, 'xmlIsCombiningGroup'));
    __xmlIsDigitGroup := xmlChRangeGroupPtr(GetProcAddress(libHandle, 'xmlIsDigitGroup'));
    __xmlIsExtenderGroup := xmlChRangeGroupPtr(GetProcAddress(libHandle, 'xmlIsExtenderGroup'));
    __xmlIsIdeographicGroup := xmlChRangeGroupPtr(GetProcAddress(libHandle, 'xmlIsIdeographicGroup'));
    xmlIsPubidChar_tab := charTabPtr(GetProcAddress(libHandle, 'xmlIsPubidChar_tab'))^;
    pxmlMalloc := xmlMallocFuncPtr(GetProcAddress(libHandle, 'xmlMalloc'));
    pxmlMallocAtomic := xmlMallocFuncPtr(GetProcAddress(libHandle, 'xmlMallocAtomic'));
    pxmlMemStrdup := xmlStrdupFuncPtr(GetProcAddress(libHandle, 'xmlMemStrdup'));
    __xmlParserMaxDepth := PCardinal(GetProcAddress(libHandle, 'xmlParserMaxDepth'));
    pxmlRealloc := xmlReallocFuncPtr(GetProcAddress(libHandle, 'xmlRealloc'));
    xmlStringComment := PAnsiChar(GetProcAddress(libHandle, 'xmlStringComment'));
    xmlStringText := PAnsiChar(GetProcAddress(libHandle, 'xmlStringText'));
    xmlStringTextNoenc := PAnsiChar(GetProcAddress(libHandle, 'xmlStringTextNoenc'));
    __xmlXPathNAN := PDouble(GetProcAddress(libHandle, 'xmlXPathNAN'));
    __xmlXPathNINF := PDouble(GetProcAddress(libHandle, 'xmlXPathNINF'));
    __xmlXPathPINF := PDouble(GetProcAddress(libHandle, 'xmlXPathPINF'));

    FreeLibrary(libHandle);
  end;

end.
